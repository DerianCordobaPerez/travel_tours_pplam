{"version":3,"sources":["usePress.ts"],"names":["usePress","isDisabled","onPress","onPressStart","onPressEnd","onPressUp","onPressChange","isPressed","isPressedProp","restProps","setPressed","React","useState","pressProps","e","onPressIn","onPressOut"],"mappings":";;;;;;;AAAA;;AACA;;;;AA0CO,SAASA,QAAT,CAAkB;AACvBC,EAAAA,UADuB;AAEvBC,EAAAA,OAFuB;AAGvBC,EAAAA,YAHuB;AAIvBC,EAAAA,UAJuB;AAKvBC,EAAAA,SALuB;AAKZ;AACXC,EAAAA,aANuB;AAOvBC,EAAAA,SAAS,EAAEC,aAPY;AAQvB,KAAGC;AARoB,CAAlB,EASyB;AAC9B,MAAI,CAACF,SAAD,EAAYG,UAAZ,IAA0BC,eAAMC,QAAN,CAAe,KAAf,CAA9B;;AAEA,MAAIC,UAAU,GAAG;AACfX,IAAAA,OAAO,EAAGY,CAAD,IAAY;AACnB,UAAIb,UAAJ,EAAgB;AAChBC,MAAAA,OAAO,IAAIA,OAAO,CAACY,CAAD,CAAlB;AACD,KAJc;AAKfC,IAAAA,SAAS,EAAGD,CAAD,IAAY;AACrB,UAAIb,UAAJ,EAAgB;AAChBE,MAAAA,YAAY,IAAIA,YAAY,CAACW,CAAD,CAA5B;AACAJ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAJ,MAAAA,aAAa,IAAIA,aAAa,CAAC,IAAD,CAA9B;AACD,KAVc;AAWfU,IAAAA,UAAU,EAAGF,CAAD,IAAY;AACtB,UAAIb,UAAJ,EAAgB;AAChBG,MAAAA,UAAU,IAAIA,UAAU,CAACU,CAAD,CAAxB;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,aAAa,IAAIA,aAAa,CAAC,KAAD,CAA9B;AACAD,MAAAA,SAAS,IAAIA,SAAS,CAACS,CAAD,CAAtB;AACD;AAjBc,GAAjB;AAoBAD,EAAAA,UAAU,GAAG,uBAAWA,UAAX,EAAuBJ,SAAvB,CAAb;AAEA,SAAO;AACLF,IAAAA,SAAS,EAAEC,aAAa,IAAID,SADvB;AAELM,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import React, { RefObject } from 'react';\nimport { mergeProps } from '@react-aria/utils';\n\nexport interface PressEvents {\n  /** Handler that is called when the press is released over the target. */\n  onPress?: (e: any) => void;\n  /** Handler that is called when a press interaction starts. */\n  onPressStart?: (e: any) => void;\n  /**\n   * Handler that is called when a press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onPressEnd?: (e: any) => void;\n  /** Handler that is called when the press state changes. */\n  onPressChange?: (isPressed: boolean) => void;\n  /**\n   * Handler that is called when a press is released over the target, regardless of\n   * whether it started on the target or not.\n   */\n  onPressUp?: (e: any) => void;\n}\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean;\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean;\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean;\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<any>;\n}\n\nexport type PressResult = {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean;\n  /** Props to spread on the target element. */\n  pressProps: any;\n};\n\nexport function usePress({\n  isDisabled,\n  onPress,\n  onPressStart,\n  onPressEnd,\n  onPressUp, // No onPressUp on RN.\n  onPressChange,\n  isPressed: isPressedProp,\n  ...restProps\n}: PressHookProps): PressResult {\n  let [isPressed, setPressed] = React.useState(false);\n\n  let pressProps = {\n    onPress: (e: any) => {\n      if (isDisabled) return;\n      onPress && onPress(e);\n    },\n    onPressIn: (e: any) => {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: (e: any) => {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    },\n  };\n\n  pressProps = mergeProps(pressProps, restProps);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps,\n  };\n}\n"]}