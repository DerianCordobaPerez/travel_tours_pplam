import { mergeProps } from '@react-aria/utils';
import { usePress } from '@react-native-aria/interactions';
import { getLabel } from '@react-native-aria/utils';

/**
 * Provides the behavior and accessibility implementation for an individual
 * radio button in a radio group.
 * @param props - Props for the radio.
 * @param state - State for the radio group, as returned by `useRadioGroupState`.
 * @param ref - Ref to the HTML input element.
 */
export function useRadio(props, state, _ref) {
  var _preventChanges;

  let {
    value,
    isReadOnly,
    isDisabled,
    children
  } = props;
  let hasChildren = children != null;
  const label = getLabel(props);

  if (!hasChildren && !label) {
    console.warn('If you do not provide children, you must specify an aria-label for accessibility');
  }

  let preventChanges = isDisabled || isReadOnly;
  preventChanges = (_preventChanges = preventChanges) !== null && _preventChanges !== void 0 ? _preventChanges : false;
  let checked = state.selectedValue === value;

  let onPress = () => {
    state.setSelectedValue(value);
  };

  let {
    pressProps
  } = usePress({
    isDisabled: preventChanges,
    onPress
  });
  return {
    inputProps: mergeProps(props, { ...pressProps,
      checked,
      disabled: preventChanges,
      value,
      accessibilityLabel: label,
      accessibilityRole: 'radio',
      accessibilityState: {
        disabled: preventChanges,
        checked
      }
    })
  };
}
//# sourceMappingURL=useRadio.js.map