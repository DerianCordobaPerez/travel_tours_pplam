{"version":3,"sources":["useRadio.ts"],"names":["useRadio","props","state","_ref","value","isReadOnly","isDisabled","children","hasChildren","label","console","warn","preventChanges","checked","selectedValue","onPress","setSelectedValue","pressProps","inputProps","disabled","accessibilityLabel","accessibilityRole","accessibilityState"],"mappings":";;;;;;;AACA;;AAGA;;AAEA;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAT,CACLC,KADK,EAELC,KAFK,EAGLC,IAHK,EAIM;AAAA;;AACX,MAAI;AAAEC,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,UAArB;AAAiCC,IAAAA;AAAjC,MAA8CN,KAAlD;AAEA,MAAIO,WAAW,GAAGD,QAAQ,IAAI,IAA9B;AACA,QAAME,KAAK,GAAG,sBAASR,KAAT,CAAd;;AAEA,MAAI,CAACO,WAAD,IAAgB,CAACC,KAArB,EAA4B;AAC1BC,IAAAA,OAAO,CAACC,IAAR,CACE,kFADF;AAGD;;AAED,MAAIC,cAAc,GAAGN,UAAU,IAAID,UAAnC;AACAO,EAAAA,cAAc,sBAAGA,cAAH,6DAAqB,KAAnC;AAEA,MAAIC,OAAO,GAAGX,KAAK,CAACY,aAAN,KAAwBV,KAAtC;;AAEA,MAAIW,OAAO,GAAG,MAAM;AAClBb,IAAAA,KAAK,CAACc,gBAAN,CAAuBZ,KAAvB;AACD,GAFD;;AAIA,MAAI;AAAEa,IAAAA;AAAF,MAAiB,4BAAS;AAC5BX,IAAAA,UAAU,EAAEM,cADgB;AAE5BG,IAAAA;AAF4B,GAAT,CAArB;AAKA,SAAO;AACLG,IAAAA,UAAU,EAAE,uBAAWjB,KAAX,EAAkB,EAC5B,GAAGgB,UADyB;AAE5BJ,MAAAA,OAF4B;AAG5BM,MAAAA,QAAQ,EAAEP,cAHkB;AAI5BR,MAAAA,KAJ4B;AAK5BgB,MAAAA,kBAAkB,EAAEX,KALQ;AAM5BY,MAAAA,iBAAiB,EAAE,OANS;AAO5BC,MAAAA,kBAAkB,EAAE;AAClBH,QAAAA,QAAQ,EAAEP,cADQ;AAElBC,QAAAA;AAFkB;AAPQ,KAAlB;AADP,GAAP;AAcD","sourcesContent":["import type { AriaRadioProps } from '@react-types/radio';\nimport { mergeProps } from '@react-aria/utils';\nimport type { InputHTMLAttributes, RefObject } from 'react';\nimport type { RadioGroupState } from '@react-stately/radio';\nimport { usePress } from '@react-native-aria/interactions';\nimport type { AccessibilityProps } from 'react-native';\nimport { getLabel } from '@react-native-aria/utils';\n\nexport interface RadioAriaProps extends AriaRadioProps, AccessibilityProps {\n  /**\n   * Whether the Radio is required. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required).\n   */\n  isRequired?: boolean;\n  /**\n   * Whether the Radio can be interacted with but cannot have its selection state changed.\n   */\n  isReadOnly?: boolean;\n}\n\nexport interface RadioAria extends AccessibilityProps {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLElement>;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(\n  props: RadioAriaProps,\n  state: RadioGroupState,\n  _ref: RefObject<HTMLElement>\n): RadioAria {\n  let { value, isReadOnly, isDisabled, children } = props;\n\n  let hasChildren = children != null;\n  const label = getLabel(props);\n\n  if (!hasChildren && !label) {\n    console.warn(\n      'If you do not provide children, you must specify an aria-label for accessibility'\n    );\n  }\n\n  let preventChanges = isDisabled || isReadOnly;\n  preventChanges = preventChanges ?? false;\n\n  let checked = state.selectedValue === value;\n\n  let onPress = () => {\n    state.setSelectedValue(value);\n  };\n\n  let { pressProps } = usePress({\n    isDisabled: preventChanges,\n    onPress,\n  });\n\n  return {\n    inputProps: mergeProps(props, {\n      ...pressProps,\n      checked,\n      disabled: preventChanges,\n      value,\n      accessibilityLabel: label,\n      accessibilityRole: 'radio',\n      accessibilityState: {\n        disabled: preventChanges,\n        checked,\n      },\n    }),\n  };\n}\n"]}