import { clamp } from '@react-aria/utils';
import { getSliderThumbId, sliderIds } from './utils';
import { useRef } from 'react';
import { useLabel } from '@react-aria/label';
import { useMove } from './useMove';
import { isRTL } from '@react-native-aria/utils';

/**
 * Provides behavior and accessibility for a thumb of a slider component.
 *
 * @param opts Options for this Slider thumb.
 * @param state Slider state, created via `useSliderState`.
 */
export function useSliderThumb(opts, state) {
  var _opts$ariaLabelledby;

  let {
    index,
    isDisabled,
    trackLayout
  } = opts;
  let isVertical = opts.orientation === 'vertical';
  const direction = isRTL() ? 'rtl' : undefined;
  let labelId = sliderIds.get(state);
  const {
    labelProps,
    fieldProps
  } = useLabel({ ...opts,
    'id': getSliderThumbId(state, index),
    'aria-labelledby': `${labelId} ${(_opts$ariaLabelledby = opts['aria-labelledby']) !== null && _opts$ariaLabelledby !== void 0 ? _opts$ariaLabelledby : ''}`.trim()
  });
  const stateRef = useRef(null);
  stateRef.current = state;
  let reverseX = direction === 'rtl';
  let currentPosition = useRef(null);
  let {
    moveProps
  } = useMove({
    onMoveStart() {
      currentPosition.current = null;
      state.setThumbDragging(index, true);
    },

    onMove({
      deltaX,
      deltaY
    }) {
      let size = isVertical ? trackLayout.height : trackLayout.width;

      if (currentPosition.current == null) {
        currentPosition.current = stateRef.current.getThumbPercent(index) * size;
      }

      let delta = isVertical ? deltaY : deltaX;

      if (isVertical || reverseX) {
        delta = -delta;
      }

      currentPosition.current += delta;
      stateRef.current.setThumbPercent(index, clamp(currentPosition.current / size, 0, 1));
    },

    onMoveEnd() {
      state.setThumbDragging(index, false);
    }

  });
  state.setThumbEditable(index, !isDisabled);

  const onAccessibilityAction = event => {
    var _ref, _ref2;

    const max = state.getThumbMinValue(index);
    const min = state.getThumbMaxValue(index);
    const value = state.getThumbValue(index);
    const incrementValue = Math.min((_ref = value + state.step) !== null && _ref !== void 0 ? _ref : 1, max);
    const decrementValue = Math.max((_ref2 = value - state.step) !== null && _ref2 !== void 0 ? _ref2 : 1, min);

    switch (event.nativeEvent.actionName) {
      case 'increment':
        state.setThumbValue(index, incrementValue);
        break;

      case 'decrement':
        state.setThumbValue(index, decrementValue);
        break;

      default:
        break;
    }
  };

  return {
    inputProps: { ...fieldProps,
      disabled: isDisabled,
      accessibilityRole: 'adjustable',
      accessibilityValue: {
        min: state.getThumbMinValue(index),
        max: state.getThumbMaxValue(index),
        now: state.getThumbValue(index)
      },
      accessibilityActions: [{
        name: 'increment',
        label: 'Increment'
      }, {
        name: 'decrement',
        label: 'Decrement'
      }],
      onAccessibilityAction
    },
    thumbProps: !isDisabled ? moveProps : {},
    labelProps
  };
}
//# sourceMappingURL=useSliderThumb.js.map