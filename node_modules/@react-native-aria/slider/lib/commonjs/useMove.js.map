{"version":3,"sources":["useMove.ts"],"names":["useMove","props","onMoveStart","onMove","onMoveEnd","panResponter","React","useMemo","PanResponder","create","onMoveShouldSetPanResponderCapture","_event","onPanResponderGrant","_evt","type","pointerType","onPanResponderMove","gestureState","dx","dy","deltaX","deltaY","onPanResponderRelease","moveProps","panHandlers"],"mappings":";;;;;;;AAYA;;AACA;;;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACO,SAASA,OAAT,CAAiBC,KAAjB,EAAyC;AAC9C,MAAI;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA;AAAvB,MAAqCH,KAAzC;;AAEA,QAAMI,YAAY,GAAGC,eAAMC,OAAN,CACnB,MACEC,0BAAaC,MAAb,CAAoB;AAClBC,IAAAA,kCAAkC,EAAGC,MAAD,IAAY;AAC9C,aAAO,IAAP;AACD,KAHiB;AAIlBC,IAAAA,mBAAmB,EAAGC,IAAD,IAAU;AAC7BX,MAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAG;AACZY,QAAAA,IAAI,EAAE,WADM;AAEZC,QAAAA,WAAW,EAAE;AAFD,OAAH,CAAX;AAID,KATiB;AAUlBC,IAAAA,kBAAkB,EAAE,CAACL,MAAD,EAASM,YAAT,KAA0B;AAC5C,UAAIA,YAAY,CAACC,EAAb,KAAoB,CAApB,IAAyBD,YAAY,CAACE,EAAb,KAAoB,CAAjD,EAAoD;AAClD;AACD;;AAEDhB,MAAAA,MAAM,CAAC;AACLW,QAAAA,IAAI,EAAE,MADD;AAELC,QAAAA,WAAW,EAAE,OAFR;AAGLK,QAAAA,MAAM,EAAEH,YAAY,CAACC,EAHhB;AAILG,QAAAA,MAAM,EAAEJ,YAAY,CAACE;AAJhB,OAAD,CAAN;AAMD,KArBiB;AAsBlBG,IAAAA,qBAAqB,EAAE,MAAM;AAC3BlB,MAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAG;AACVU,QAAAA,IAAI,EAAE,SADI;AAEVC,QAAAA,WAAW,EAAE;AAFH,OAAH,CAAT;AAID;AA3BiB,GAApB,CAFiB,EA+BnB,CAACZ,MAAD,EAASC,SAAT,EAAoBF,WAApB,CA/BmB,CAArB;;AAkCA,SAAO;AAAEqB,IAAAA,SAAS,EAAElB,YAAY,CAACmB;AAA1B,GAAP;AACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React from 'react';\nimport { PanResponder } from 'react-native';\n\ninterface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: any;\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: any): MoveResult {\n  let { onMoveStart, onMove, onMoveEnd } = props;\n\n  const panResponter = React.useMemo(\n    () =>\n      PanResponder.create({\n        onMoveShouldSetPanResponderCapture: (_event) => {\n          return true;\n        },\n        onPanResponderGrant: (_evt) => {\n          onMoveStart?.({\n            type: 'movestart',\n            pointerType: 'touch',\n          });\n        },\n        onPanResponderMove: (_event, gestureState) => {\n          if (gestureState.dx === 0 && gestureState.dy === 0) {\n            return;\n          }\n\n          onMove({\n            type: 'move',\n            pointerType: 'touch',\n            deltaX: gestureState.dx,\n            deltaY: gestureState.dy,\n          });\n        },\n        onPanResponderRelease: () => {\n          onMoveEnd?.({\n            type: 'moveend',\n            pointerType: 'touch',\n          });\n        },\n      }),\n    [onMove, onMoveEnd, onMoveStart]\n  );\n\n  return { moveProps: panResponter.panHandlers };\n}\n"]}