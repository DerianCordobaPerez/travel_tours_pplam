{"version":3,"sources":["useToggle.ts"],"names":["useToggle","props","state","_ref","isDisabled","isRequired","isReadOnly","value","name","onPress","setSelected","isSelected","hasChildren","children","label","console","warn","pressProps","inputProps","disabled","required","readOnly","accessibilityLabel","accessibilityState"],"mappings":";;;;;;;AAAA;;AAGA;;AACA;;AAUA;AACA;AACA;AACO,SAASA,SAAT,CACLC,KADK,EAELC,KAFK,EAGLC,IAHK,EAIO;AACZ,MAAI;AACFC,IAAAA,UAAU,GAAG,KADX;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,UAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,IALE,CAMF;;AANE,MAOAP,KAPJ;;AASA,MAAIQ,OAAO,GAAG,MAAM;AAClBP,IAAAA,KAAK,CAACQ,WAAN,CAAkB,CAACR,KAAK,CAACS,UAAzB;AACD,GAFD;;AAIA,MAAIC,WAAW,GAAGX,KAAK,CAACY,QAAN,IAAkB,IAApC;AAEA,QAAMC,KAAK,GAAG,sBAASb,KAAT,CAAd;;AAEA,MAAI,CAACW,WAAD,IAAgB,CAACE,KAArB,EAA4B;AAC1BC,IAAAA,OAAO,CAACC,IAAR,CACE,kFADF;AAGD,GAtBW,CAwBZ;;;AACA,MAAI;AAAEC,IAAAA;AAAF,MAAiB,4BAAS;AAC5Bb,IAAAA,UAD4B;AAE5BK,IAAAA;AAF4B,GAAT,CAArB;AAKA,SAAO;AACLS,IAAAA,UAAU,EAAE,uBAAWjB,KAAX,EAAkB;AAC5BkB,MAAAA,QAAQ,EAAEf,UADkB;AAE5BgB,MAAAA,QAAQ,EAAEf,UAFkB;AAG5BgB,MAAAA,QAAQ,EAAEf,UAHkB;AAI5BC,MAAAA,KAJ4B;AAK5BC,MAAAA,IAL4B;AAM5B,SAAGS,UANyB;AAO5BK,MAAAA,kBAAkB,EAAER,KAPQ;AAQ5BS,MAAAA,kBAAkB,EAAE;AAClBJ,QAAAA,QAAQ,EAAEf;AADQ;AARQ,KAAlB;AADP,GAAP;AAcD","sourcesContent":["import { mergeProps } from '@react-aria/utils';\nimport type { RefObject } from 'react';\nimport type { ToggleState } from '@react-stately/toggle';\nimport { usePress } from '@react-native-aria/interactions';\nimport { getLabel } from '@react-native-aria/utils';\nimport { AriaToggleProps } from '@react-types/checkbox';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: any;\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(\n  props: AriaToggleProps,\n  state: ToggleState,\n  _ref: RefObject<any>\n): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    // validationState = 'valid', // No support for Invalid in RN\n  } = props;\n\n  let onPress = () => {\n    state.setSelected(!state.isSelected);\n  };\n\n  let hasChildren = props.children != null;\n\n  const label = getLabel(props);\n\n  if (!hasChildren && !label) {\n    console.warn(\n      'If you do not provide children, you must specify an aria-label for accessibility'\n    );\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let { pressProps } = usePress({\n    isDisabled,\n    onPress,\n  });\n\n  return {\n    inputProps: mergeProps(props, {\n      disabled: isDisabled,\n      required: isRequired,\n      readOnly: isReadOnly,\n      value,\n      name,\n      ...pressProps,\n      accessibilityLabel: label,\n      accessibilityState: {\n        disabled: isDisabled,\n      },\n    }),\n  };\n}\n"]}