{"version":3,"sources":["useToggle.web.ts"],"names":["useToggle","props","state","ref","isDisabled","isRequired","isReadOnly","value","name","children","ariaLabel","ariaLabelledby","validationState","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","console","warn","pressProps","focusableProps","interactions","domProps","labelable","inputProps","undefined","disabled","required","type"],"mappings":";;;;;;;AAaA;;AAGA;;AACA;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACO,SAASA,SAAT,CACLC,KADK,EAELC,KAFK,EAGLC,GAHK,EAIO;AACZ,MAAI;AACFC,IAAAA,UAAU,GAAG,KADX;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,UAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,IALE;AAMFC,IAAAA,QANE;AAOF,kBAAcC,SAPZ;AAQF,uBAAmBC,cARjB;AASFC,IAAAA,eAAe,GAAG;AAThB,MAUAX,KAVJ;;AAYA,MAAIY,QAAQ,GAAIC,CAAD,IAAY;AACzB;AACA;AACAA,IAAAA,CAAC,CAACC,eAAF;AACAb,IAAAA,KAAK,CAACc,WAAN,CAAkBF,CAAC,CAACG,MAAF,CAASC,OAA3B;AACD,GALD;;AAOA,MAAIC,WAAW,GAAGV,QAAQ,IAAI,IAA9B;AACA,MAAIW,YAAY,GAAGV,SAAS,IAAI,IAAb,IAAqBC,cAAc,IAAI,IAA1D;;AACA,MAAI,CAACQ,WAAD,IAAgB,CAACC,YAArB,EAAmC;AACjCC,IAAAA,OAAO,CAACC,IAAR,CACE,kFADF;AAGD,GA1BW,CA4BZ;;;AACA,MAAI;AAAEC,IAAAA;AAAF,MAAiB,4BAAS;AAC5BnB,IAAAA;AAD4B,GAAT,CAArB;AAIA,MAAI;AAAEoB,IAAAA;AAAF,MAAqB,yBAAavB,KAAb,EAAoBE,GAApB,CAAzB;AACA,MAAIsB,YAAY,GAAG,uBAAWF,UAAX,EAAuBC,cAAvB,CAAnB;AACA,MAAIE,QAAQ,GAAG,2BAAezB,KAAf,EAAsB;AAAE0B,IAAAA,SAAS,EAAE;AAAb,GAAtB,CAAf;AAEA,SAAO;AACLC,IAAAA,UAAU,EAAE,uBAAWF,QAAX,EAAqB;AAC/B,sBAAgBd,eAAe,KAAK,SAApB,IAAiCiB,SADlB;AAE/B,2BAAqB5B,KAAK,CAAC,mBAAD,CAFK;AAG/B,uBAAiBA,KAAK,CAAC,eAAD,CAHS;AAI/B,uBAAiBK,UAAU,IAAIuB,SAJA;AAK/BhB,MAAAA,QAL+B;AAM/BiB,MAAAA,QAAQ,EAAE1B,UANqB;AAO/B2B,MAAAA,QAAQ,EAAE1B,UAPqB;AAQ/BE,MAAAA,KAR+B;AAS/BC,MAAAA,IAT+B;AAU/BwB,MAAAA,IAAI,EAAE,UAVyB;AAW/B,SAAGP;AAX4B,KAArB;AADP,GAAP;AAeD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaToggleProps } from \"@react-types/checkbox\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { InputHTMLAttributes, RefObject } from \"react\";\nimport { ToggleState } from \"@react-stately/toggle\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { usePress } from \"@react-native-aria/interactions\";\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>;\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(\n  props: AriaToggleProps,\n  state: ToggleState,\n  ref: RefObject<HTMLElement>\n): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    children,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    validationState = \"valid\",\n  } = props;\n\n  let onChange = (e: any) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn(\n      \"If you do not provide children, you must specify an aria-label for accessibility\"\n    );\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let { pressProps } = usePress({\n    isDisabled,\n  });\n\n  let { focusableProps } = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, { labelable: true });\n\n  return {\n    inputProps: mergeProps(domProps, {\n      \"aria-invalid\": validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-readonly\": isReadOnly || undefined,\n      onChange,\n      disabled: isDisabled,\n      required: isRequired,\n      value,\n      name,\n      type: \"checkbox\",\n      ...interactions,\n    }),\n  };\n}\n"]}