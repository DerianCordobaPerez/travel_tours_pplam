{"version":3,"sources":["useOverlay.web.ts"],"names":["useEffect","useFocusWithin","visibleOverlays","useOverlay","props","ref","onClose","shouldCloseOnBlur","isOpen","isKeyboardDismissDisabled","push","index","indexOf","splice","onHide","length","onKeyDown","e","key","preventDefault","focusWithinProps","isDisabled","onBlurWithin","overlayProps"],"mappings":"AAAA,SAAoCA,SAApC,QAAqD,OAArD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAsCA,MAAMC,eAAyC,GAAG,EAAlD;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CACLC,KADK,EAELC,GAFK,EAGQ;AACb,MAAI;AACFC,IAAAA,OADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA,yBAAyB,GAAG;AAJ1B,MAKAL,KALJ,CADa,CAQb;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,MAAJ,EAAY;AACVN,MAAAA,eAAe,CAACQ,IAAhB,CAAqBL,GAArB;AACD;;AAED,WAAO,MAAM;AACX,UAAIM,KAAK,GAAGT,eAAe,CAACU,OAAhB,CAAwBP,GAAxB,CAAZ;;AACA,UAAIM,KAAK,IAAI,CAAb,EAAgB;AACdT,QAAAA,eAAe,CAACW,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACD;AACF,KALD;AAMD,GAXQ,EAWN,CAACH,MAAD,EAASH,GAAT,CAXM,CAAT,CATa,CAsBb;;AACA,MAAIS,MAAM,GAAG,MAAM;AACjB,QAAIZ,eAAe,CAACA,eAAe,CAACa,MAAhB,GAAyB,CAA1B,CAAf,KAAgDV,GAAhD,IAAuDC,OAA3D,EAAoE;AAClEA,MAAAA,OAAO;AACR;AACF,GAJD,CAvBa,CA6Bb;;;AACA,MAAIU,SAAS,GAAIC,CAAD,IAAY;AAC1B,QAAIA,CAAC,CAACC,GAAF,KAAU,QAAV,IAAsB,CAACT,yBAA3B,EAAsD;AACpDQ,MAAAA,CAAC,CAACE,cAAF;AACAL,MAAAA,MAAM;AACP;AACF,GALD,CA9Ba,CAqCb;;;AAEA,MAAI;AAAEM,IAAAA;AAAF,MAAuBnB,cAAc,CAAC;AACxCoB,IAAAA,UAAU,EAAE,CAACd,iBAD2B;AAExCe,IAAAA,YAAY,EAAE,MAAM;AAClBhB,MAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD;AAJuC,GAAD,CAAzC;AAOA,SAAO;AACLiB,IAAAA,YAAY,EAAE;AACZP,MAAAA,SADY;AAEZ,SAAGI;AAFS;AADT,GAAP;AAMD","sourcesContent":["import { HTMLAttributes, RefObject, useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\n\ninterface OverlayProps {\n  /** Whether the overlay is currently open. */\n  isOpen?: boolean;\n\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void;\n\n  /**\n   * Whether to close the overlay when the user interacts outside it.\n   * @default false\n   */\n  isDismissable?: boolean;\n\n  /** Whether the overlay should close when focus is lost or moves outside it. */\n  shouldCloseOnBlur?: boolean;\n\n  /**\n   * Whether pressing the escape key to close the overlay should be disabled.\n   * @default false\n   */\n  isKeyboardDismissDisabled?: boolean;\n\n  /**\n   * When user interacts with the argument element outside of the overlay ref,\n   * return true if onClose should be called.  This gives you a chance to filter\n   * out interaction with elements that should not dismiss the overlay.\n   * By default, onClose will always be called on interaction outside the overlay ref.\n   */\n  shouldCloseOnInteractOutside?: (element: HTMLElement) => boolean;\n}\n\ninterface OverlayAria {\n  /** Props to apply to the overlay container element. */\n  overlayProps: HTMLAttributes<HTMLElement>;\n}\n\nconst visibleOverlays: RefObject<HTMLElement>[] = [];\n\n/**\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\n * or optionally, on blur. Only the top-most overlay will close at once.\n */\nexport function useOverlay(\n  props: OverlayProps,\n  ref: RefObject<HTMLElement>\n): OverlayAria {\n  let {\n    onClose,\n    shouldCloseOnBlur,\n    isOpen,\n    isKeyboardDismissDisabled = false,\n  } = props;\n\n  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\n  useEffect(() => {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n\n    return () => {\n      let index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n\n  // Only hide the overlay when it is the topmost visible overlay in the stack.\n  let onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n\n  // Handle the escape key\n  let onKeyDown = (e: any) => {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n\n  // Handle clicking outside the overlay to close it\n\n  let { focusWithinProps } = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: () => {\n      onClose && onClose();\n    },\n  });\n\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps,\n    },\n  };\n}\n"]}