{"version":3,"sources":["Portal.tsx"],"names":["React","useEffect","StyleSheet","View","PortalContext","createContext","globalOverlayCounter","PortalProvider","props","items","setItems","useState","setOverlayItem","item","overlayId","prev","concat","id","node","updateOverlayItem","map","removeOverlayItem","newItems","filter","children","OverlayView","absoluteFill","OverlayProvider","OverlayContainer","context","usePortalProvider","useRef","undefined","contents","current","useContext"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport type { ReactNode } from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\n\ntype OverlayItem = {\n  id: number;\n  node: ReactNode;\n};\n\ninterface PortalContext {\n  items: Array<OverlayItem>;\n  setOverlayItem: (node: ReactNode) => number;\n  removeOverlayItem: (id: number) => void;\n  updateOverlayItem: (id: number, node: ReactNode) => void;\n}\n\ninterface ModalProviderProps extends ViewProps {\n  children: ReactNode;\n  provider?: boolean;\n}\n\nconst PortalContext = React.createContext<PortalContext | null>(null);\n\nlet globalOverlayCounter = 0;\n\nexport function PortalProvider(props: { children: ReactNode }) {\n  const [items, setItems] = React.useState<Array<OverlayItem>>([]);\n\n  const setOverlayItem = (item: ReactNode) => {\n    const overlayId = ++globalOverlayCounter;\n    setItems((prev) => prev.concat([{ id: overlayId, node: item }]));\n    return overlayId;\n  };\n\n  const updateOverlayItem = (id: number, node: ReactNode) => {\n    setItems((prev) =>\n      prev.map((item) => {\n        if (item.id === id) {\n          return { id, node };\n        }\n        return item;\n      })\n    );\n  };\n\n  const removeOverlayItem = (id: number) => {\n    setItems((prev) => {\n      const newItems = prev.filter((item) => item.id !== id);\n      return newItems;\n    });\n  };\n\n  return (\n    <PortalContext.Provider\n      value={{ items, setOverlayItem, removeOverlayItem, updateOverlayItem }}\n    >\n      {props.children}\n\n      {/* Render Overlays */}\n      {items.map((item) => {\n        return <React.Fragment key={item.id}>{item.node}</React.Fragment>;\n      })}\n    </PortalContext.Provider>\n  );\n}\n\nfunction OverlayView(props: ModalProviderProps) {\n  return (\n    <View\n      pointerEvents=\"box-none\"\n      style={StyleSheet.absoluteFill}\n      collapsable={false}\n      {...props}\n    />\n  );\n}\n\nexport const OverlayProvider = PortalProvider;\n\nexport function OverlayContainer(props: ModalProviderProps) {\n  const context = usePortalProvider();\n  const overlayId = React.useRef<number | undefined>(undefined);\n  let contents = <OverlayView {...props} />;\n\n  useEffect(\n    () => {\n      // Mount\n      if (overlayId.current === undefined) {\n        overlayId.current = context?.setOverlayItem(contents);\n      }\n      // Update\n      else {\n        if (overlayId.current) {\n          context?.updateOverlayItem(overlayId.current, contents);\n        }\n      }\n    },\n    // To re-render the child\n    [props]\n  );\n\n  // Unmount\n  useEffect(() => {\n    return () => {\n      if (overlayId.current) {\n        context?.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n\n  return null;\n}\n\nfunction usePortalProvider() {\n  const context = React.useContext(PortalContext);\n  return context;\n}\n"]}