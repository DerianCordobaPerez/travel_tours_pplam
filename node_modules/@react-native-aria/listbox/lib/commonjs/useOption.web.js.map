{"version":3,"sources":["useOption.web.ts"],"names":["useOption","props","state","ref","isSelected","isDisabled","key","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","shouldUseVirtualFocus","labelId","descriptionId","_optionProps","collection","getItem","index","itemProps","selectionManager","pressProps","preventFocusOnPress","hoverProps","onHoverStart","setFocused","setFocusedKey","onMouseDown","e","stopPropagation","id","optionProps","labelProps","nativeID","descriptionProps"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AAuCA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,SAAT,CACLC,KADK,EAELC,KAFK,EAGLC,GAHK,EAIO;AACZ,MAAI;AACFC,IAAAA,UADE;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,GAHE;AAIFC,IAAAA,qBAJE;AAKFC,IAAAA,kBALE;AAMFC,IAAAA,aANE;AAOFC,IAAAA;AAPE,MAQAT,KARJ;AAUA,MAAIU,OAAO,GAAG,wBAAd;AACA,MAAIC,aAAa,GAAG,wBAApB;AAEA,MAAIC,YAAiB,GAAG;AACtB,YAAQ,QADc;AAEtB,qBAAiBR,UAFK;AAGtB,qBAAiBD;AAHK,GAAxB,CAdY,CAoBZ;AACA;AACA;;AACA,MAAI,EAAE,wBAAW,uBAAb,CAAJ,EAA8B;AAC5BS,IAAAA,YAAY,CAAC,YAAD,CAAZ,GAA6BZ,KAAK,CAAC,YAAD,CAAlC;AACAY,IAAAA,YAAY,CAAC,iBAAD,CAAZ,GAAkCF,OAAlC;AACAE,IAAAA,YAAY,CAAC,kBAAD,CAAZ,GAAmCD,aAAnC;AACD;;AAED,MAAIH,aAAJ,EAAmB;AACjB;AACAI,IAAAA,YAAY,CAAC,eAAD,CAAZ,GAAgCX,KAAK,CAACY,UAAN,CAAiBC,OAAjB,CAAyBT,GAAzB,EAA8BU,KAA9B,GAAsC,CAAtE;AACAH,IAAAA,YAAY,CAAC,cAAD,CAAZ,GAA+B,+BAAaX,KAAK,CAACY,UAAnB,CAA/B;AACD;;AAED,MAAI;AAAEG,IAAAA;AAAF,MAAgB,kCAAkB;AACpCC,IAAAA,gBAAgB,EAAEhB,KAAK,CAACgB,gBADY;AAEpC;AACAZ,IAAAA,GAHoC;AAIpCH,IAAAA,GAJoC;AAKpCI,IAAAA,qBALoC;AAMpCE,IAAAA,aANoC;AAOpCC,IAAAA;AAPoC,GAAlB,CAApB;AAUA,MAAI;AAAES,IAAAA;AAAF,MAAiB,6BAAS,EAC5B,GAAGF,SADyB;AAE5BZ,IAAAA,UAF4B;AAG5Be,IAAAA,mBAAmB,EAAEV;AAHO,GAAT,CAArB;AAMA,MAAI;AAAEW,IAAAA;AAAF,MAAiB,6BACnB;AACEhB,IAAAA,UAAU,EAAEA,UAAU,IAAI,CAACG,kBAD7B;;AAEEc,IAAAA,YAAY,GAAG;AACb,UAAI,CAAC,mCAAL,EAAuB;AACrBpB,QAAAA,KAAK,CAACgB,gBAAN,CAAuBK,UAAvB,CAAkC,IAAlC,EADqB,CAErB;;AACArB,QAAAA,KAAK,CAACgB,gBAAN,CAAuBM,aAAvB,CAAqClB,GAArC;AACD;AACF;;AARH,GADmB,EAWnBH,GAXmB,CAArB,CAnDY,CAiEZ;AACA;AACA;AACA;AACA;;AACA,QAAMsB,WAAW,GAAIC,CAAD,IAAYA,CAAC,CAACC,eAAF,EAAhC;;AAEAd,EAAAA,YAAY,GAAG,EACb,GAAGA,YADU;AAEb,OAAG,wBAAWM,UAAX,EAAuBE,UAAvB,CAFU;AAGb;AACAO,IAAAA,EAAE,EAAE,sBAAU1B,KAAV,EAAiBI,GAAjB,CAJS;AAKbmB,IAAAA;AALa,GAAf;AAQA,QAAMI,WAAW,GAAG,gCAAmBhB,YAAnB,EAAiCV,GAAjC,CAApB;AAEA,SAAO;AACL0B,IAAAA,WADK;AAELC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAEpB;AADA,KAFP;AAKLqB,IAAAA,gBAAgB,EAAE;AAChBD,MAAAA,QAAQ,EAAEnB;AADM;AALb,GAAP;AASD","sourcesContent":["import { getItemCount } from '@react-stately/collections';\nimport { getItemId } from './utils';\nimport { Key, RefObject } from 'react';\nimport { isFocusVisible } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { isMac, isWebKit, mergeProps, useSlotId } from '@react-aria/utils';\nimport { ListState } from '@react-stately/list';\nimport { useSelectableItem } from '@react-aria/selection';\nimport { useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: any;\n\n  /** Props for the main text element inside the option. */\n  labelProps: any;\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: any;\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  'isDisabled'?: boolean;\n\n  /** Whether the option is selected. */\n  'isSelected'?: boolean;\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string;\n\n  /** The unique key for the option. */\n  'key'?: Key;\n\n  /** Whether selection should occur on press up instead of press down. */\n  'shouldSelectOnPressUp'?: boolean;\n\n  /** Whether the option should be focused when the user hovers over it. */\n  'shouldFocusOnHover'?: boolean;\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  'isVirtualized'?: boolean;\n\n  /** Whether the option should use virtual focus instead of being focused directly. */\n  'shouldUseVirtualFocus'?: boolean;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(\n  props: AriaOptionProps,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): OptionAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    shouldSelectOnPressUp,\n    shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  } = props;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let _optionProps: any = {\n    'role': 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': isSelected,\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    _optionProps['aria-label'] = props['aria-label'];\n    _optionProps['aria-labelledby'] = labelId;\n    _optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    //@ts-ignore\n    _optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    _optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let { itemProps } = useSelectableItem({\n    selectionManager: state.selectionManager,\n    //@ts-ignore\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n  });\n\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus,\n  });\n\n  let { hoverProps } = useHover(\n    {\n      isDisabled: isDisabled || !shouldFocusOnHover,\n      onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          //@ts-ignore\n          state.selectionManager.setFocusedKey(key);\n        }\n      },\n    },\n    ref\n  );\n\n  // Putting this as a last resort, after several hours of debugging.\n  // Why?\n  // tabListProps adds onMouseDown with preventDefault in useSelectableCollection.ts (React Aria) and react-native-web uses onClick for onPress.\n  // This results in tab button not getting focused when clicked\n  // See this example - https://codesandbox.io/s/issue-i-know-but-dont-know-why-1-ydyw5?file=/src/App.js\n  const onMouseDown = (e: any) => e.stopPropagation();\n\n  _optionProps = {\n    ..._optionProps,\n    ...mergeProps(pressProps, hoverProps),\n    //@ts-ignore\n    id: getItemId(state, key),\n    onMouseDown,\n  };\n\n  const optionProps = useMapDomPropsToRN(_optionProps, ref);\n\n  return {\n    optionProps,\n    labelProps: {\n      nativeID: labelId,\n    },\n    descriptionProps: {\n      nativeID: descriptionId,\n    },\n  };\n}\n"]}