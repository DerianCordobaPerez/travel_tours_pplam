{"version":3,"sources":["useListBox.web.ts"],"names":["useListBox","props","state","ref","domProps","labelable","listProps","selectionManager","collection","disabledKeys","id","listIds","set","labelProps","_labelProps","fieldProps","labelElementType","_listBoxProps","selectionMode","role","listBoxProps"],"mappings":";;;;;;;AAaA;;AAGA;;AAGA;;AACA;;AACA;;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAoCA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAT,CACLC,KADK,EAELC,KAFK,EAGLC,GAHK,EAIQ;AACb,MAAIC,QAAQ,GAAG,2BAAeH,KAAf,EAAsB;AAAEI,IAAAA,SAAS,EAAE;AAAb,GAAtB,CAAf;AACA,MAAI;AAAEC,IAAAA;AAAF,MAAgB,kCAAkB,EACpC,GAAGL,KADiC;AAEpCE,IAAAA,GAFoC;AAGpCI,IAAAA,gBAAgB,EAAEL,KAAK,CAACK,gBAHY;AAIpCC,IAAAA,UAAU,EAAEN,KAAK,CAACM,UAJkB;AAKpCC,IAAAA,YAAY,EAAEP,KAAK,CAACO;AALgB,GAAlB,CAApB;AAQA,MAAIC,EAAE,GAAG,kBAAMT,KAAK,CAACS,EAAZ,CAAT;;AACAC,kBAAQC,GAAR,CAAYV,KAAZ,EAAmBQ,EAAnB;;AAEA,MAAI;AAAEG,IAAAA,UAAU,EAAEC,WAAd;AAA2BC,IAAAA;AAA3B,MAA0C,qBAAS,EACrD,GAAGd,KADkD;AAErDS,IAAAA,EAFqD;AAGrD;AACA;AACAM,IAAAA,gBAAgB,EAAE;AALmC,GAAT,CAA9C;AAQA,QAAMH,UAAU,GAAG,6BAAgBC,WAAhB,CAAnB;;AAEA,QAAMG,aAAa,GAAG,uBACpBb,QADoB,EAEpBF,KAAK,CAACK,gBAAN,CAAuBW,aAAvB,KAAyC,UAAzC,GACI;AACE,4BAAwB;AAD1B,GADJ,GAII,EANgB,EAOpB;AACEC,IAAAA,IAAI,EAAE,SADR;AAEE,OAAG,uBAAWJ,UAAX,EAAuBT,SAAvB;AAFL,GAPoB,CAAtB;;AAaA,QAAMc,YAAY,GAAG,gCAAmBH,aAAnB,EAAkCd,GAAlC,CAArB;AAEA,SAAO;AACLU,IAAAA,UADK;AAELO,IAAAA;AAFK,GAAP;AAID","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaListBoxProps } from '@react-types/listbox';\nimport { filterDOMProps, mergeProps } from '@react-aria/utils';\nimport { HTMLAttributes, ReactNode, RefObject } from 'react';\nimport { KeyboardDelegate } from '@react-types/shared';\nimport { listIds } from './utils';\nimport { ListState } from '@react-stately/list';\nimport { useId } from '@react-aria/utils';\nimport { useLabel } from '@react-aria/label';\nimport { useSelectableList } from '@react-aria/selection';\nimport { mapDomPropsToRN, useMapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>;\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>;\n}\n\ninterface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean;\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode;\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(\n  props: AriaListBoxOptions<T>,\n  state: ListState<T>,\n  ref: RefObject<HTMLElement>\n): ListBoxAria {\n  let domProps = filterDOMProps(props, { labelable: true });\n  let { listProps } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n  });\n\n  let id = useId(props.id);\n  listIds.set(state, id);\n\n  let { labelProps: _labelProps, fieldProps } = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span',\n  });\n\n  const labelProps = mapDomPropsToRN(_labelProps);\n\n  const _listBoxProps = mergeProps(\n    domProps,\n    state.selectionManager.selectionMode === 'multiple'\n      ? {\n          'aria-multiselectable': 'true',\n        }\n      : {},\n    {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps),\n    }\n  );\n\n  const listBoxProps = useMapDomPropsToRN(_listBoxProps, ref);\n\n  return {\n    labelProps,\n    listBoxProps,\n  };\n}\n"]}