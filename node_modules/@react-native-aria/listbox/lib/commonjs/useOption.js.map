{"version":3,"sources":["useOption.ts"],"names":["useOption","props","state","_ref","isSelected","isDisabled","key","onPress","selectionManager","select","pressProps","optionProps","accessibilityState","labelProps","descriptionProps"],"mappings":";;;;;;;AACA;;AAwCA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,SAAT,CACLC,KADK,EAELC,KAFK,EAGLC,IAHK,EAIO;AACZ,MAAI;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA;AAA1B,MAAkCL,KAAtC;;AAEA,QAAMM,OAAO,GAAG,MAAM;AACpB;AACAL,IAAAA,KAAK,CAACM,gBAAN,CAAuBC,MAAvB,CAA8BH,GAA9B;AACD,GAHD;;AAKA,MAAI;AAAEI,IAAAA;AAAF,MAAiB,4BAAS;AAC5BH,IAAAA,OAD4B;AAE5BF,IAAAA;AAF4B,GAAT,CAArB;AAKA,SAAO;AACLM,IAAAA,WAAW,EAAE,EACX,GAAGD,UADQ;AAEXE,MAAAA,kBAAkB,EAAE;AAClBR,QAAAA;AADkB;AAFT,KADR;AAOLS,IAAAA,UAAU,EAAE,EAPP;AAQLC,IAAAA,gBAAgB,EAAE;AARb,GAAP;AAUD","sourcesContent":["import { Key, RefObject } from 'react';\nimport { usePress } from '@react-native-aria/interactions';\nimport { ListState } from '@react-stately/list';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: any;\n\n  /** Props for the main text element inside the option. */\n  labelProps: any;\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: any;\n}\n\ninterface AriaOptionProps {\n  /** Whether the option is disabled. */\n  'isDisabled'?: boolean;\n\n  /** Whether the option is selected. */\n  'isSelected'?: boolean;\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string;\n\n  /** The unique key for the option. */\n  'key'?: Key;\n\n  /** Whether selection should occur on press up instead of press down. */\n  'shouldSelectOnPressUp'?: boolean;\n\n  /** Whether the option should be focused when the user hovers over it. */\n  'shouldFocusOnHover'?: boolean;\n\n  /** Whether the option is contained in a virtual scrolling listbox. */\n  'isVirtualized'?: boolean;\n\n  /** Whether the option should use virtual focus instead of being focused directly. */\n  'shouldUseVirtualFocus'?: boolean;\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(\n  props: AriaOptionProps,\n  state: ListState<T>,\n  _ref: RefObject<HTMLElement>\n): OptionAria {\n  let { isSelected, isDisabled, key } = props;\n\n  const onPress = () => {\n    //@ts-ignore\n    state.selectionManager.select(key);\n  };\n\n  let { pressProps } = usePress({\n    onPress,\n    isDisabled,\n  });\n\n  return {\n    optionProps: {\n      ...pressProps,\n      accessibilityState: {\n        isSelected,\n      },\n    },\n    labelProps: {},\n    descriptionProps: {},\n  };\n}\n"]}