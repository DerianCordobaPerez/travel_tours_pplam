{"mappings":";;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;ACFD;;;;;;;;;;;;AAkBA;;;;AAIO,MAAMG,iBAAN,CAAwB;AAI7BC,EAAAA,WAAW,CAACC,QAAD,EAA6BC,aAA7B,EAA8D;AAAA,QAAjCA,aAAiC;AAAjCA,MAAAA,aAAiC,GAAT,OAAS;AAAA;;AAAA,SAHjED,QAGiE;AAAA,SAFjEC,aAEiE;AACvE;AACA,SAAKD,QAAL,mCAAoBA,QAApB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,GAAD,EAAcC,MAAd,EAA8B;AAC9C,QAAIC,OAAO,GAAG,KAAKL,QAAL,CAAcI,MAAd,CAAd;;AACA,QAAI,CAACC,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAGC,qDAAmB,CAACF,MAAD,EAAS,KAAKJ,QAAd,EAAwB,KAAKC,aAA7B,CAA7B;AACA,WAAKD,QAAL,CAAcI,MAAd,IAAwBC,OAAxB;AACD;;AAED,QAAIE,MAAM,GAAGF,OAAO,CAACF,GAAD,CAApB;;AACA,QAAI,CAACI,MAAL,EAAa;AACX,YAAM,IAAIC,KAAJ,kCAAyCL,GAAzC,YAAmDC,MAAnD,aAAN;AACD;;AAED,WAAOG,MAAP;AACD;;AAvB4B;;;;AA0B/B,SAASD,qDAAT,CAA6BF,MAA7B,EAA6CC,OAA7C,EAAwEJ,aAAxE,EAAiG;AAAA,MAAzBA,aAAyB;AAAzBA,IAAAA,aAAyB,GAAT,OAAS;AAAA;;AAC/F;AACA,MAAII,OAAO,CAACD,MAAD,CAAX,EAAqB;AACnB,WAAOC,OAAO,CAACD,MAAD,CAAd;AACD,GAJ8F,CAM/F;AACA;AACA;AACA;AACA;;;AACA,MAAIK,QAAQ,GAAGC,6CAAW,CAACN,MAAD,CAA1B;;AACA,OAAK,IAAID,GAAT,IAAgBE,OAAhB,EAAyB;AACvB,QAAIF,GAAG,CAACQ,UAAJ,CAAeF,QAAQ,GAAG,GAA1B,CAAJ,EAAoC;AAClC,aAAOJ,OAAO,CAACF,GAAD,CAAd;AACD;AACF,GAhB8F,CAkB/F;;;AACA,SAAOE,OAAO,CAACJ,aAAD,CAAd;AACD;;AAED,SAASS,6CAAT,CAAqBN,MAArB,EAAqC;AACnC;AACA,MAAIQ,IAAI,CAACC,MAAT,EAAiB;AACf;AACA,WAAO,IAAID,IAAI,CAACC,MAAT,CAAgBT,MAAhB,EAAwBK,QAA/B;AACD;;AAED,SAAOL,MAAM,CAACU,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAP;AACD;;AC9DD;;;AAGO,MAAMC,gBAAN,CAAuB;AAK5BhB,EAAAA,WAAW,CAACK,MAAD,EAAiBJ,QAAjB,EAA8C;AAAA,SAJjDI,MAIiD;AAAA,SAHjDJ,QAGiD;AAAA,SAFjDgB,KAEiD;AACvD,SAAKZ,MAAL,GAAcA,MAAd;AACA,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKgB,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,CAAWd,GAAX,EAAwBe,SAAxB,EAAuI;AAC3I,QAAIC,OAAO,GAAG,KAAKH,KAAL,CAAWb,GAAX,CAAd;;AACA,QAAI,CAACgB,OAAL,EAAc;AACZ,UAAIC,GAAG,GAAG,KAAKpB,QAAL,CAAcE,kBAAd,CAAiCC,GAAjC,EAAsC,KAAKC,MAA3C,CAAV;;AACA,UAAI,CAACgB,GAAL,EAAU;AACR,cAAM,IAAIZ,KAAJ,kCAAyCL,GAAzC,YAAmD,KAAKC,MAAxD,aAAN;AACD;;AAEDe,MAAAA,OAAO,GAAG,IAAIE,kBAAJ,CAAsBD,GAAtB,EAA2B,KAAKhB,MAAhC,CAAV;AACA,WAAKY,KAAL,CAAWb,GAAX,IAAkBgB,OAAlB;AACD;;AAED,WAAOA,OAAO,CAACF,MAAR,CAAeC,SAAf,CAAP;AACD;;AAxB2B","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@internationalized/message/src/MessageDictionary.ts","./packages/@internationalized/message/src/MessageFormatter.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n\n    return message.format(variables);\n  }\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","MessageDictionary","constructor","messages","defaultLocale","getStringForLocale","key","locale","strings","getStringsForLocale","string","Error","language","getLanguage","startsWith","Intl","Locale","split","MessageFormatter","cache","format","variables","message","msg","IntlMessageFormat"],"version":3,"file":"main.js.map"}