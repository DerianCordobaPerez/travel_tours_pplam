{"mappings":";;AAAA;;;;;;;;;;;AAYA,IAAIA,oDAAc,GAAG,IAAIC,GAAJ,EAArB;AAEA,IAAIC,yDAAmB,GAAG,KAA1B;;AACA,IAAI;AACF;AACAA,EAAAA,yDAAmB,GAAI,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAACC,IAAAA,WAAW,EAAE;AAAd,GAA/B,CAAD,CAA8DC,eAA9D,GAAgFD,WAAhF,KAAgG,YAAtH,CAFE,CAGF;AACD,CAJD,CAIE,OAAOE,CAAP,EAAU,CAAE;;AAEd,IAAIC,kDAAY,GAAG,KAAnB;;AACA,IAAI;AACF;AACAA,EAAAA,kDAAY,GAAI,IAAIL,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAACK,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GAA/B,CAAD,CAAkEJ,eAAlE,GAAoFG,KAApF,KAA8F,MAA7G,CAFE,CAGF;AACD,CAJD,CAIE,OAAOF,CAAP,EAAU,CAAE,C,CAEd;AACA;AACA;;;AACA,MAAMI,2CAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,GADH;AAEN,eAAS,IAFH;AAGN,eAAS,GAHH;AAIN,eAAS,IAJH,CAKN;AACA;;AANM;AADF;AADI,CAAd;;AAkBA;;;OAGO,MAAMC,eAAN,CAAmD;AAIxDC,EAAAA,WAAW,CAACC,MAAD,EAAiBC,OAAjB,EAAoD;AAAA,QAAnCA,OAAmC;AAAnCA,MAAAA,OAAmC,GAAJ,EAAI;AAAA;;AAAA,SAHvDC,eAGuD;AAAA,SAFvDD,OAEuD;AAC7D,SAAKC,eAAL,GAAuBC,8DAAwB,CAACH,MAAD,EAASC,OAAT,CAA/C;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDG,EAAAA,MAAM,CAACC,KAAD,EAAwB;AAC5B,QAAIC,GAAG,GAAG,EAAV;;AACA,QAAI,CAACrB,yDAAD,IAAwB,KAAKgB,OAAL,CAAab,WAAb,IAA4B,IAAxD,EAA8D;AAC5DkB,MAAAA,GAAG,GAAGC,wEAA+B,CAAC,KAAKL,eAAN,EAAuB,KAAKD,OAAL,CAAab,WAApC,EAAiDiB,KAAjD,CAArC;AACD,KAFD,MAEO;AACLC,MAAAA,GAAG,GAAG,KAAKJ,eAAL,CAAqBE,MAArB,CAA4BC,KAA5B,CAAN;AACD;;AAED,QAAI,KAAKJ,OAAL,CAAaT,KAAb,KAAuB,MAAvB,IAAiC,CAACD,kDAAtC,EAAoD;AAAA;;AAClD,UAAI;AAACE,QAAAA,IAAD;AAAOe,QAAAA,WAAW,GAAG,OAArB;AAA8BR,QAAAA;AAA9B,UAAwC,KAAKX,eAAL,EAA5C;AACA,UAAIoB,MAAM,kBAAGf,2CAAK,CAACD,IAAD,CAAR,qBAAG,YAAce,WAAd,CAAb;AACAF,MAAAA,GAAG,IAAIG,MAAM,CAACT,MAAD,CAAN,IAAkBS,MAAM,CAACZ,OAAhC;AACD;;AAED,WAAOS,GAAP;AACD;;AAEDI,EAAAA,aAAa,CAACL,KAAD,EAAyC;AACpD;AACA;AACA,WAAO,KAAKH,eAAL,CAAqBQ,aAArB,CAAmCL,KAAnC,CAAP;AACD;;AAEDhB,EAAAA,eAAe,GAAqC;AAClD,QAAIY,OAAO,GAAG,KAAKC,eAAL,CAAqBb,eAArB,EAAd;;AACA,QAAI,CAACJ,yDAAD,IAAwB,KAAKgB,OAAL,CAAab,WAAb,IAA4B,IAAxD,EAA8D;AAC5Da,MAAAA,OAAO,sCAAOA,OAAP;AAAgBb,QAAAA,WAAW,EAAE,KAAKa,OAAL,CAAab;AAA1C,QAAP;AACD;;AAED,QAAI,CAACG,kDAAD,IAAiB,KAAKU,OAAL,CAAaT,KAAb,KAAuB,MAA5C,EAAoD;AAClDS,MAAAA,OAAO,sCAAOA,OAAP;AAAgBT,QAAAA,KAAK,EAAE,MAAvB;AAA+BC,QAAAA,IAAI,EAAE,KAAKQ,OAAL,CAAaR,IAAlD;AAAwDe,QAAAA,WAAW,EAAE,KAAKP,OAAL,CAAaO;AAAlF,QAAP;AACD;;AAED,WAAOP,OAAP;AACD;;AA3CuD;;AA8C1D,SAASE,8DAAT,CAAkCH,MAAlC,EAAkDC,OAAlD,EAAwG;AAAA,MAAtDA,OAAsD;AAAtDA,IAAAA,OAAsD,GAAvB,EAAuB;AAAA;;AACtG,MAAI;AAACU,IAAAA;AAAD,MAAoBV,OAAxB;;AACA,MAAIU,eAAe,IAAIX,MAAM,CAACY,OAAP,CAAe,QAAf,MAA6B,CAAC,CAArD,EAAwD;AACtDZ,IAAAA,MAAM,GAAMA,MAAN,cAAqBW,eAA3B;AACD;;AAED,MAAIV,OAAO,CAACT,KAAR,KAAkB,MAAlB,IAA4B,CAACD,kDAAjC,EAA+C;AAAA;;AAC7C,QAAI;AAACE,MAAAA,IAAD;AAAOe,MAAAA,WAAW,GAAG;AAArB,QAAgCP,OAApC;;AACA,QAAI,CAACR,IAAL,EAAW;AACT,YAAM,IAAIoB,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,QAAI,kBAACnB,2CAAK,CAACD,IAAD,CAAN,aAAC,aAAce,WAAd,CAAD,CAAJ,EAAiC;AAC/B,YAAM,IAAIK,KAAJ,uBAA8BpB,IAA9B,4BAAyDe,WAAzD,CAAN;AACD;;AACDP,IAAAA,OAAO,sCAAOA,OAAP;AAAgBT,MAAAA,KAAK,EAAE;AAAvB,MAAP;AACD;;AAED,MAAIsB,QAAQ,GAAGd,MAAM,IAAIC,OAAO,GAAGc,MAAM,CAACC,OAAP,CAAef,OAAf,EAAwBgB,IAAxB,CAA6B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAc,CAAC,CAAf,GAAmB,CAA1D,EAA6DC,IAA7D,EAAH,GAAyE,EAApF,CAArB;;AACA,MAAIrC,oDAAc,CAACsC,GAAf,CAAmBP,QAAnB,CAAJ,EAAkC;AAChC,WAAO/B,oDAAc,CAACuC,GAAf,CAAmBR,QAAnB,CAAP;AACD;;AAED,MAAIZ,eAAe,GAAG,IAAIhB,IAAI,CAACC,YAAT,CAAsBa,MAAtB,EAA8BC,OAA9B,CAAtB;AACAlB,EAAAA,oDAAc,CAACwC,GAAf,CAAmBT,QAAnB,EAA6BZ,eAA7B;AACA,SAAOA,eAAP;AACD;AAED;;;AACO,SAASK,wEAAT,CAAyCiB,YAAzC,EAA0EpC,WAA1E,EAA+FqC,GAA/F,EAA4G;AACjH,MAAIrC,WAAW,KAAK,MAApB,EAA4B;AAC1B,WAAOoC,YAAY,CAACpB,MAAb,CAAoBqB,GAApB,CAAP;AACD,GAFD,MAEO,IAAIrC,WAAW,KAAK,OAApB,EAA6B;AAClC,WAAOoC,YAAY,CAACpB,MAAb,CAAoBsB,IAAI,CAACC,GAAL,CAASF,GAAT,CAApB,CAAP;AACD,GAFM,MAEA;AACL,QAAIG,iBAAiB,GAAG,KAAxB;;AACA,QAAIxC,WAAW,KAAK,QAApB,EAA8B;AAC5BwC,MAAAA,iBAAiB,GAAGH,GAAG,GAAG,CAAN,IAAWV,MAAM,CAACc,EAAP,CAAUJ,GAAV,EAAe,CAAf,CAA/B;AACD,KAFD,MAEO,IAAIrC,WAAW,KAAK,YAApB,EAAkC;AACvC,UAAI2B,MAAM,CAACc,EAAP,CAAUJ,GAAV,EAAe,CAAC,CAAhB,KAAsBV,MAAM,CAACc,EAAP,CAAUJ,GAAV,EAAe,CAAf,CAA1B,EAA6C;AAC3CA,QAAAA,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASF,GAAT,CAAN;AACD,OAFD,MAEO;AACLG,QAAAA,iBAAiB,GAAGH,GAAG,GAAG,CAA1B;AACD;AACF;;AAED,QAAIG,iBAAJ,EAAuB;AACrB,UAAIE,QAAQ,GAAGN,YAAY,CAACpB,MAAb,CAAoB,CAACqB,GAArB,CAAf;AACA,UAAIM,MAAM,GAAGP,YAAY,CAACpB,MAAb,CAAoBqB,GAApB,CAAb,CAFqB,CAGrB;;AACA,UAAIO,KAAK,GAAGF,QAAQ,CAACG,OAAT,CAAiBF,MAAjB,EAAyB,EAAzB,EAA6BE,OAA7B,CAAqC,eAArC,EAAsD,EAAtD,CAAZ;;AACA,UAAI,CAAC,GAAGD,KAAJ,EAAWE,MAAX,KAAsB,CAA1B,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,IAAR,CAAa,0EAAb;AACD;;AACD,UAAIC,QAAQ,GAAGP,QAAQ,CAACG,OAAT,CAAiBF,MAAjB,EAAyB,KAAzB,EAAgCE,OAAhC,CAAwCD,KAAxC,EAA+C,GAA/C,EAAoDC,OAApD,CAA4D,KAA5D,EAAmEF,MAAnE,CAAf;AACA,aAAOM,QAAP;AACD,KAVD,MAUO;AACL,aAAOb,YAAY,CAACpB,MAAb,CAAoBqB,GAApB,CAAP;AACD;AACF;AACF;;ACvID,MAAMa,wDAAmB,GAAG,IAAIC,MAAJ,CAAW,gBAAX,CAA5B;AACA,MAAMC,sDAAiB,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB,CAA1B;AAEA;;;;;;;OAMO,MAAMC,YAAN,CAAmB;AAIxB1C,EAAAA,WAAW,CAACC,MAAD,EAAiBC,OAAjB,EAAyD;AAAA,QAAxCA,OAAwC;AAAxCA,MAAAA,OAAwC,GAAJ,EAAI;AAAA;;AAAA,SAHpED,MAGoE;AAAA,SAFpEC,OAEoE;AAClE,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;AAED;;;;;AAGAyC,EAAAA,KAAK,CAACrC,KAAD,EAAwB;AAC3B,WAAOsC,wDAAmB,CAAC,KAAK3C,MAAN,EAAc,KAAKC,OAAnB,EAA4BI,KAA5B,CAAnB,CAAsDqC,KAAtD,CAA4DrC,KAA5D,CAAP;AACD;AAED;;;;;;;AAKAuC,EAAAA,oBAAoB,CAACvC,KAAD,EAAgBwC,QAAhB,EAAmCC,QAAnC,EAA+D;AACjF,WAAOH,wDAAmB,CAAC,KAAK3C,MAAN,EAAc,KAAKC,OAAnB,EAA4BI,KAA5B,CAAnB,CAAsDuC,oBAAtD,CAA2EvC,KAA3E,EAAkFwC,QAAlF,EAA4FC,QAA5F,CAAP;AACD;AAED;;;;;;;AAKAC,EAAAA,kBAAkB,CAAC1C,KAAD,EAAwB;AACxC,WAAOsC,wDAAmB,CAAC,KAAK3C,MAAN,EAAc,KAAKC,OAAnB,EAA4BI,KAA5B,CAAnB,CAAsDJ,OAAtD,CAA8DU,eAArE;AACD;;AAhCuB;AAmC1B,MAAMqC,sDAAiB,GAAG,IAAIhE,GAAJ,EAA1B;;AACA,SAAS2D,wDAAT,CAA6B3C,MAA7B,EAA6CC,OAA7C,EAAgFI,KAAhF,EAA+F;AAC7F;AACA,MAAI4C,aAAa,GAAGC,0DAAqB,CAAClD,MAAD,EAASC,OAAT,CAAzC,CAF6F,CAI7F;AACA;;AACA,MAAI,CAACD,MAAM,CAACmD,QAAP,CAAgB,QAAhB,CAAD,IAA8B,CAACF,aAAa,CAACL,oBAAd,CAAmCvC,KAAnC,CAAnC,EAA8E;AAC5E,SAAK,IAAIM,eAAT,IAA4B6B,sDAA5B,EAA+C;AAC7C,UAAI7B,eAAe,KAAKsC,aAAa,CAAChD,OAAd,CAAsBU,eAA9C,EAA+D;AAC7D,YAAIyC,MAAM,GAAGF,0DAAqB,CAAClD,MAAM,GAAG,QAAT,GAAoBW,eAArB,EAAsCV,OAAtC,CAAlC;;AACA,YAAImD,MAAM,CAACR,oBAAP,CAA4BvC,KAA5B,CAAJ,EAAwC;AACtC,iBAAO+C,MAAP;AACD;AACF;AACF;AACF;;AAED,SAAOH,aAAP;AACD;;AAED,SAASC,0DAAT,CAA+BlD,MAA/B,EAA+CC,OAA/C,EAAkF;AAChF,MAAIa,QAAQ,GAAGd,MAAM,IAAIC,OAAO,GAAGc,MAAM,CAACC,OAAP,CAAef,OAAf,EAAwBgB,IAAxB,CAA6B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAc,CAAC,CAAf,GAAmB,CAA1D,EAA6DC,IAA7D,EAAH,GAAyE,EAApF,CAArB;AACA,MAAIgC,MAAM,GAAGJ,sDAAiB,CAAC1B,GAAlB,CAAsBR,QAAtB,CAAb;;AACA,MAAI,CAACsC,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,IAAIC,qDAAJ,CAAqBrD,MAArB,EAA6BC,OAA7B,CAAT;AACA+C,IAAAA,sDAAiB,CAACzB,GAAlB,CAAsBT,QAAtB,EAAgCsC,MAAhC;AACD;;AAED,SAAOA,MAAP;AACD,C,CAED;AACA;;;AACA,MAAMC,qDAAN,CAAuB;AAKrBtD,EAAAA,WAAW,CAACC,MAAD,EAAiBC,OAAjB,EAAyD;AAAA,QAAxCA,OAAwC;AAAxCA,MAAAA,OAAwC,GAAJ,EAAI;AAAA;;AAAA,SAJpEqD,SAIoE;AAAA,SAHpErD,OAGoE;AAAA,SAFpEsD,OAEoE;AAClE,SAAKD,SAAL,GAAiB,IAAIpE,IAAI,CAACC,YAAT,CAAsBa,MAAtB,EAA8BC,OAA9B,CAAjB;AACA,SAAKA,OAAL,GAAe,KAAKqD,SAAL,CAAejE,eAAf,EAAf;AACA,SAAKkE,OAAL,GAAeC,+CAAU,CAAC,KAAKF,SAAN,EAAiB,KAAKrD,OAAtB,EAA+BA,OAA/B,CAAzB;AACD;;AAEDyC,EAAAA,KAAK,CAACrC,KAAD,EAAgB;AACnB;AACA,QAAIoD,mBAAmB,GAAG,KAAKC,QAAL,CAAcrD,KAAd,CAA1B,CAFmB,CAInB;;AACAoD,IAAAA,mBAAmB,GAAGE,+CAAU,CAACF,mBAAD,EAAsB,KAAKF,OAAL,CAAaK,KAAnC,EAA0C,EAA1C,CAAV,CACnB3B,OADmB,CACX,KAAKsB,OAAL,CAAaM,OADF,EACW,GADX,EAEnB5B,OAFmB,CAEX,KAAKsB,OAAL,CAAaO,SAFF,EAEa,GAFb,EAGnB7B,OAHmB,CAGX,KAAKsB,OAAL,CAAaQ,OAHF,EAGW,KAAKR,OAAL,CAAaS,KAHxB,CAAtB;AAKA,QAAIC,QAAQ,GAAGR,mBAAmB,GAAG,CAACA,mBAAJ,GAA0BS,GAA5D;;AACA,QAAIC,KAAK,CAACF,QAAD,CAAT,EAAqB;AACnB,aAAOC,GAAP;AACD,KAbkB,CAenB;;;AACA,QAAI,KAAKjE,OAAL,CAAamE,YAAb,KAA8B,YAA9B,IAA8C9B,wDAAmB,CAAC+B,IAApB,CAAyBhE,KAAzB,CAAlD,EAAmF;AACjF4D,MAAAA,QAAQ,GAAG,CAAC,CAAD,GAAKA,QAAhB;AACD,KAlBkB,CAoBnB;;;AACA,QAAI,KAAKhE,OAAL,CAAaT,KAAb,KAAuB,SAA3B,EAAsC;AAAA;;AACpCyE,MAAAA,QAAQ,IAAI,GAAZ,CADoC,CAEpC;;AACAA,MAAAA,QAAQ,GAAG,CAACA,QAAQ,CAACK,OAAT,CAAiB,0BAAC,KAAKrE,OAAL,CAAasE,qBAAd,oCAAuC,CAAvC,IAA4C,CAA7D,CAAZ;AACD;;AAED,WAAON,QAAP;AACD;;AAEDP,EAAAA,QAAQ,CAACrD,KAAD,EAAgB;AACtB;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAAC4B,OAAN,CAAc,KAAKsB,OAAL,CAAaiB,QAA3B,EAAqC,EAArC,CAAR,CAFsB,CAItB;AACA;;AACAnE,IAAAA,KAAK,GAAGA,KAAK,CAAC4B,OAAN,CAAc,GAAd,EAAmB,KAAKsB,OAAL,CAAaO,SAAhC,CAAR,CANsB,CAQtB;AACA;;AACA,QAAI,KAAK7D,OAAL,CAAaU,eAAb,KAAiC,MAArC,EAA6C;AAC3CN,MAAAA,KAAK,GAAGA,KAAK,CAAC4B,OAAN,CAAc,GAAd,EAAmB,KAAKsB,OAAL,CAAaM,OAAhC,CAAR;AACAxD,MAAAA,KAAK,GAAGA,KAAK,CAAC4B,OAAN,CAAcwC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAd,EAAyC,KAAKnB,OAAL,CAAaM,OAAtD,CAAR;AACAxD,MAAAA,KAAK,GAAGsD,+CAAU,CAACtD,KAAD,EAAQ,GAAR,EAAa,KAAKkD,OAAL,CAAaK,KAA1B,CAAlB;AACD,KAdqB,CAgBtB;AACA;;;AACA,QAAI,KAAK3D,OAAL,CAAaD,MAAb,KAAwB,OAA5B,EAAqC;AACnCK,MAAAA,KAAK,GAAGsD,+CAAU,CAACtD,KAAD,EAAQ,GAAR,EAAaoE,MAAM,CAACC,YAAP,CAAoB,IAApB,CAAb,CAAlB;AACD;;AAED,WAAOrE,KAAP;AACD;;AAEDuC,EAAAA,oBAAoB,CAACvC,KAAD,EAAgBwC,QAAhB,EAA8CC,QAA9C,EAAoF;AAAA,QAApED,QAAoE;AAApEA,MAAAA,QAAoE,GAAjD,CAAC8B,QAAgD;AAAA;;AAAA,QAAtC7B,QAAsC;AAAtCA,MAAAA,QAAsC,GAAnB6B,QAAmB;AAAA;;AACtGtE,IAAAA,KAAK,GAAG,KAAKqD,QAAL,CAAcrD,KAAd,CAAR,CADsG,CAGtG;;AACA,QAAIA,KAAK,CAACuE,UAAN,CAAiB,KAAKrB,OAAL,CAAaO,SAA9B,KAA4CjB,QAAQ,GAAG,CAA3D,EAA8D;AAC5DxC,MAAAA,KAAK,GAAGA,KAAK,CAACwE,KAAN,CAAY,KAAKtB,OAAL,CAAaO,SAAb,CAAuB5B,MAAnC,CAAR;AACD,KAFD,MAEO,IAAI,KAAKqB,OAAL,CAAauB,QAAb,IAAyBzE,KAAK,CAACuE,UAAN,CAAiB,KAAKrB,OAAL,CAAauB,QAA9B,CAAzB,IAAoEhC,QAAQ,GAAG,CAAnF,EAAsF;AAC3FzC,MAAAA,KAAK,GAAGA,KAAK,CAACwE,KAAN,CAAY,KAAKtB,OAAL,CAAauB,QAAb,CAAsB5C,MAAlC,CAAR;AACD,KARqG,CAUtG;;;AACA,QAAI7B,KAAK,CAACuE,UAAN,CAAiB,KAAKrB,OAAL,CAAaK,KAA9B,CAAJ,EAA0C;AACxC,aAAO,KAAP;AACD,KAbqG,CAetG;;;AACAvD,IAAAA,KAAK,GAAGsD,+CAAU,CAACtD,KAAD,EAAQ,KAAKkD,OAAL,CAAaK,KAArB,EAA4B,EAA5B,CAAV,CACL3B,OADK,CACG,KAAKsB,OAAL,CAAaQ,OADhB,EACyB,EADzB,EAEL9B,OAFK,CAEG,KAAKsB,OAAL,CAAaM,OAFhB,EAEyB,EAFzB,CAAR,CAhBsG,CAoBtG;;AACA,WAAOxD,KAAK,CAAC6B,MAAN,KAAiB,CAAxB;AACD;;AAxFoB;;AA2FvB,MAAM6C,oDAAe,GAAG,IAAIC,GAAJ,CAAQ,CAAC,SAAD,EAAY,UAAZ,EAAwB,SAAxB,EAAmC,WAAnC,EAAgD,UAAhD,EAA4D,OAA5D,CAAR,CAAxB;;AAEA,SAASxB,+CAAT,CAAoBF,SAApB,EAAkD2B,WAAlD,EAAiGC,eAAjG,EAAqJ;AAAA;;AACnJ;AACA,MAAIC,QAAQ,GAAG7B,SAAS,CAAC5C,aAAV,CAAwB,CAAC,OAAzB,CAAf;AACA,MAAI0E,WAAW,GAAG9B,SAAS,CAAC5C,aAAV,CAAwB,OAAxB,CAAlB;AACA,MAAI2E,aAAa,GAAG/B,SAAS,CAAC5C,aAAV,CAAwB,CAAxB,CAApB;AAEA,MAAIoD,SAAS,6CAAGqB,QAAQ,CAACG,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,WAA9B,CAAH,qBAAG,eAA4CnF,KAA/C,mCAAwD,GAArE;AACA,MAAIyE,QAAQ,wBAAGM,WAAW,CAACE,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,UAAjC,CAAH,qBAAG,kBAA8CnF,KAA7D,CAPmJ,CASnJ;AACA;AACA;;AACA,MAAI,CAACyE,QAAD,KAAc,CAAAI,eAAe,QAAf,YAAAA,eAAe,CAAE9F,WAAjB,MAAiC,YAAjC,IAAiD,CAAA8F,eAAe,QAAf,YAAAA,eAAe,CAAE9F,WAAjB,MAAiC,QAAhG,CAAJ,EAA+G;AAC7G0F,IAAAA,QAAQ,GAAG,GAAX;AACD;;AAED,MAAIjB,OAAO,sBAAGsB,QAAQ,CAACG,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,SAA9B,CAAH,qBAAG,gBAA0CnF,KAAxD;AACA,MAAIuD,KAAK,sBAAGuB,QAAQ,CAACG,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,OAA9B,CAAH,qBAAG,gBAAwCnF,KAApD,CAjBmJ,CAmBnJ;AACA;;AACA,MAAIoF,cAAc,GAAGN,QAAQ,CAACO,MAAT,CAAgBH,CAAC,IAAI,CAACR,oDAAe,CAAC1D,GAAhB,CAAoBkE,CAAC,CAACC,IAAtB,CAAtB,EAAmDG,GAAnD,CAAuDJ,CAAC,IAAIK,gDAAW,CAACL,CAAC,CAAClF,KAAH,CAAvE,CAArB;AACA,MAAIwF,gBAAgB,GAAGR,aAAa,CAACK,MAAd,CAAqBH,CAAC,IAAI,CAACR,oDAAe,CAAC1D,GAAhB,CAAoBkE,CAAC,CAACC,IAAtB,CAA3B,EAAwDG,GAAxD,CAA4DJ,CAAC,IAAIK,gDAAW,CAACL,CAAC,CAAClF,KAAH,CAA5E,CAAvB;AACA,MAAIyF,cAAc,GAAG,CAAC,GAAG,IAAId,GAAJ,CAAQ,CAAC,GAAGa,gBAAJ,EAAsB,GAAGJ,cAAzB,CAAR,CAAJ,EAAuDxE,IAAvD,CAA4D,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACe,MAAF,GAAWhB,CAAC,CAACgB,MAAnF,CAArB;AACA,MAAIsC,QAAQ,GAAG,IAAIjC,MAAJ,CAAcuD,cAAc,CAAC1E,IAAf,CAAoB,GAApB,CAAd,0BAA6D,IAA7D,CAAf,CAxBmJ,CA0BnJ;;AACA,MAAI2E,QAAQ,GAAG,CAAC,GAAG,IAAI7G,IAAI,CAACC,YAAT,CAAsB8F,WAAW,CAACjF,MAAlC,EAA0C;AAACgG,IAAAA,WAAW,EAAE;AAAd,GAA1C,EAAgE5F,MAAhE,CAAuE,UAAvE,CAAJ,EAAwF6F,OAAxF,EAAf;AACA,MAAIC,OAAO,GAAG,IAAIlH,GAAJ,CAAQ+G,QAAQ,CAACJ,GAAT,CAAa,CAACQ,CAAD,EAAIC,CAAJ,KAAU,CAACD,CAAD,EAAIC,CAAJ,CAAvB,CAAR,CAAd;AACA,MAAIrC,OAAO,GAAG,IAAIxB,MAAJ,OAAewD,QAAQ,CAAC3E,IAAT,CAAc,EAAd,CAAf,QAAqC,GAArC,CAAd;;AACA,MAAI4C,KAAK,GAAGmC,CAAC,IAAI1B,MAAM,CAACyB,OAAO,CAAC5E,GAAR,CAAY6E,CAAZ,CAAD,CAAvB;;AAEA,SAAO;AAACrC,IAAAA,SAAD;AAAYgB,IAAAA,QAAZ;AAAsBjB,IAAAA,OAAtB;AAA+BD,IAAAA,KAA/B;AAAsCY,IAAAA,QAAtC;AAAgDT,IAAAA,OAAhD;AAAyDC,IAAAA;AAAzD,GAAP;AACD;;AAED,SAASL,+CAAT,CAAoB0C,GAApB,EAAiCf,IAAjC,EAA+CrD,OAA/C,EAAgE;AAC9D;AACA,MAAIoE,GAAG,CAAC1C,UAAR,EAAoB;AAClB;AACA,WAAO0C,GAAG,CAAC1C,UAAJ,CAAe2B,IAAf,EAAqBrD,OAArB,CAAP;AACD;;AAED,SAAOoE,GAAG,CAACC,KAAJ,CAAUhB,IAAV,EAAgBlE,IAAhB,CAAqBa,OAArB,CAAP;AACD;;AAED,SAAS2D,gDAAT,CAAqBW,MAArB,EAAqC;AACnC,SAAOA,MAAM,CAACtE,OAAP,CAAe,uBAAf,EAAwC,MAAxC,CAAP;AACD","sources":["./packages/@internationalized/number/src/NumberFormatter.ts","./packages/@internationalized/number/src/NumberParser.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used perform locale aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. Automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  locale: string;\n  options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-u-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + '-u-nu-' + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.1);\n  let posAllParts = formatter.formatToParts(10000.1);\n  let singularParts = formatter.formatToParts(1);\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"],"names":["formatterCache","Map","supportsSignDisplay","Intl","NumberFormat","signDisplay","resolvedOptions","e","supportsUnit","style","unit","UNITS","degree","narrow","default","NumberFormatter","constructor","locale","options","numberFormatter","getCachedNumberFormatter","format","value","res","numberFormatSignDisplayPolyfill","unitDisplay","values","formatToParts","numberingSystem","indexOf","Error","cacheKey","Object","entries","sort","a","b","join","has","get","set","numberFormat","num","Math","abs","needsPositiveSign","is","negative","noSign","minus","replace","length","console","warn","positive","CURRENCY_SIGN_REGEX","RegExp","NUMBERING_SYSTEMS","NumberParser","parse","getNumberParserImpl","isValidPartialNumber","minValue","maxValue","getNumberingSystem","numberParserCache","defaultParser","getCachedNumberParser","includes","parser","NumberParserImpl","formatter","symbols","getSymbols","fullySanitizedValue","sanitize","replaceAll","group","decimal","minusSign","numeral","index","newValue","NaN","isNaN","currencySign","test","toFixed","maximumFractionDigits","literals","String","fromCharCode","Infinity","startsWith","slice","plusSign","nonLiteralParts","Set","intlOptions","originalOptions","allParts","posAllParts","singularParts","find","p","type","pluralLiterals","filter","map","escapeRegex","singularLiterals","sortedLiterals","numerals","useGrouping","reverse","indexes","d","i","str","split","string"],"version":3,"file":"module.js.map"}