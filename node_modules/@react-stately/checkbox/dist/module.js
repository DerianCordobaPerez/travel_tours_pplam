import { useControlledState } from "@react-stately/utils";

/**
 * Provides state management for a checkbox group component. Provides a name for the group,
 * and manages selection and focus state.
 */
export function useCheckboxGroupState(props) {
  if (props === void 0) {
    props = {};
  }

  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);
  const state = {
    value: selectedValues,

    setValue(value) {
      if (props.isReadOnly || props.isDisabled) {
        return;
      }

      setValue(value);
    },

    isDisabled: props.isDisabled || false,
    isReadOnly: props.isReadOnly || false,

    isSelected(value) {
      return selectedValues.includes(value);
    },

    addValue(value) {
      if (props.isReadOnly || props.isDisabled) {
        return;
      }

      setValue(values => {
        if (!values.includes(value)) {
          return values.concat(value);
        }

        return values;
      });
    },

    removeValue(value) {
      if (props.isReadOnly || props.isDisabled) {
        return;
      }

      setValue(values => {
        if (values.includes(value)) {
          return values.filter(existingValue => existingValue !== value);
        }

        return values;
      });
    },

    toggleValue(value) {
      if (props.isReadOnly || props.isDisabled) {
        return;
      }

      setValue(values => {
        if (values.includes(value)) {
          return values.filter(existingValue => existingValue !== value);
        }

        return values.concat(value);
      });
    }

  };
  return state;
}
//# sourceMappingURL=module.js.map
