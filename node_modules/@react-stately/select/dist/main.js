var {
  useState
} = require("react");

var {
  useSingleSelectListState
} = require("@react-stately/list");

var {
  useMenuTriggerState
} = require("@react-stately/menu");

var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

/**
 * Provides state management for a select component. Handles building a collection
 * of items from props, handles the open state for the popup menu, and manages
 * multiple selection state.
 */
function useSelectState(props) {
  let triggerState = useMenuTriggerState(props);
  let listState = useSingleSelectListState(_babelRuntimeHelpersExtends({}, props, {
    onSelectionChange: key => {
      if (props.onSelectionChange != null) {
        props.onSelectionChange(key);
      }

      triggerState.close();
    }
  }));
  let [isFocused, setFocused] = useState(false);
  return _babelRuntimeHelpersExtends({}, listState, triggerState, {
    open() {
      // Don't open if the collection is empty.
      if (listState.collection.size !== 0) {
        triggerState.open();
      }
    },

    toggle(focusStrategy) {
      if (listState.collection.size !== 0) {
        triggerState.toggle(focusStrategy);
      }
    },

    isFocused,
    setFocused
  });
}

exports.useSelectState = useSelectState;
//# sourceMappingURL=main.js.map
