{"mappings":"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","sources":["./packages/@react-stately/layout/src/ListLayout.ts","./packages/@react-stately/layout/src/TableLayout.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {InvalidationContext, Layout, LayoutInfo, Rect, Size} from '@react-stately/virtualizer';\nimport {Key} from 'react';\n// import { DragTarget, DropTarget, DropPosition } from '@react-types/shared';\n\nexport type ListLayoutOptions<T> = {\n  /** The height of a row in px. */\n  rowHeight?: number,\n  estimatedRowHeight?: number,\n  headingHeight?: number,\n  estimatedHeadingHeight?: number,\n  padding?: number,\n  indentationForItem?: (collection: Collection<Node<T>>, key: Key) => number,\n  collator?: Intl.Collator,\n  loaderHeight?: number,\n  placeholderHeight?: number\n};\n\n// A wrapper around LayoutInfo that supports hierarchy\nexport interface LayoutNode {\n  node?: Node<unknown>,\n  layoutInfo: LayoutInfo,\n  header?: LayoutInfo,\n  children?: LayoutNode[]\n}\n\nconst DEFAULT_HEIGHT = 48;\n\n/**\n * The ListLayout class is an implementation of a collection view {@link Layout}\n * it is used for creating lists and lists with indented sub-lists.\n *\n * To configure a ListLayout, you can use the properties to define the\n * layouts and/or use the method for defining indentation.\n * The {@link ListKeyboardDelegate} extends the existing collection view\n * delegate with an additional method to do this (it uses the same delegate object as\n * the collection view itself).\n */\nexport class ListLayout<T> extends Layout<Node<T>> implements KeyboardDelegate {\n  protected rowHeight: number;\n  protected estimatedRowHeight: number;\n  protected headingHeight: number;\n  protected estimatedHeadingHeight: number;\n  protected padding: number;\n  protected indentationForItem?: (collection: Collection<Node<T>>, key: Key) => number;\n  protected layoutInfos: Map<Key, LayoutInfo>;\n  protected layoutNodes: Map<Key, LayoutNode>;\n  protected contentSize: Size;\n  collection: Collection<Node<T>>;\n  disabledKeys: Set<Key> = new Set();\n  isLoading: boolean;\n  protected lastWidth: number;\n  protected lastCollection: Collection<Node<T>>;\n  protected rootNodes: LayoutNode[];\n  protected collator: Intl.Collator;\n  protected invalidateEverything: boolean;\n  protected loaderHeight: number;\n  protected placeholderHeight: number;\n\n  /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */\n  constructor(options: ListLayoutOptions<T> = {}) {\n    super();\n    this.rowHeight = options.rowHeight;\n    this.estimatedRowHeight = options.estimatedRowHeight;\n    this.headingHeight = options.headingHeight;\n    this.estimatedHeadingHeight = options.estimatedHeadingHeight;\n    this.padding = options.padding || 0;\n    this.indentationForItem = options.indentationForItem;\n    this.collator = options.collator;\n    this.loaderHeight = options.loaderHeight;\n    this.placeholderHeight = options.placeholderHeight;\n    this.layoutInfos = new Map();\n    this.layoutNodes = new Map();\n    this.rootNodes = [];\n    this.lastWidth = 0;\n    this.lastCollection = null;\n  }\n\n  getLayoutInfo(key: Key) {\n    return this.layoutInfos.get(key);\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    let res: LayoutInfo[] = [];\n\n    let addNodes = (nodes: LayoutNode[]) => {\n      for (let node of nodes) {\n        if (this.isVisible(node, rect)) {\n          res.push(node.layoutInfo);\n          if (node.header) {\n            res.push(node.header);\n          }\n\n          if (node.children) {\n            addNodes(node.children);\n          }\n        }\n      }\n    };\n\n    addNodes(this.rootNodes);\n    return res;\n  }\n\n  isVisible(node: LayoutNode, rect: Rect) {\n    return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky;\n  }\n\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    // Invalidate cache if the size of the collection changed.\n    // In this case, we need to recalculate the entire layout.\n    this.invalidateEverything = invalidationContext.sizeChanged;\n\n    this.collection = this.virtualizer.collection;\n    this.rootNodes = this.buildCollection();\n\n    // Remove deleted layout nodes\n    if (this.lastCollection) {\n      for (let key of this.lastCollection.getKeys()) {\n        if (!this.collection.getItem(key)) {\n          let layoutNode = this.layoutNodes.get(key);\n          if (layoutNode) {\n            this.layoutInfos.delete(layoutNode.layoutInfo.key);\n            this.layoutInfos.delete(layoutNode.header?.key);\n            this.layoutNodes.delete(key);\n          }\n        }\n      }\n    }\n\n    this.lastWidth = this.virtualizer.visibleRect.width;\n    this.lastCollection = this.collection;\n  }\n\n  buildCollection(): LayoutNode[] {\n    let y = this.padding;\n    let nodes = [];\n    for (let node of this.collection) {\n      let layoutNode = this.buildChild(node, 0, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      nodes.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width,\n        this.loaderHeight ?? this.virtualizer.visibleRect.height);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      this.layoutInfos.set('loader', loader);\n      nodes.push({layoutInfo: loader});\n      y = loader.rect.maxY;\n    }\n\n    if (nodes.length === 0) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width,\n        this.placeholderHeight ?? this.virtualizer.visibleRect.height);\n      let placeholder = new LayoutInfo('placeholder', 'placeholder', rect);\n      this.layoutInfos.set('placeholder', placeholder);\n      nodes.push({layoutInfo: placeholder});\n      y = placeholder.rect.maxY;\n    }\n\n    this.contentSize = new Size(this.virtualizer.visibleRect.width, y + this.padding);\n    return nodes;\n  }\n\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    let cached = this.layoutNodes.get(node.key);\n    if (!this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y) {\n      return cached;\n    }\n\n    let layoutNode = this.buildNode(node, x, y);\n    layoutNode.node = node;\n\n    layoutNode.layoutInfo.parentKey = node.parentKey || null;\n    this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);\n    if (layoutNode.header) {\n      this.layoutInfos.set(layoutNode.header.key, layoutNode.header);\n    }\n\n    this.layoutNodes.set(node.key, layoutNode);\n    return layoutNode;\n  }\n\n  buildNode(node: Node<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'section':\n        return this.buildSection(node, x, y);\n      case 'item':\n        return this.buildItem(node, x, y);\n    }\n  }\n\n  buildSection(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.headingHeight;\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode && previousLayoutNode.header) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.header.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;\n      } else {\n        rectHeight = (node.rendered ? this.estimatedHeadingHeight : 0);\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) {\n      rectHeight = DEFAULT_HEIGHT;\n    }\n\n    let headerRect = new Rect(0, y, width, rectHeight);\n    let header = new LayoutInfo('header', node.key + ':header', headerRect);\n    header.estimatedSize = isEstimated;\n    header.parentKey = node.key;\n    y += header.rect.height;\n\n    let rect = new Rect(0, y, width, 0);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n\n    let startY = y;\n    let children = [];\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      children.push(layoutNode);\n    }\n\n    rect.height = y - startY;\n\n    return {\n      header,\n      layoutInfo,\n      children\n    };\n  }\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.rowHeight;\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (rectHeight == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        rectHeight = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        rectHeight = this.estimatedRowHeight;\n        isEstimated = true;\n      }\n    }\n\n    if (rectHeight == null) {\n      rectHeight = DEFAULT_HEIGHT;\n    }\n\n    if (typeof this.indentationForItem === 'function') {\n      x += this.indentationForItem(this.collection, node.key) || 0;\n    }\n\n    let rect = new Rect(x, y, width - x, rectHeight);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.estimatedSize = isEstimated;\n    return {\n      layoutInfo\n    };\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    let layoutInfo = this.layoutInfos.get(key);\n    // If no layoutInfo, item has been deleted/removed.\n    if (!layoutInfo) {\n      return false;\n    }\n\n    layoutInfo.estimatedSize = false;\n    if (layoutInfo.rect.height !== size.height) {\n      // Copy layout info rather than mutating so that later caches are invalidated.\n      let newLayoutInfo = layoutInfo.copy();\n      newLayoutInfo.rect.height = size.height;\n      this.layoutInfos.set(key, newLayoutInfo);\n\n      // Invalidate layout for this layout node and all parents\n      this.updateLayoutNode(key, layoutInfo, newLayoutInfo);\n\n      let node = this.collection.getItem(layoutInfo.parentKey);\n      while (node) {\n        this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);\n        node = this.collection.getItem(node.parentKey);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  updateLayoutNode(key: Key, oldLayoutInfo: LayoutInfo, newLayoutInfo: LayoutInfo) {\n    let n = this.layoutNodes.get(key);\n    if (n) {\n      // Invalidate by clearing node.\n      n.node = null;\n\n      // Replace layout info in LayoutNode\n      if (n.header === oldLayoutInfo) {\n        n.header = newLayoutInfo;\n      } else if (n.layoutInfo === oldLayoutInfo) {\n        n.layoutInfo = newLayoutInfo;\n      }\n    }\n  }\n\n  getContentSize() {\n    return this.contentSize;\n  }\n\n  getKeyAbove(key: Key) {\n    let collection = this.collection;\n\n    key = collection.getKeyBefore(key);\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyBelow(key: Key) {\n    let collection = this.collection;\n\n    key = collection.getKeyAfter(key);\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyPageAbove(key: Key) {\n    let layoutInfo = this.getLayoutInfo(key);\n\n    if (layoutInfo) {\n      let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);\n      while (layoutInfo && layoutInfo.rect.y > pageY) {\n        let keyAbove = this.getKeyAbove(layoutInfo.key);\n        layoutInfo = this.getLayoutInfo(keyAbove);\n      }\n\n      if (layoutInfo) {\n        return layoutInfo.key;\n      }\n    }\n\n    return this.getFirstKey();\n  }\n\n  getKeyPageBelow(key: Key) {\n    let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());\n\n    if (layoutInfo) {\n      let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);\n      while (layoutInfo && layoutInfo.rect.y < pageY) {\n        let keyBelow = this.getKeyBelow(layoutInfo.key);\n        layoutInfo = this.getLayoutInfo(keyBelow);\n      }\n\n      if (layoutInfo) {\n        return layoutInfo.key;\n      }\n    }\n\n    return this.getLastKey();\n  }\n\n  getFirstKey() {\n    let collection = this.collection;\n    let key = collection.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let collection = this.collection;\n    let key = collection.getLastKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(item.key)) {\n        return key;\n      }\n\n      key = collection.getKeyBefore(key);\n    }\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n\n  // getDragTarget(point: Point): DragTarget {\n  //   let visible = this.getVisibleLayoutInfos(new Rect(point.x, point.y, 1, 1));\n  //   if (visible.length > 0) {\n  //     visible = visible.sort((a, b) => b.zIndex - a.zIndex);\n  //     return {\n  //       type: 'item',\n  //       key: visible[0].key\n  //     };\n  //   }\n\n  //   return null;\n  // }\n\n  // getDropTarget(point: Point): DropTarget {\n  //   let key = this.virtualizer.keyAtPoint(point);\n  //   if (key) {\n  //     return {\n  //       type: 'item',\n  //       key,\n  //       dropPosition: DropPosition.ON\n  //     };\n  //   }\n\n  //   return null;\n  // }\n\n  getInitialLayoutInfo(layoutInfo: LayoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n\n  getFinalLayoutInfo(layoutInfo: LayoutInfo) {\n    layoutInfo.opacity = 0;\n    layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnProps, TableCollection} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\nimport {LayoutInfo, Point, Rect, Size} from '@react-stately/virtualizer';\nimport {LayoutNode, ListLayout, ListLayoutOptions} from './ListLayout';\n\n\ntype TableLayoutOptions<T> = ListLayoutOptions<T> & {\n  getDefaultWidth: (props) => string | number\n}\n\nexport class TableLayout<T> extends ListLayout<T> {\n  collection: TableCollection<T>;\n  lastCollection: TableCollection<T>;\n  columnWidths: Map<Key, number>;\n  stickyColumnIndices: number[];\n  getDefaultWidth: (props) => string | number;\n  wasLoading = false;\n  isLoading = false;\n\n  constructor(options: TableLayoutOptions<T>) {\n    super(options);\n    this.getDefaultWidth = options.getDefaultWidth;\n  }\n\n\n  buildCollection(): LayoutNode[] {\n    // If columns changed, clear layout cache.\n    if (\n      !this.lastCollection ||\n      this.collection.columns.length !== this.lastCollection.columns.length ||\n      this.collection.columns.some((c, i) => c.key !== this.lastCollection.columns[i].key)\n    ) {\n      // Invalidate everything in this layout pass. Will be reset in ListLayout on the next pass.\n      this.invalidateEverything = true;\n    }\n\n    // Track whether we were previously loading. This is used to adjust the animations of async loading vs inserts.\n    let loadingState = this.collection.body.props.loadingState;\n    this.wasLoading = this.isLoading;\n    this.isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n\n    this.buildColumnWidths();\n    let header = this.buildHeader();\n    let body = this.buildBody(0);\n    body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n    this.contentSize = new Size(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);\n    return [\n      header,\n      body\n    ];\n  }\n\n  buildColumnWidths() {\n    this.columnWidths = new Map();\n    this.stickyColumnIndices = [];\n\n    // Pass 1: set widths for all explicitly defined columns.\n    let remainingColumns = new Set<GridNode<T>>();\n    let remainingSpace = this.virtualizer.visibleRect.width;\n    for (let column of this.collection.columns) {\n      let props = column.props as ColumnProps<T>;\n      let width = props.width ?? this.getDefaultWidth(props);\n      if (width != null) {\n        let w = this.parseWidth(width);\n        this.columnWidths.set(column.key, w);\n        remainingSpace -= w;\n      } else {\n        remainingColumns.add(column);\n      }\n\n      // The selection cell and any other sticky columns always need to be visible.\n      // In addition, row headers need to be in the DOM for accessibility labeling.\n      if (column.props.isSelectionCell || this.collection.rowHeaderColumnKeys.has(column.key)) {\n        this.stickyColumnIndices.push(column.index);\n      }\n    }\n\n    // Pass 2: if there are remaining columns, then distribute the remaining space evenly.\n    if (remainingColumns.size > 0) {\n      let columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n\n      for (let column of remainingColumns) {\n        let props = column.props as ColumnProps<T>;\n        let minWidth = props.minWidth != null ? this.parseWidth(props.minWidth) : 75;\n        let maxWidth = props.maxWidth != null ? this.parseWidth(props.maxWidth) : Infinity;\n        let width = Math.max(minWidth, Math.min(maxWidth, columnWidth));\n\n        this.columnWidths.set(column.key, width);\n        remainingSpace -= width;\n        if (width !== columnWidth) {\n          columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n        }\n      }\n    }\n  }\n\n  parseWidth(width: number | string): number {\n    if (typeof width === 'string') {\n      let match = width.match(/^(\\d+)%$/);\n      if (!match) {\n        throw new Error('Only percentages are supported as column widths');\n      }\n\n      return this.virtualizer.visibleRect.width * (parseInt(match[1], 10) / 100);\n    }\n\n    return width;\n  }\n\n  buildHeader(): LayoutNode {\n    let rect = new Rect(0, 0, 0, 0);\n    let layoutInfo = new LayoutInfo('header', 'header', rect);\n\n    let y = 0;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let headerRow of this.collection.headerRows) {\n      let layoutNode = this.buildChild(headerRow, 0, y);\n      layoutNode.layoutInfo.parentKey = 'header';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    rect.width = width;\n    rect.height = y;\n\n    this.layoutInfos.set('header', layoutInfo);\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildHeaderRow(headerRow: GridNode<T>, x: number, y: number) {\n    let rect = new Rect(0, y, 0, 0);\n    let row = new LayoutInfo('headerrow', headerRow.key, rect);\n\n    let height = 0;\n    let columns: LayoutNode[] = [];\n    for (let cell of headerRow.childNodes) {\n      let layoutNode = this.buildChild(cell, x, y);\n      layoutNode.layoutInfo.parentKey = row.key;\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      columns.push(layoutNode);\n    }\n\n    this.setChildHeights(columns, height);\n\n    rect.height = height;\n    rect.width = x;\n\n    return {\n      layoutInfo: row,\n      children: columns\n    };\n  }\n\n  setChildHeights(children: LayoutNode[], height: number) {\n    for (let child of children) {\n      if (child.layoutInfo.rect.height !== height) {\n        // Need to copy the layout info before we mutate it.\n        child.layoutInfo = child.layoutInfo.copy();\n        this.layoutInfos.set(child.layoutInfo.key, child.layoutInfo);\n\n        child.layoutInfo.rect.height = height;\n      }\n    }\n  }\n\n  getColumnWidth(node: GridNode<T>) {\n    let colspan = node.colspan ?? 1;\n    let width = 0;\n    for (let i = 0; i < colspan; i++) {\n      let column = this.collection.columns[node.index + i];\n      width += this.columnWidths.get(column.key);\n    }\n\n    return width;\n  }\n\n  getEstimatedHeight(node: GridNode<T>, width: number, height: number, estimatedHeight: number) {\n    let isEstimated = false;\n\n    // If no explicit height is available, use an estimated height.\n    if (height == null) {\n      // If a previous version of this layout info exists, reuse its height.\n      // Mark as estimated if the size of the overall collection view changed,\n      // or the content of the item changed.\n      let previousLayoutNode = this.layoutNodes.get(node.key);\n      if (previousLayoutNode) {\n        let curNode = this.collection.getItem(node.key);\n        let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n        height = previousLayoutNode.layoutInfo.rect.height;\n        isEstimated = curNode !== lastNode || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n      } else {\n        height = estimatedHeight;\n        isEstimated = true;\n      }\n    }\n\n    return {height, isEstimated};\n  }\n\n  buildColumn(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = node.props?.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo\n    };\n  }\n\n  buildBody(y: number): LayoutNode {\n    let rect = new Rect(0, y, 0, 0);\n    let layoutInfo = new LayoutInfo('rowgroup', 'body', rect);\n\n    let startY = y;\n    let width = 0;\n    let children: LayoutNode[] = [];\n    for (let node of this.collection.body.childNodes) {\n      let layoutNode = this.buildChild(node, 0, y);\n      layoutNode.layoutInfo.parentKey = 'body';\n      y = layoutNode.layoutInfo.rect.maxY;\n      width = Math.max(width, layoutNode.layoutInfo.rect.width);\n      children.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(0, y, width || this.virtualizer.visibleRect.width, children.length === 0 ? this.virtualizer.visibleRect.height : 60);\n      let loader = new LayoutInfo('loader', 'loader', rect);\n      loader.parentKey = 'body';\n      loader.isSticky = children.length === 0;\n      this.layoutInfos.set('loader', loader);\n      children.push({layoutInfo: loader});\n      y = loader.rect.maxY;\n      width = Math.max(width, rect.width);\n    } else if (children.length === 0) {\n      let rect = new Rect(0, y, this.virtualizer.visibleRect.width, this.virtualizer.visibleRect.height);\n      let empty = new LayoutInfo('empty', 'empty', rect);\n      empty.parentKey = 'body';\n      empty.isSticky = true;\n      this.layoutInfos.set('empty', empty);\n      children.push({layoutInfo: empty});\n      y = empty.rect.maxY;\n      width = Math.max(width, rect.width);\n    }\n\n    rect.width = width;\n    rect.height = y - startY;\n\n    this.layoutInfos.set('body', layoutInfo);\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildNode(node: GridNode<T>, x: number, y: number): LayoutNode {\n    switch (node.type) {\n      case 'headerrow':\n        return this.buildHeaderRow(node, x, y);\n      case 'item':\n        return this.buildRow(node, x, y);\n      case 'column':\n      case 'placeholder':\n        return this.buildColumn(node, x, y);\n      case 'cell':\n        return this.buildCell(node, x, y);\n      default:\n        throw new Error('Unknown node type ' + node.type);\n    }\n  }\n\n  buildRow(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let rect = new Rect(x, y, 0, 0);\n    let layoutInfo = new LayoutInfo('row', node.key, rect);\n\n    let children: LayoutNode[] = [];\n    let height = 0;\n    for (let child of node.childNodes) {\n      let layoutNode = this.buildChild(child, x, y);\n      x = layoutNode.layoutInfo.rect.maxX;\n      height = Math.max(height, layoutNode.layoutInfo.rect.height);\n      children.push(layoutNode);\n    }\n\n    this.setChildHeights(children, height);\n\n    rect.width = x;\n    rect.height = height + 1; // +1 for bottom border\n\n    return {\n      layoutInfo,\n      children\n    };\n  }\n\n  buildCell(node: GridNode<T>, x: number, y: number): LayoutNode {\n    let width = this.getColumnWidth(node);\n    let {height, isEstimated} = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n    let rect = new Rect(x, y, width, height);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.isSticky = node.props?.isSelectionCell;\n    layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n    layoutInfo.estimatedSize = isEstimated;\n\n    return {\n      layoutInfo\n    };\n  }\n\n  getVisibleLayoutInfos(rect: Rect) {\n    let res: LayoutInfo[] = [];\n\n    for (let node of this.rootNodes) {\n      res.push(node.layoutInfo);\n      this.addVisibleLayoutInfos(res, node, rect);\n    }\n\n    return res;\n  }\n\n  addVisibleLayoutInfos(res: LayoutInfo[], node: LayoutNode, rect: Rect) {\n    if (!node.children || node.children.length === 0) {\n      return;\n    }\n\n    switch (node.layoutInfo.type) {\n      case 'header': {\n        for (let child of node.children) {\n          res.push(child.layoutInfo);\n          this.addVisibleLayoutInfos(res, child, rect);\n        }\n        break;\n      }\n      case 'rowgroup': {\n        let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n        let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n        for (let i = firstVisibleRow; i <= lastVisibleRow; i++) {\n          res.push(node.children[i].layoutInfo);\n          this.addVisibleLayoutInfos(res, node.children[i], rect);\n        }\n        break;\n      }\n      case 'headerrow':\n      case 'row': {\n        let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n        let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n        let stickyIndex = 0;\n        for (let i = firstVisibleCell; i <= lastVisibleCell; i++) {\n          // Sticky columns and row headers are always in the DOM. Interleave these\n          // with the visible range so that they are in the right order.\n          if (stickyIndex < this.stickyColumnIndices.length) {\n            let idx = this.stickyColumnIndices[stickyIndex];\n            while (idx < i) {\n              res.push(node.children[idx].layoutInfo);\n              idx = this.stickyColumnIndices[stickyIndex++];\n            }\n          }\n\n          res.push(node.children[i].layoutInfo);\n        }\n\n        while (stickyIndex < this.stickyColumnIndices.length) {\n          let idx = this.stickyColumnIndices[stickyIndex++];\n          res.push(node.children[idx].layoutInfo);\n        }\n        break;\n      }\n      default:\n        throw new Error('Unknown node type ' + node.layoutInfo.type);\n    }\n  }\n\n  binarySearch(items: LayoutNode[], point: Point, axis: 'x' | 'y') {\n    let low = 0;\n    let high = items.length - 1;\n    while (low <= high) {\n      let mid = (low + high) >> 1;\n      let item = items[mid];\n\n      if ((axis === 'x' && item.layoutInfo.rect.maxX < point.x) || (axis === 'y' && item.layoutInfo.rect.maxY < point.y)) {\n        low = mid + 1;\n      } else if ((axis === 'x' && item.layoutInfo.rect.x > point.x) || (axis === 'y' && item.layoutInfo.rect.y > point.y)) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n\n    return Math.max(0, Math.min(items.length - 1, low));\n  }\n\n  getInitialLayoutInfo(layoutInfo: LayoutInfo) {\n    let res = super.getInitialLayoutInfo(layoutInfo);\n\n    // If this insert was the result of async loading, remove the zoom effect and just keep the fade in.\n    if (this.wasLoading) {\n      res.transform = null;\n    }\n\n    return res;\n  }\n}\n"],"names":["DEFAULT_HEIGHT","ListLayout","Layout","constructor","options","rowHeight","estimatedRowHeight","headingHeight","estimatedHeadingHeight","padding","indentationForItem","layoutInfos","layoutNodes","contentSize","collection","disabledKeys","Set","isLoading","lastWidth","lastCollection","rootNodes","collator","invalidateEverything","loaderHeight","placeholderHeight","Map","getLayoutInfo","key","get","getVisibleLayoutInfos","rect","res","addNodes","nodes","node","isVisible","push","layoutInfo","header","children","intersects","isSticky","validate","invalidationContext","sizeChanged","virtualizer","buildCollection","getKeys","getItem","layoutNode","delete","visibleRect","width","y","buildChild","maxY","Rect","height","loader","LayoutInfo","set","length","placeholder","Size","x","cached","buildNode","parentKey","type","buildSection","buildItem","rectHeight","isEstimated","previousLayoutNode","curNode","lastNode","estimatedSize","rendered","headerRect","startY","child","childNodes","updateItemSize","size","newLayoutInfo","copy","updateLayoutNode","oldLayoutInfo","n","getContentSize","getKeyAbove","getKeyBefore","item","has","getKeyBelow","getKeyAfter","getKeyPageAbove","pageY","Math","max","keyAbove","getFirstKey","getKeyPageBelow","min","keyBelow","getLastKey","getKeyForSearch","search","fromKey","substring","textValue","slice","compare","getInitialLayoutInfo","opacity","transform","getFinalLayoutInfo","TableLayout","columnWidths","stickyColumnIndices","getDefaultWidth","wasLoading","columns","some","c","i","loadingState","body","props","buildColumnWidths","buildHeader","buildBody","remainingColumns","remainingSpace","column","w","parseWidth","add","isSelectionCell","rowHeaderColumnKeys","index","columnWidth","minWidth","maxWidth","Infinity","match","Error","parseInt","headerRow","headerRows","buildHeaderRow","row","cell","maxX","setChildHeights","getColumnWidth","colspan","getEstimatedHeight","estimatedHeight","buildColumn","zIndex","empty","buildRow","buildCell","addVisibleLayoutInfos","firstVisibleRow","binarySearch","topLeft","lastVisibleRow","bottomRight","firstVisibleCell","lastVisibleCell","topRight","stickyIndex","idx","items","point","axis","low","high","mid"],"version":3,"file":"module.js.map"}