import { useControlledState } from "@react-stately/utils";
import { useCollection } from "@react-stately/collections";
import { SelectionManager, useMultipleSelectionState } from "@react-stately/selection";
import { useEffect, useMemo } from "react";
let $afa6f708e32ecf7f97d9a58dfd59c$var$_Symbol$iterator;
$afa6f708e32ecf7f97d9a58dfd59c$var$_Symbol$iterator = Symbol.iterator;

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
class $afa6f708e32ecf7f97d9a58dfd59c$export$TreeCollection {
  constructor(nodes, _temp) {
    var _last;

    let {
      expandedKeys
    } = _temp === void 0 ? {} : _temp;
    this.keyMap = new Map();
    this.iterable = void 0;
    this.firstKey = void 0;
    this.lastKey = void 0;
    this.iterable = nodes;
    expandedKeys = expandedKeys || new Set();

    let visit = node => {
      this.keyMap.set(node.key, node);

      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {
        for (let child of node.childNodes) {
          visit(child);
        }
      }
    };

    for (let node of nodes) {
      visit(node);
    }

    let last;
    let index = 0;

    for (let [key, node] of this.keyMap) {
      if (last) {
        last.nextKey = key;
        node.prevKey = last.key;
      } else {
        this.firstKey = key;
        node.prevKey = undefined;
      }

      if (node.type === 'item') {
        node.index = index++;
      }

      last = node; // Set nextKey as undefined since this might be the last node
      // If it isn't the last node, last.nextKey will properly set at start of new loop

      last.nextKey = undefined;
    }

    this.lastKey = (_last = last) == null ? void 0 : _last.key;
  }

  *[$afa6f708e32ecf7f97d9a58dfd59c$var$_Symbol$iterator]() {
    yield* this.iterable;
  }

  get size() {
    return this.keyMap.size;
  }

  getKeys() {
    return this.keyMap.keys();
  }

  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }

  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }

  getFirstKey() {
    return this.firstKey;
  }

  getLastKey() {
    return this.lastKey;
  }

  getItem(key) {
    return this.keyMap.get(key);
  }

  at(idx) {
    const keys = [...this.getKeys()];
    return this.getItem(keys[idx]);
  }

}

/**
 * Provides state management for tree-like components. Handles building a collection
 * of items from props, item expanded state, and manages multiple selection state.
 */
export function useTreeState(props) {
  let [expandedKeys, setExpandedKeys] = useControlledState(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange);
  let selectionState = useMultipleSelectionState(props);
  let disabledKeys = useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);
  let tree = useCollection(props, nodes => new $afa6f708e32ecf7f97d9a58dfd59c$export$TreeCollection(nodes, {
    expandedKeys
  }), null, [expandedKeys]); // Reset focused key if that item is deleted from the collection.

  useEffect(() => {
    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {
      selectionState.setFocusedKey(null);
    }
  }, [tree, selectionState.focusedKey]);

  let onToggle = key => {
    setExpandedKeys(expandedKeys => $f51dc3c5c900bd3cdb4a06df11d84697$var$toggleKey(expandedKeys, key));
  };

  return {
    collection: tree,
    expandedKeys,
    disabledKeys,
    toggleKey: onToggle,
    selectionManager: new SelectionManager(tree, selectionState)
  };
}

function $f51dc3c5c900bd3cdb4a06df11d84697$var$toggleKey(set, key) {
  let res = new Set(set);

  if (res.has(key)) {
    res.delete(key);
  } else {
    res.add(key);
  }

  return res;
}
//# sourceMappingURL=module.js.map
