{"mappings":"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","sources":["./packages/@react-stately/tree/src/TreeCollection.ts","./packages/@react-stately/tree/src/useTreeState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Expandable, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionBase<T>, Expandable, MultipleSelection {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, nodes => new TreeCollection(nodes, {expandedKeys}), null, [expandedKeys]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(expandedKeys => toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n"],"names":["Symbol","iterator","TreeCollection","constructor","nodes","expandedKeys","keyMap","Map","iterable","firstKey","lastKey","Set","visit","node","set","key","childNodes","type","has","child","last","index","nextKey","prevKey","undefined","size","getKeys","keys","getKeyBefore","get","getKeyAfter","getFirstKey","getLastKey","getItem","at","idx","useTreeState","props","setExpandedKeys","useControlledState","defaultExpandedKeys","onExpandedChange","selectionState","useMultipleSelectionState","disabledKeys","useMemo","tree","useCollection","useEffect","focusedKey","setFocusedKey","onToggle","toggleKey","collection","selectionManager","SelectionManager","res","delete","add"],"version":3,"file":"main.js.map"}