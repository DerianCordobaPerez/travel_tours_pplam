{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-stately/virtualizer/src/Layout.ts","./packages/@react-stately/virtualizer/src/LayoutInfo.ts","./packages/@react-stately/virtualizer/src/Point.ts","./packages/@react-stately/virtualizer/src/Rect.ts","./packages/@react-stately/virtualizer/src/Size.ts","./packages/@react-stately/virtualizer/src/ReusableView.ts","./packages/@react-stately/virtualizer/src/tween.ts","./packages/@react-stately/virtualizer/src/utils.ts","./packages/@react-stately/virtualizer/src/OverscanManager.ts","./packages/@react-stately/virtualizer/src/Transaction.ts","./packages/@react-stately/virtualizer/src/Virtualizer.ts","./packages/@react-stately/virtualizer/src/useVirtualizerState.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    let layoutInfo = layoutInfos[0];\n    if (!layoutInfo) {\n      return null;\n    }\n\n    return layoutInfo.key;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (!viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo.parentKey).push(view);\n      if (!viewsByParentKey.has(view.layoutInfo.key)) {\n        viewsByParentKey.set(view.layoutInfo.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    if (!key) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    this._processTransactionQueue();\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      if (!finalMap.has(key)) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  }, []);\n\n  return {\n    virtualizer,\n    visibleViews,\n    setVisibleRect: useCallback((rect) => {\n      virtualizer.visibleRect = rect;\n    }, [virtualizer]),\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling: useCallback(() => {\n      virtualizer.startScrolling();\n      setScrolling(true);\n    }, [virtualizer]),\n    endScrolling: useCallback(() => {\n      virtualizer.endScrolling();\n      setScrolling(false);\n    }, [virtualizer])\n  };\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","Layout","virtualizer","shouldInvalidate","newRect","oldRect","width","height","validate","invalidationContext","getInitialLayoutInfo","layoutInfo","getFinalLayoutInfo","LayoutInfo","constructor","type","key","rect","parentKey","estimatedSize","isSticky","opacity","transform","zIndex","copy","res","Point","x","y","equals","point","isOrigin","Rect","maxX","maxY","area","topLeft","topRight","bottomLeft","bottomRight","intersects","containsRect","containsPoint","getCornerInRect","pointEquals","sizeEquals","size","Size","other","KEY","ReusableView","content","rendered","viewType","prepareForReuse","perf","window","performance","perfNow","now","webkitNow","msNow","mozNow","getTime","bind","Date","fixTs","tween","begin","end","duration","ease","fn","canceled","raf_id","promise","Promise","resolve","start","diffX","diffY","requestAnimationFrame","run","t","delta","proceed","cancel","cancelAnimationFrame","easeOut","Math","sin","PI","keyDiff","b","Set","keys","has","add","difference","toRemove","toAdd","toUpdate","concatIterators","iterators","iterator","RollingAverage","count","value","addSample","sample","OverscanManager","startTime","averagePerf","averageTime","velocity","overscanX","overscanY","visibleRect","setVisibleRect","time","collectMetrics","o","abs","getOverscannedRect","overscanned","round","min","Transaction","level","actions","animated","initialMap","Map","finalMap","initialLayoutInfo","finalLayoutInfo","removed","Virtualizer","options","delegate","transitionDuration","anchorScrollPosition","anchorScrollPositionAtTop","shouldOverscan","_collection","_layout","_contentSize","_visibleRect","_visibleLayoutInfos","_reusableViews","_visibleViews","_renderedContent","_children","_invalidationContext","_overscanManager","_relayoutRaf","_scrollAnimation","_isScrolling","_sizeUpdateQueue","_animatedContentOffset","_transaction","_nextTransaction","_transactionQueue","WeakMap","_setContentSize","setContentSize","_setContentOffset","offset","contentSize","_setVisibleRect","forceUpdate","current","layout","_resetAnimatedContentOffset","relayout","offsetChanged","sizeChanged","updateSubviews","collection","data","_setData","_runTransaction","reloadData","contentChanged","getItem","setLayout","applyLayout","_getReuseType","getType","reuseType","getReusableView","reusable","view","length","pop","_renderView","reusableView","_renderContent","cached","get","renderView","set","visibleViews","Array","from","values","getView","getViewsOfType","filter","v","keyForView","keyAtPoint","layoutInfos","getVisibleLayoutInfos","willUnmount","context","Object","assign","relayoutNow","scrollAnchor","_getScrollAnchor","beforeLayout","getContentSize","afterLayout","getVisibleRect","restoredScrollAnchor","_restoreScrollAnchor","contentOffsetX","contentOffsetY","max","hasLayoutUpdates","transaction","_applyLayoutInfos","_enableTransitions","done","_disableTransitions","afterAnimation","setTimeout","_correctItemOrder","delete","beginAnimations","endAnimations","getScrollAnchor","getLayoutInfo","corner","cornerAnchor","contentOffset","finalAnchor","adjustment","_getLayoutInfoMap","map","visibleLayoutInfos","currentlyVisible","item","reuseView","_applyLayoutInfo","removeViews","_flushVisibleViews","_hasLayoutUpdates","afterRender","viewsByParentKey","push","buildTree","parent","views","children","renderWrapper","childViews","setVisibleViews","updated","cur","updateItemSize","changed","startScrolling","endScrolling","scrollToItem","shouldScrollX","shouldScrollY","offsetX","offsetY","minX","minY","scrollTo","then","clear","_processTransactionQueue","action","_startTransaction","_endTransaction","next","shift","_performTransaction","_getContentRect","_setupTransactionAnimations","useVirtualizerState","opts","useState","isAnimating","setAnimating","isScrolling","setScrolling","useMemo","onVisibleRectChange","useLayoutEffect","useEffect","useCallback"],"version":3,"file":"main.js.map"}