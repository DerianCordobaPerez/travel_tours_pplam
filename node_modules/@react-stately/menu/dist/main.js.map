{"mappings":";;;;;;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;AC0BD;;;;AAIO,SAASG,mBAAT,CAA6BC,KAA7B,EAAyE;AAC9E,MAAIC,mBAAmB,GAAGC,sBAAsB,CAACF,KAAD,CAAhD;AACA,MAAI,CAACG,aAAD,EAAgBC,gBAAhB,IAAoCC,QAAQ,CAAgB,IAAhB,CAAhD;AAEA;AACEF,IAAAA;AADF,KAEKF,mBAFL;AAGEK,IAAAA,IAAI,CAACH,aAAD,EAAsC;AAAA,UAArCA,aAAqC;AAArCA,QAAAA,aAAqC,GAAN,IAAM;AAAA;;AACxCC,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACAF,MAAAA,mBAAmB,CAACK,IAApB;AACD,KANH;;AAOEC,IAAAA,MAAM,CAACJ,aAAD,EAAsC;AAAA,UAArCA,aAAqC;AAArCA,QAAAA,aAAqC,GAAN,IAAM;AAAA;;AAC1CC,MAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACAF,MAAAA,mBAAmB,CAACM,MAApB;AACD;;AAVH;AAYD","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-stately/menu/src/useMenuTriggerState.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy} from '@react-types/shared';\nimport {MenuTriggerProps} from '@react-types/menu';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\n\nexport interface MenuTriggerState extends OverlayTriggerState {\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\n/**\n * Manages state for a menu trigger. Tracks whether the menu is currently open,\n * and controls which item will receive focus when it opens.\n */\nexport function useMenuTriggerState(props: MenuTriggerProps): MenuTriggerState  {\n  let overlayTriggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n\n  return {\n    focusStrategy,\n    ...overlayTriggerState,\n    open(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    }\n  };\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useMenuTriggerState","props","overlayTriggerState","useOverlayTriggerState","focusStrategy","setFocusStrategy","useState","open","toggle"],"version":3,"file":"main.js.map"}