{"mappings":"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","sources":["./packages/@react-stately/slider/src/useSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\ninterface SliderStateOptions extends SliderProps {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState(props: SliderStateOptions): SliderState {\n  const {isDisabled, minValue = DEFAULT_MIN_VALUE, maxValue = DEFAULT_MAX_VALUE, numberFormatter: formatter, step = DEFAULT_STEP_VALUE} = props;\n\n  const [values, setValues] = useControlledState<number[]>(\n    props.value as any,\n    props.defaultValue ?? [minValue] as any,\n    props.onChange as any\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (props.onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      props.onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    step\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n"],"names":["DEFAULT_MIN_VALUE","DEFAULT_MAX_VALUE","DEFAULT_STEP_VALUE","useSliderState","props","isDisabled","minValue","maxValue","numberFormatter","formatter","step","values","setValues","useControlledState","value","defaultValue","onChange","isDraggings","setDraggings","useState","Array","length","fill","isEditablesRef","useRef","focusedIndex","setFocusedIndex","undefined","valuesRef","current","isDraggingsRef","getValuePercent","getThumbMinValue","index","getThumbMaxValue","isThumbEditable","setThumbEditable","editable","updateValue","thisMin","thisMax","snapValueToStep","replaceIndex","updateDragging","dragging","wasDragging","onChangeEnd","some","Boolean","getFormattedValue","format","setThumbPercent","percent","getPercentValue","getRoundedValue","Math","round","val","clamp","getThumbValue","setThumbValue","isThumbDragging","setThumbDragging","focusedThumb","setFocusedThumb","getThumbPercent","getThumbValueLabel","array","slice"],"version":3,"file":"module.js.map"}