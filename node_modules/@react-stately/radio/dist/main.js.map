{"mappings":";;;;;;;;;AA2CA,IAAIA,8CAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,WAA3B,CAAf;AACA,IAAIC,uCAAC,GAAG,CAAR;AAEA;;;;;AAIO,SAASC,kBAAT,CAA4BC,KAA5B,EAAsE;AAC3E;AACA,MAAIC,IAAI,GAAGC,OAAO,CAAC,MAAMF,KAAK,CAACC,IAAN,qBAA6BP,8CAA7B,SAAyC,EAAEI,uCAAlD,EAAuD,CAACE,KAAK,CAACC,IAAP,CAAvD,CAAlB;AACA,MAAI,CAACE,aAAD,EAAgBC,WAAhB,IAA+BC,kBAAkB,CAACL,KAAK,CAACM,KAAP,EAAcN,KAAK,CAACO,YAApB,EAAkCP,KAAK,CAACQ,QAAxC,CAArD;AACA,MAAI,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CC,QAAQ,CAAC,IAAD,CAAtD;;AAEA,MAAIC,gBAAgB,GAAIN,KAAD,IAAW;AAChC,QAAI,CAACN,KAAK,CAACa,UAAP,IAAqB,CAACb,KAAK,CAACc,UAAhC,EAA4C;AAC1CV,MAAAA,WAAW,CAACE,KAAD,CAAX;AACD;AACF,GAJD;;AAMA,SAAO;AACLL,IAAAA,IADK;AAELE,IAAAA,aAFK;AAGLS,IAAAA,gBAHK;AAILH,IAAAA,gBAJK;AAKLC,IAAAA,mBALK;AAMLI,IAAAA,UAAU,EAAEd,KAAK,CAACc,UAAN,IAAoB,KAN3B;AAOLD,IAAAA,UAAU,EAAEb,KAAK,CAACa,UAAN,IAAoB;AAP3B,GAAP;AASD","sources":["./packages/@react-stately/radio/src/useRadioGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** Whether the radio group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the radio group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly && !props.isDisabled) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false\n  };\n}\n"],"names":["instance","Math","round","random","i","useRadioGroupState","props","name","useMemo","selectedValue","setSelected","useControlledState","value","defaultValue","onChange","lastFocusedValue","setLastFocusedValue","useState","setSelectedValue","isReadOnly","isDisabled"],"version":3,"file":"main.js.map"}