{"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,sBAAT,CAAgCC,CAAhC,EAAmC;AACjC,SAAOA,CAAC,IAAIA,CAAC,CAACC,UAAP,GAAoBD,CAAC,CAACE,OAAtB,GAAgCF,CAAvC;AACD;;ACwBD;;;AAGO,SAASG,SAAT,CAAmBC,KAAnB,EAA2CC,KAA3C,EAA+DC,GAA/D,EAAwG;AAC7G,MAAI;AACFC,IAAAA,UAAU,GAAG,KADX;AAEFC,IAAAA,UAFE;AAGFC,IAAAA,UAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,IALE;AAMFC,IAAAA,QANE;AAOF,kBAAcC,SAPZ;AAQF,uBAAmBC,cARjB;AASFC,IAAAA,eAAe,GAAG;AAThB,MAUAX,KAVJ;;AAYA,MAAIY,QAAQ,GAAIC,CAAD,IAAO;AACpB;AACA;AACAA,IAAAA,CAAC,CAACC,eAAF;AACAb,IAAAA,KAAK,CAACc,WAAN,CAAkBF,CAAC,CAACG,MAAF,CAASC,OAA3B;AACD,GALD;;AAOA,MAAIC,WAAW,GAAGV,QAAQ,IAAI,IAA9B;AACA,MAAIW,YAAY,GAAGV,SAAS,IAAI,IAAb,IAAqBC,cAAc,IAAI,IAA1D;;AACA,MAAI,CAACQ,WAAD,IAAgB,CAACC,YAArB,EAAmC;AACjCC,IAAAA,OAAO,CAACC,IAAR,CAAa,kFAAb;AACD,GAxB4G,CA0B7G;;;AACA,MAAI;AAACC,IAAAA;AAAD,MAAeC,QAAQ,CAAC;AAC1BpB,IAAAA;AAD0B,GAAD,CAA3B;AAIA,MAAI;AAACqB,IAAAA;AAAD,MAAmBC,YAAY,CAACzB,KAAD,EAAQE,GAAR,CAAnC;AACA,MAAIwB,YAAY,GAAGC,UAAU,CAACL,UAAD,EAAaE,cAAb,CAA7B;AACA,MAAII,QAAQ,GAAGC,cAAc,CAAC7B,KAAD,EAAQ;AAAC8B,IAAAA,SAAS,EAAE;AAAZ,GAAR,CAA7B;AAEA,SAAO;AACLC,IAAAA,UAAU,EAAEJ,UAAU,CAACC,QAAD;AACpB,sBAAgBjB,eAAe,KAAK,SAApB,IAAiCqB,SAD7B;AAEpB,2BAAqBhC,KAAK,CAAC,mBAAD,CAFN;AAGpB,uBAAiBA,KAAK,CAAC,eAAD,CAHF;AAIpB,uBAAiBK,UAAU,IAAI2B,SAJX;AAKpBpB,MAAAA,QALoB;AAMpBqB,MAAAA,QAAQ,EAAE9B,UANU;AAOpB+B,MAAAA,QAAQ,EAAE9B,UAPU;AAQpBE,MAAAA,KARoB;AASpBC,MAAAA,IAToB;AAUpB4B,MAAAA,IAAI,EAAE;AAVc,OAWjBT,YAXiB;AADjB,GAAP;AAeD","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/toggle/src/useToggle.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange,\n      disabled: isDisabled,\n      required: isRequired,\n      value,\n      name,\n      type: 'checkbox',\n      ...interactions\n    })\n  };\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useToggle","props","state","ref","isDisabled","isRequired","isReadOnly","value","name","children","ariaLabel","ariaLabelledby","validationState","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","console","warn","pressProps","usePress","focusableProps","useFocusable","interactions","mergeProps","domProps","filterDOMProps","labelable","inputProps","undefined","disabled","required","type"],"version":3,"file":"main.js.map"}