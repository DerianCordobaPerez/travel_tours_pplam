{"mappings":";;;;;AA8BA,MAAMA,4CAAqB,GAAG;AAC5BC,EAAAA,MAAM,EAAE,CADoB;AAE5BC,EAAAA,IAAI,EAAE,eAFsB;AAG5BC,EAAAA,QAAQ,EAAE,YAHkB;AAI5BC,EAAAA,MAAM,EAAE,CAJoB;AAK5BC,EAAAA,MAAM,EAAE,eALoB;AAM5BC,EAAAA,QAAQ,EAAE,QANkB;AAO5BC,EAAAA,OAAO,EAAE,CAPmB;AAQ5BC,EAAAA,QAAQ,EAAE,UARkB;AAS5BC,EAAAA,KAAK,EAAE,CATqB;AAU5BC,EAAAA,UAAU,EAAE;AAVgB,CAA9B;;AAiBA;;;;OAIO,SAASC,iBAAT,CAA2BC,KAA3B,EAAgF;AAAA,MAArDA,KAAqD;AAArDA,IAAAA,KAAqD,GAAxB,EAAwB;AAAA;;AACrF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,KAHJ;AAKA,MAAI,CAACG,SAAD,EAAYC,UAAZ,IAA0BC,QAAQ,CAAC,KAAD,CAAtC;AACA,MAAI;AAACC,IAAAA;AAAD,MAAeC,QAAQ,CAAC;AAC1BC,IAAAA,UAAU,EAAE,CAACN,WADa;AAE1BO,IAAAA,aAAa,EAAEL;AAFW,GAAD,CAA3B,CAPqF,CAYrF;;AACA,MAAIM,cAAc,GAAGC,OAAO,CAAC,MAAM;AACjC,QAAIR,SAAJ,EAAe;AACb,aAAOF,KAAP;AACD,KAFD,MAEO,IAAIA,KAAJ,EAAW;AAChB,gDAAWb,4CAAX,EAAsBa,KAAtB;AACD,KAFM,MAEA;AACL,aAAOb,4CAAP;AACD;AACF,GAR2B,EAQzB,CAACe,SAAD,CARyB,CAA5B;AAUA,SAAO;AACLS,IAAAA,mBAAmB,qCACdN,UADc;AAEjBL,MAAAA,KAAK,EAAES;AAFU;AADd,GAAP;AAMD;AAED;;;;;OAIO,SAASG,cAAT,CAAwBb,KAAxB,EAAoD;AACzD;AACA,MAAI;AAACc,IAAAA,QAAD;AAAWC,IAAAA,WAAW,EAAEC,OAAO,GAAG;AAAlC,MAA8EhB,KAAlF;AAAA,MAAoEiB,UAApE,uDAAkFjB,KAAlF;;AACA,MAAI;AAACY,IAAAA;AAAD,MAAwBb,iBAAiB,CAACC,KAAD,CAA7C;AAEA,sBACE,qBAAC,OAAD,EAAakB,UAAU,CAACD,UAAD,EAAaL,mBAAb,CAAvB,EACGE,QADH,CADF;AAKD","sources":["./packages/@react-aria/visually-hidden/src/VisuallyHidden.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\nimport React, {CSSProperties, HTMLAttributes, JSXElementConstructor, ReactNode, useMemo, useState} from 'react';\nimport {useFocus} from '@react-aria/interactions';\n\ninterface VisuallyHiddenProps extends HTMLAttributes<HTMLElement> {\n  /** The content to visually hide. */\n  children?: ReactNode,\n\n  /**\n   * The element type for the container.\n   * @default 'div'\n   */\n  elementType?: string | JSXElementConstructor<any>,\n\n  /** Whether the element should become visible on focus, for example skip links. */\n  isFocusable?: boolean\n}\n\nconst styles: CSSProperties = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(50%)',\n  height: 1,\n  margin: '0 -1px -1px 0',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  width: 1,\n  whiteSpace: 'nowrap'\n};\n\ninterface VisuallyHiddenAria {\n  visuallyHiddenProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides props for an element that hides its children visually\n * but keeps content visible to assistive technology.\n */\nexport function useVisuallyHidden(props: VisuallyHiddenProps = {}): VisuallyHiddenAria {\n  let {\n    style,\n    isFocusable\n  } = props;\n\n  let [isFocused, setFocused] = useState(false);\n  let {focusProps} = useFocus({\n    isDisabled: !isFocusable,\n    onFocusChange: setFocused\n  });\n\n  // If focused, don't hide the element.\n  let combinedStyles = useMemo(() => {\n    if (isFocused) {\n      return style;\n    } else if (style) {\n      return {...styles, ...style};\n    } else {\n      return styles;\n    }\n  }, [isFocused]);\n\n  return {\n    visuallyHiddenProps: {\n      ...focusProps,\n      style: combinedStyles\n    }\n  };\n}\n\n/**\n * VisuallyHidden hides its children visually, while keeping content visible\n * to screen readers.\n */\nexport function VisuallyHidden(props: VisuallyHiddenProps) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {children, elementType: Element = 'div', isFocusable, style, ...otherProps} = props;\n  let {visuallyHiddenProps} = useVisuallyHidden(props);\n\n  return (\n    <Element {...mergeProps(otherProps, visuallyHiddenProps)}>\n      {children}\n    </Element>\n  );\n}\n"],"names":["styles","border","clip","clipPath","height","margin","overflow","padding","position","width","whiteSpace","useVisuallyHidden","props","style","isFocusable","isFocused","setFocused","useState","focusProps","useFocus","isDisabled","onFocusChange","combinedStyles","useMemo","visuallyHiddenProps","VisuallyHidden","children","elementType","Element","otherProps","mergeProps"],"version":3,"file":"module.js.map"}