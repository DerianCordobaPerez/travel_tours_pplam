{"mappings":"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","sources":["./packages/@react-aria/menu/src/useMenuTrigger.ts","./packages/@react-aria/menu/src/useMenu.ts","./packages/@react-aria/menu/src/useMenuItem.ts","./packages/@react-aria/menu/src/useMenuSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {MenuTriggerState} from '@react-stately/menu';\nimport {useId} from '@react-aria/utils';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\ninterface MenuTriggerAriaProps {\n  /** The type of menu that the menu trigger opens. */\n  type?: 'menu' | 'listbox',\n  /** Whether menu trigger is disabled. */\n  isDisabled?: boolean\n}\n\ninterface MenuTriggerAria {\n  /** Props for the menu trigger element. */\n  menuTriggerProps: AriaButtonProps,\n\n  /** Props for the menu. */\n  menuProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu trigger.\n * @param props - Props for the menu trigger.\n * @param state - State for the menu trigger.\n */\nexport function useMenuTrigger(props: MenuTriggerAriaProps, state: MenuTriggerState, ref: RefObject<HTMLElement>): MenuTriggerAria {\n  let {\n    type = 'menu' as MenuTriggerAriaProps['type'],\n    isDisabled\n  } = props;\n\n  let menuTriggerId = useId();\n  let {triggerProps, overlayProps} = useOverlayTrigger({type}, state, ref);\n\n  let onKeyDown = (e) => {\n    if ((typeof e.isDefaultPrevented === 'function' && e.isDefaultPrevented()) || e.defaultPrevented || isDisabled) {\n      return;\n    }\n\n    if (ref && ref.current) {\n      switch (e.key) {\n        case 'ArrowDown':\n        case 'Enter':\n        case ' ':\n          e.preventDefault();\n          e.stopPropagation();\n          state.toggle('first');\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          state.toggle('last');\n          break;\n      }\n    }\n  };\n\n  return {\n    menuTriggerProps: {\n      ...triggerProps,\n      id: menuTriggerId,\n      onPressStart(e) {\n        // For consistency with native, open the menu on mouse/key down, but touch up.\n        if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard') {\n          // If opened with a screen reader, auto focus the first item.\n          // Otherwise, the menu itself will be focused.\n          state.toggle(e.pointerType === 'virtual' ? 'first' : null);\n        }\n      },\n      onPress(e) {\n        if (e.pointerType === 'touch') {\n          state.toggle();\n        }\n      },\n      onKeyDown\n    },\n    menuProps: {\n      ...overlayProps,\n      'aria-labelledby': menuTriggerId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface MenuAria {\n  /** Props for the menu element. */\n  menuProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaMenuOptions<T> extends AriaMenuProps<T> {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {\n      role: 'menu',\n      ...listProps\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\nimport {PressEvent} from '@react-types/shared';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>\n}\n\ninterface AriaMenuItemProps {\n  /** Whether the menu item is disabled. */\n  isDisabled?: boolean,\n\n  /** Whether the menu item is selected. */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string,\n\n  /** The unique key for the menu item. */\n  key?: Key,\n\n  /** Handler that is called when the menu should close after selecting an item. */\n  onClose?: () => void,\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  closeOnSelect?: boolean,\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  isVirtualized?: boolean,\n\n  /** Handler that is called when the user activates the item. */\n  onAction?: (key: Key) => void\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(props: AriaMenuItemProps, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuItemAria {\n  let {\n    isSelected,\n    isDisabled,\n    key,\n    onClose,\n    closeOnSelect,\n    isVirtualized,\n    onAction\n  } = props;\n\n  let role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') {\n    role = 'menuitemradio';\n  } else if (state.selectionManager.selectionMode === 'multiple') {\n    role = 'menuitemcheckbox';\n  }\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let keyboardId = useSlotId();\n\n  let ariaProps = {\n    'aria-disabled': isDisabled,\n    role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n  };\n\n  if (state.selectionManager.selectionMode !== 'none') {\n    ariaProps['aria-checked'] = isSelected;\n  }\n\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Ignore repeating events, which may have started on the menu trigger before moving\n    // focus to the menu item. We want to wait for a second complete key press sequence.\n    if (e.repeat) {\n      return;\n    }\n\n    switch (e.key) {\n      case ' ':\n        if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n      case 'Enter':\n        // The Enter key should always close on select, except if overridden.\n        if (!isDisabled && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n    }\n  };\n\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType === 'keyboard' && onAction) {\n      onAction(key);\n    }\n  };\n\n  let onPressUp = (e: PressEvent) => {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) {\n        onAction(key);\n      }\n\n      // Pressing a menu item should close by default in single selection mode but not multiple\n      // selection mode, except if overridden by the closeOnSelect prop.\n      if (onClose && (closeOnSelect ?? state.selectionManager.selectionMode !== 'multiple')) {\n        onClose();\n      }\n    }\n  };\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp: true\n  });\n\n  let {pressProps} = usePress(mergeProps({onPressStart, onPressUp, onKeyDown, isDisabled}, itemProps));\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...mergeProps(pressProps, hoverProps)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaMenuSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface MenuSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the section.\n */\nexport function useMenuSection(props: AriaMenuSectionProps): MenuSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, menus cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"],"names":["useMenuTrigger","props","state","ref","type","isDisabled","menuTriggerId","useId","triggerProps","overlayProps","useOverlayTrigger","onKeyDown","e","isDefaultPrevented","defaultPrevented","current","key","preventDefault","stopPropagation","toggle","menuTriggerProps","id","onPressStart","pointerType","onPress","menuProps","useMenu","shouldFocusWrap","otherProps","console","warn","domProps","filterDOMProps","labelable","listProps","useSelectableList","selectionManager","collection","disabledKeys","mergeProps","role","useMenuItem","isSelected","onClose","closeOnSelect","isVirtualized","onAction","selectionMode","labelId","useSlotId","descriptionId","keyboardId","ariaProps","filter","Boolean","join","undefined","getItem","index","getItemCount","repeat","onPressUp","itemProps","useSelectableItem","shouldSelectOnPressUp","pressProps","usePress","hoverProps","useHover","onHoverStart","isFocusVisible","setFocused","setFocusedKey","menuItemProps","labelProps","descriptionProps","keyboardShortcutProps","useMenuSection","heading","ariaLabel","headingId","headingProps","groupProps"],"version":3,"file":"module.js.map"}