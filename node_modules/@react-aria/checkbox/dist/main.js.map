{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/checkbox/src/useCheckbox.ts","./packages/@react-aria/checkbox/src/utils.ts","./packages/@react-aria/checkbox/src/useCheckboxGroup.ts","./packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes} from 'react';\nimport {useLabel} from '@react-aria/label';\n\ninterface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useCheckbox","props","state","inputRef","inputProps","useToggle","isSelected","isIndeterminate","useEffect","current","indeterminate","checked","checkboxGroupNames","WeakMap","useCheckboxGroup","isDisabled","name","labelProps","fieldProps","useLabel","labelElementType","domProps","filterDOMProps","labelable","set","groupProps","mergeProps","role","undefined","useCheckboxGroupItem","toggleState","useToggleState","isReadOnly","value","onChange","addValue","removeValue","get"],"version":3,"file":"main.js.map"}