{"mappings":"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","sources":["./packages/@react-aria/textfield/src/useTextField.ts","./packages/@react-aria/textfield/src/useFormattedTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {ChangeEvent, InputHTMLAttributes, LabelHTMLAttributes, RefObject, TextareaHTMLAttributes} from 'react';\nimport {ElementType} from 'react';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {useLabel} from '@react-aria/label';\n\nexport interface TextFieldAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  /** Props for the text field's visible label element (if any). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>\n}\n\ninterface AriaTextFieldOptions extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: ElementType\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField(\n  props: AriaTextFieldOptions,\n  ref: RefObject<HTMLInputElement | HTMLTextAreaElement>\n): TextFieldAria {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    validationState,\n    type = 'text',\n    onChange = () => {}\n  } = props;\n  let {focusableProps} = useFocusable(props, ref);\n  let {labelProps, fieldProps} = useLabel(props);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        'aria-required': isRequired || undefined,\n        'aria-invalid': validationState === 'invalid' || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value: props.value,\n        defaultValue: props.value ? undefined : props.defaultValue,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value),\n        autoComplete: props.autoComplete,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    )\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n\n  let stateRef = useRef(state);\n  stateRef.current = state;\n\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n\n    let onBeforeInput = (e: InputEvent) => {\n      let state = stateRef.current;\n\n      // Compute the next value of the input if the event is allowed to proceed.\n      // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n      let nextValue: string;\n      switch (e.inputType) {\n        case 'historyUndo':\n        case 'historyRedo':\n          // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n          // because presumably the input would have already been validated previously.\n          return;\n        case 'deleteContent':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentForward':\n          // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n          // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n          // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n          // If we support additional locales in the future, this may need to change.\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteContentBackward':\n          nextValue = input.selectionEnd === input.selectionStart\n            ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n            : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n          break;\n        case 'deleteSoftLineBackward':\n        case 'deleteHardLineBackward':\n          nextValue = input.value.slice(input.selectionStart);\n          break;\n        default:\n          if (e.data != null) {\n            nextValue =\n              input.value.slice(0, input.selectionStart) +\n              e.data +\n              input.value.slice(input.selectionEnd);\n          }\n          break;\n      }\n\n      // If we did not compute a value, or the new value is invalid, prevent the event\n      // so that the browser does not update the input text, move the selection, or add to\n      // the undo/redo stack.\n      if (nextValue == null || !state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    };\n\n    input.addEventListener('beforeinput', onBeforeInput, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInput, false);\n    };\n  }, [inputRef, stateRef]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps\n  };\n}\n"],"names":["useTextField","props","ref","inputElementType","isDisabled","isRequired","isReadOnly","validationState","type","onChange","focusableProps","useFocusable","labelProps","fieldProps","useLabel","domProps","filterDOMProps","labelable","inputOnlyProps","pattern","inputProps","mergeProps","disabled","readOnly","undefined","value","defaultValue","e","target","autoComplete","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput","supportsNativeBeforeInputEvent","window","InputEvent","prototype","getTargetRanges","useFormattedTextField","state","inputRef","stateRef","useRef","current","useEffect","input","nextValue","inputType","slice","selectionStart","selectionEnd","data","validate","preventDefault","addEventListener","removeEventListener","textFieldProps","compositionStartState","setSelectionRange","setInputValue"],"version":3,"file":"module.js.map"}