{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/@react-aria/selection/src/useTypeSelect.ts","./packages/@react-aria/selection/src/useSelectableCollection.ts","./packages/@react-aria/selection/src/useSelectableItem.ts","./packages/@react-aria/selection/src/ListKeyboardDelegate.ts","./packages/@react-aria/selection/src/useSelectableList.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, KeyboardEvent, useRef} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\ninterface TypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\ninterface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: TypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent, HTMLAttributes, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {focusWithoutScrolling, isMac, mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nfunction isCtrlKeyPressed(e: KeyboardEvent) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: SelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false\n  } = options;\n  let {direction} = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: HTMLElement;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        manager.setFocusedKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        manager.setFocusedKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (e.currentTarget.contains(e.target)) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, Key, RefObject, useEffect} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressEvent} from '@react-types/shared';\nimport {PressProps} from '@react-aria/interactions';\n\ninterface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\ninterface SelectableItemAria {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: HTMLAttributes<HTMLElement> & PressProps\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus\n  } = options;\n\n  let onSelect = (e: PressEvent | PointerEvent) => manager.select(key, e);\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  let isFocused = key === manager.focusedKey;\n  useEffect(() => {\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  }, [ref, isFocused, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus) {\n    itemProps = {\n      tabIndex: isFocused ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  }\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  if (shouldSelectOnPressUp) {\n    itemProps.onPressStart = (e) => {\n      if (e.pointerType === 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    itemProps.onPressUp = (e) => {\n      if (e.pointerType !== 'keyboard') {\n        onSelect(e);\n      }\n    };\n  } else {\n    // On touch, it feels strange to select on touch down, so we special case this.\n    itemProps.onPressStart = (e) => {\n      if (e.pointerType !== 'touch') {\n        onSelect(e);\n      }\n    };\n\n    itemProps.onPress = (e) => {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  return {\n    itemProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {HTMLAttributes, Key, RefObject, useEffect, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: SelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(`[data-key=\"${selectionManager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n\n/**\n * Scrolls `scrollView` so that `element` is visible.\n * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),\n * but doesn't affect parents above `scrollView`.\n */\nfunction scrollIntoView(scrollView: HTMLElement, element: HTMLElement) {\n  let offsetX = relativeOffset(scrollView, element, 'left');\n  let offsetY = relativeOffset(scrollView, element, 'top');\n  let width = element.offsetWidth;\n  let height = element.offsetHeight;\n  let x = scrollView.scrollLeft;\n  let y = scrollView.scrollTop;\n  let maxX = x + scrollView.offsetWidth;\n  let maxY = y + scrollView.offsetHeight;\n\n  if (offsetX <= x) {\n    x = offsetX;\n  } else if (offsetX + width > maxX) {\n    x += offsetX + width - maxX;\n  }\n  if (offsetY <= y) {\n    y = offsetY;\n  } else if (offsetY + height > maxY) {\n    y += offsetY + height - maxY;\n  }\n\n  scrollView.scrollLeft = x;\n  scrollView.scrollTop = y;\n}\n\n/**\n * Computes the offset left or top from child to ancestor by accumulating\n * offsetLeft or offsetTop through intervening offsetParents.\n */\nfunction relativeOffset(ancestor: HTMLElement, child: HTMLElement, axis: 'left'|'top') {\n  const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';\n  let sum = 0;\n  while (child.offsetParent) {\n    sum += child[prop];\n    if (child.offsetParent === ancestor) {\n      // Stop once we have found the ancestor we are interested in.\n      break;\n    } else if (child.offsetParent.contains(ancestor)) {\n      // If the ancestor is not `position:relative`, then we stop at \n      // _its_ offset parent, and we subtract off _its_ offset, so that\n      // we end up with the proper offset from child to ancestor.\n      sum -= ancestor[prop];\n      break;\n    }\n    child = child.offsetParent as HTMLElement;\n  }\n  return sum;\n}\n"],"names":["$parcel$interopDefault","a","__esModule","default","useTypeSelect","options","keyboardDelegate","selectionManager","onTypeSelect","state","useRef","search","timeout","current","onKeyDown","e","character","getStringForKey","key","ctrlKey","metaKey","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test","isCtrlKeyPressed","isMac","useSelectableCollection","manager","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","direction","useLocale","altKey","contains","target","navigateToKey","childFocus","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","nextKey","getFirstKey","getKeyAbove","getLastKey","getKeyLeftOf","getKeyRightOf","firstKey","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","clearSelection","focus","walker","getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","focusWithoutScrolling","onFocus","isFocused","currentTarget","setFocused","relatedTarget","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","onBlur","autoFocusRef","useEffect","selectedKeys","size","values","value","focusSafely","handlers","onMouseDown","mergeProps","tabIndex","collectionProps","useSelectableItem","shouldSelectOnPressUp","isVirtualized","onSelect","select","childFocusStrategy","itemProps","onPressStart","pointerType","onPressUp","onPress","ListKeyboardDelegate","constructor","collection","disabledKeys","collator","getKeyAfter","item","getItem","type","has","getKeyBefore","querySelector","menu","pageY","Math","max","offsetTop","offsetHeight","min","scrollHeight","fromKey","substring","textValue","slice","compare","useSelectableList","props","useCollator","usage","sensitivity","useMemo","element","scrollIntoView","listProps","scrollView","offsetX","relativeOffset","offsetY","width","offsetWidth","height","x","scrollLeft","y","scrollTop","maxX","maxY","ancestor","child","axis","prop","sum","offsetParent"],"version":3,"file":"main.js.map"}