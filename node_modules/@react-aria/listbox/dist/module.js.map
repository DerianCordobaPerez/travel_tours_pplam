{"mappings":"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","sources":["./packages/@react-aria/listbox/src/utils.ts","./packages/@react-aria/listbox/src/useListBox.ts","./packages/@react-aria/listbox/src/useOption.ts","./packages/@react-aria/listbox/src/useListBoxSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n  /** Whether the option is currently selected. */\n  isSelected: boolean,\n  /** Whether the option is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the option is disabled. */\n  isDisabled: boolean\n}\n\ninterface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus\n  });\n\n  let {pressProps, isPressed} = usePress({...itemProps, isDisabled, preventFocusOnPress: shouldUseVirtualFocus});\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(pressProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"],"names":["listData","WeakMap","normalizeKey","key","replace","getItemId","state","itemKey","data","get","Error","id","useListBox","props","ref","domProps","filterDOMProps","labelable","listProps","useSelectableList","selectionManager","collection","disabledKeys","focusWithinProps","useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","useId","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","labelProps","fieldProps","useLabel","labelElementType","listBoxProps","mergeProps","selectionMode","role","useOption","isDisabled","has","isSelected","isFocused","focusedKey","labelId","useSlotId","descriptionId","optionProps","undefined","isMac","isWebKit","getItem","index","getItemCount","itemProps","useSelectableItem","pressProps","isPressed","usePress","preventFocusOnPress","hoverProps","useHover","onHoverStart","isFocusVisible","setFocused","setFocusedKey","descriptionProps","useListBoxSection","heading","ariaLabel","headingId","headingProps","groupProps"],"version":3,"file":"module.js.map"}