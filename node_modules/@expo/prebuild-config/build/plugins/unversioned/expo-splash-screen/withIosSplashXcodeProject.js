"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setSplashStoryboardAsync = exports.getSplashStoryboardContentsAsync = exports.withIosSplashXcodeProject = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const debug_1 = __importDefault(require("debug"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path = __importStar(require("path"));
const InterfaceBuilder_1 = require("./InterfaceBuilder");
const debug = debug_1.default('expo:prebuild-config:expo-splash-screen:ios:xcodeproj');
const STORYBOARD_FILE_PATH = './SplashScreen.storyboard';
const withIosSplashXcodeProject = (config, splash) => {
    return config_plugins_1.withXcodeProject(config, async (config) => {
        const projectPath = config_plugins_1.IOSConfig.Paths.getSourceRoot(config.modRequest.projectRoot);
        config.modResults = await setSplashStoryboardAsync({ projectPath, projectName: config.modRequest.projectName, project: config.modResults }, splash);
        return config;
    });
};
exports.withIosSplashXcodeProject = withIosSplashXcodeProject;
/**
 * Modifies `.pbxproj` by:
 * - adding reference for `.storyboard` file
 */
function updatePbxProject({ projectName, project, }) {
    // Check if `${projectName}/SplashScreen.storyboard` already exists
    // Path relative to `ios` directory
    const storyboardFilePath = path.join(projectName, STORYBOARD_FILE_PATH);
    if (!project.hasFile(storyboardFilePath)) {
        debug(`Adding ${storyboardFilePath} to Xcode project`);
        config_plugins_1.IOSConfig.XcodeUtils.addResourceFileToGroup({
            filepath: storyboardFilePath,
            groupName: projectName,
            project,
        });
    }
}
function getImageContentMode(resizeMode) {
    switch (resizeMode) {
        case 'contain':
            return 'scaleAspectFit';
        case 'cover':
            return 'scaleAspectFill';
        default:
            throw new Error(`{ resizeMode: "${resizeMode}" } is not supported for iOS platform.`);
    }
}
/**
 * Creates [STORYBOARD] file containing ui description of Splash/Launch Screen.
 */
async function getSplashStoryboardContentsAsync(config) {
    const resizeMode = config === null || config === void 0 ? void 0 : config.resizeMode;
    const splashScreenImagePresent = Boolean(config === null || config === void 0 ? void 0 : config.image);
    let xml = await InterfaceBuilder_1.createTemplateSplashScreenAsync();
    // Only get the resize mode when the image is present.
    if (splashScreenImagePresent) {
        const contentMode = getImageContentMode(resizeMode || 'contain');
        xml = InterfaceBuilder_1.applyImageToSplashScreenXML(xml, {
            contentMode,
            imageName: 'SplashScreen',
        });
    }
    return InterfaceBuilder_1.toString(xml);
}
exports.getSplashStoryboardContentsAsync = getSplashStoryboardContentsAsync;
async function setSplashStoryboardAsync({ projectPath, projectName, project, }, config) {
    const contents = await getSplashStoryboardContentsAsync(config);
    const filePath = path.resolve(projectPath, STORYBOARD_FILE_PATH);
    await fs_extra_1.default.ensureDir(projectPath);
    await fs_extra_1.default.writeFile(filePath, contents);
    await updatePbxProject({ projectName, project });
    return project;
}
exports.setSplashStoryboardAsync = setSplashStoryboardAsync;
//# sourceMappingURL=withIosSplashXcodeProject.js.map