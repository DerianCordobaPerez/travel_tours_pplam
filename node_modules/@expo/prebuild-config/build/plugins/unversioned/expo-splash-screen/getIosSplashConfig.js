"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.warnUnsupportedSplashProperties = exports.getIosSplashConfig = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const defaultResizeMode = 'contain';
const defaultBackgroundColor = '#ffffff';
// TODO: Maybe use an array on splash with theme value. Then remove the array in serialization for legacy and manifest.
function getIosSplashConfig(config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    // Respect the splash screen object, don't mix and match across different splash screen objects
    // in case the user wants the top level splash to apply to every platform except iOS.
    if ((_a = config.ios) === null || _a === void 0 ? void 0 : _a.splash) {
        const splash = (_b = config.ios) === null || _b === void 0 ? void 0 : _b.splash;
        const image = (_c = splash.image) !== null && _c !== void 0 ? _c : null;
        return {
            image,
            resizeMode: (_d = splash.resizeMode) !== null && _d !== void 0 ? _d : defaultResizeMode,
            backgroundColor: (_e = splash.backgroundColor) !== null && _e !== void 0 ? _e : defaultBackgroundColor,
            tabletImage: (_f = splash.tabletImage) !== null && _f !== void 0 ? _f : null,
            tabletBackgroundColor: splash.tabletBackgroundColor,
            dark: {
                image: (_h = (_g = splash.dark) === null || _g === void 0 ? void 0 : _g.image) !== null && _h !== void 0 ? _h : null,
                backgroundColor: (_j = splash.dark) === null || _j === void 0 ? void 0 : _j.backgroundColor,
                tabletImage: (_l = (_k = splash.dark) === null || _k === void 0 ? void 0 : _k.tabletImage) !== null && _l !== void 0 ? _l : null,
                tabletBackgroundColor: (_m = splash.dark) === null || _m === void 0 ? void 0 : _m.tabletBackgroundColor,
            },
        };
    }
    if (config.splash) {
        const splash = config.splash;
        const image = (_o = splash.image) !== null && _o !== void 0 ? _o : null;
        return {
            image,
            resizeMode: (_p = splash.resizeMode) !== null && _p !== void 0 ? _p : defaultResizeMode,
            backgroundColor: (_q = splash.backgroundColor) !== null && _q !== void 0 ? _q : defaultBackgroundColor,
            tabletImage: null,
            tabletBackgroundColor: null,
            dark: {
                image: null,
                backgroundColor: null,
                tabletImage: null,
                tabletBackgroundColor: null,
            },
        };
    }
    return {
        backgroundColor: '#ffffff',
        resizeMode: 'contain',
        tabletImage: null,
        tabletBackgroundColor: null,
    };
}
exports.getIosSplashConfig = getIosSplashConfig;
function warnUnsupportedSplashProperties(config) {
    var _a, _b;
    if ((_b = (_a = config.ios) === null || _a === void 0 ? void 0 : _a.splash) === null || _b === void 0 ? void 0 : _b.xib) {
        config_plugins_1.WarningAggregator.addWarningIOS('splash', 'ios.splash.xib is not supported in prebuild. Please use ios.splash.image instead.');
    }
}
exports.warnUnsupportedSplashProperties = warnUnsupportedSplashProperties;
//# sourceMappingURL=getIosSplashConfig.js.map