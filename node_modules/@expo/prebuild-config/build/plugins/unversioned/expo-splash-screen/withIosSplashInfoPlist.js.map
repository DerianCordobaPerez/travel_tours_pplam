{"version":3,"file":"withIosSplashInfoPlist.js","sourceRoot":"","sources":["../../../../src/plugins/unversioned/expo-splash-screen/withIosSplashInfoPlist.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAiG;AAEjG,kDAA0B;AAI1B,MAAM,KAAK,GAAG,eAAK,CAAC,uDAAuD,CAAC,CAAC;AAEtE,MAAM,sBAAsB,GAAkC,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;IACtF,OAAO,8BAAa,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;QACpC,MAAM,CAAC,UAAU,GAAG,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC1E,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AALW,QAAA,sBAAsB,0BAKjC;AAEF,SAAgB,kBAAkB,CAChC,MAAkB,EAClB,SAAoB,EACpB,MAAuB;;IAEvB,MAAM,iBAAiB,GAAG,CAAC,CAAC,CAC1B,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,0CAAE,KAAK;SACnB,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,0CAAE,WAAW,CAAA;SACzB,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,0CAAE,eAAe,CAAA;SAC7B,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,0CAAE,qBAAqB,CAAA,CACpC,CAAC;IACF,KAAK,CAAC,qBAAqB,EAAE,iBAAiB,CAAC,CAAC;IAEhD,IAAI,iBAAiB,EAAE;QACrB,8DAA8D;QAC9D,4EAA4E;QAC5E,MAAM,QAAQ,GAAG,MAAA,MAAA,MAAM,CAAC,GAAG,0CAAE,kBAAkB,mCAAI,MAAM,CAAC,kBAAkB,CAAC;QAC7E,8GAA8G;QAC9G,IAAI,QAAQ,IAAI,QAAQ,KAAK,WAAW,EAAE;YACxC,kCAAiB,CAAC,aAAa,CAC7B,QAAQ,EACR,qJAAqJ,CACtJ,CAAC;SACH;QACD,+FAA+F;QAC/F,SAAS,CAAC,oBAAoB,GAAG,WAAW,CAAC;KAC9C;SAAM;QACL,OAAO,SAAS,CAAC,oBAAoB,CAAC;KACvC;IAED,IAAI,MAAM,EAAE;QACV,2BAA2B;QAC3B,SAAS,CAAC,sBAAsB,GAAG,cAAc,CAAC;KACnD;SAAM;QACL,KAAK,CAAC,kCAAkC,CAAC,CAAC;QAC1C,OAAO,SAAS,CAAC,sBAAsB,CAAC;KACzC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAvCD,gDAuCC","sourcesContent":["import { ConfigPlugin, InfoPlist, WarningAggregator, withInfoPlist } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport Debug from 'debug';\n\nimport { IOSSplashConfig } from './getIosSplashConfig';\n\nconst debug = Debug('expo:prebuild-config:expo-splash-screen:ios:infoPlist');\n\nexport const withIosSplashInfoPlist: ConfigPlugin<IOSSplashConfig> = (config, splash) => {\n  return withInfoPlist(config, config => {\n    config.modResults = setSplashInfoPlist(config, config.modResults, splash);\n    return config;\n  });\n};\n\nexport function setSplashInfoPlist(\n  config: ExpoConfig,\n  infoPlist: InfoPlist,\n  splash: IOSSplashConfig\n): InfoPlist {\n  const isDarkModeEnabled = !!(\n    splash?.dark?.image ||\n    splash?.dark?.tabletImage ||\n    splash?.dark?.backgroundColor ||\n    splash?.dark?.tabletBackgroundColor\n  );\n  debug(`isDarkModeEnabled: `, isDarkModeEnabled);\n\n  if (isDarkModeEnabled) {\n    // IOSConfig.UserInterfaceStyle.getUserInterfaceStyle(config);\n    // Determine if the user manually defined the userInterfaceStyle incorrectly\n    const existing = config.ios?.userInterfaceStyle ?? config.userInterfaceStyle;\n    // Add a warning to prevent the dark mode splash screen from not being shown -- this was learned the hard way.\n    if (existing && existing !== 'automatic') {\n      WarningAggregator.addWarningIOS(\n        'splash',\n        'The existing `userInterfaceStyle` property is preventing splash screen from working properly. Please remove it or disable dark mode splash screens.'\n      );\n    }\n    // assigning it to auto anyways, but this is fragile because the order of operations matter now\n    infoPlist.UIUserInterfaceStyle = 'Automatic';\n  } else {\n    delete infoPlist.UIUserInterfaceStyle;\n  }\n\n  if (splash) {\n    // TODO: What to do here ??\n    infoPlist.UILaunchStoryboardName = 'SplashScreen';\n  } else {\n    debug(`Disabling UILaunchStoryboardName`);\n    delete infoPlist.UILaunchStoryboardName;\n  }\n\n  return infoPlist;\n}\n"]}