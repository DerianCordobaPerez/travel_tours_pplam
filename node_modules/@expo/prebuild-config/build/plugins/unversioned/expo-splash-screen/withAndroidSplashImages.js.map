{"version":3,"file":"withAndroidSplashImages.js","sourceRoot":"","sources":["../../../../src/plugins/unversioned/expo-splash-screen/withAndroidSplashImages.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConfigPlugin, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport {\n  getAndroidDarkSplashConfig,\n  getAndroidSplashConfig,\n  SplashScreenConfig,\n} from './getAndroidSplashConfig';\n\nconst SPLASH_SCREEN_FILENAME = 'splashscreen_image.png';\n\ntype DRAWABLE_SIZE = 'default' | 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype THEME = 'light' | 'dark';\n\nconst DRAWABLES_CONFIGS: {\n  [key in DRAWABLE_SIZE]: {\n    modes: {\n      [key in THEME]: {\n        path: string;\n      };\n    };\n    dimensionsMultiplier: number;\n  };\n} = {\n  default: {\n    modes: {\n      light: {\n        path: `./res/drawable/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1.5,\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 2,\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 3,\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 4,\n  },\n};\n\nexport const withAndroidSplashImages: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setSplashImageDrawablesAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn't provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n *\n * @param androidMainPath Absolute path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport async function setSplashImageDrawablesAsync(\n  config: Pick<ExpoConfig, 'android' | 'splash'>,\n  projectRoot: string\n) {\n  await clearAllExistingSplashImagesAsync(projectRoot);\n\n  const splash = getAndroidSplashConfig(config);\n  const darkSplash = getAndroidDarkSplashConfig(config);\n\n  await Promise.all([\n    setSplashImageDrawablesForThemeAsync(splash, 'light', projectRoot),\n    setSplashImageDrawablesForThemeAsync(darkSplash, 'dark', projectRoot),\n  ]);\n}\n\nasync function clearAllExistingSplashImagesAsync(projectRoot: string) {\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    Object.values(DRAWABLES_CONFIGS).map(async ({ modes }) => {\n      await Promise.all(\n        Object.values(modes).map(async ({ path: filePath }) => {\n          if (await fs.pathExists(path.resolve(androidMainPath, filePath))) {\n            await fs.remove(path.resolve(androidMainPath, filePath));\n          }\n        })\n      );\n    })\n  );\n}\n\nexport async function setSplashImageDrawablesForThemeAsync(\n  config: SplashScreenConfig | null,\n  theme: 'dark' | 'light',\n  projectRoot: string\n) {\n  if (!config) return;\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'].map(async imageKey => {\n      // @ts-ignore\n      const image = config[imageKey];\n      if (image) {\n        return copyDrawableFileAsync(\n          path.join(projectRoot, image),\n          path.join(\n            androidMainPath,\n            // @ts-ignore\n            DRAWABLES_CONFIGS[imageKey].modes[theme].path\n          )\n        );\n      }\n      return null;\n    })\n  );\n}\n\n/**\n * @param srcPath Absolute path\n * @param dstPath Absolute path\n */\nasync function copyDrawableFileAsync(srcPath: string | undefined, dstPath: string) {\n  if (!srcPath) {\n    return;\n  }\n  const folder = path.dirname(dstPath);\n  await fs.ensureDir(folder);\n  await fs.copyFile(srcPath, path.resolve(dstPath));\n}\n"]}