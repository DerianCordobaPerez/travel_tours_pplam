{"version":3,"file":"withIosSplashXcodeProject.js","sourceRoot":"","sources":["../../../../src/plugins/unversioned/expo-splash-screen/withIosSplashXcodeProject.ts"],"names":[],"mappings":"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","sourcesContent":["import { ConfigPlugin, IOSConfig, withXcodeProject } from '@expo/config-plugins';\nimport Debug from 'debug';\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport {\n  applyImageToSplashScreenXML,\n  createTemplateSplashScreenAsync,\n  ImageContentMode,\n  toString,\n} from './InterfaceBuilder';\nimport { IOSSplashConfig } from './getIosSplashConfig';\n\nconst debug = Debug('expo:prebuild-config:expo-splash-screen:ios:xcodeproj');\n\nconst STORYBOARD_FILE_PATH = './SplashScreen.storyboard';\n\nexport const withIosSplashXcodeProject: ConfigPlugin<IOSSplashConfig> = (config, splash) => {\n  return withXcodeProject(config, async config => {\n    const projectPath = IOSConfig.Paths.getSourceRoot(config.modRequest.projectRoot);\n    config.modResults = await setSplashStoryboardAsync(\n      { projectPath, projectName: config.modRequest.projectName!, project: config.modResults },\n      splash\n    );\n    return config;\n  });\n};\n\n/**\n * Modifies `.pbxproj` by:\n * - adding reference for `.storyboard` file\n */\nfunction updatePbxProject({\n  projectName,\n  project,\n}: {\n  projectName: string;\n  project: XcodeProject;\n}): void {\n  // Check if `${projectName}/SplashScreen.storyboard` already exists\n  // Path relative to `ios` directory\n  const storyboardFilePath = path.join(projectName, STORYBOARD_FILE_PATH);\n  if (!project.hasFile(storyboardFilePath)) {\n    debug(`Adding ${storyboardFilePath} to Xcode project`);\n    IOSConfig.XcodeUtils.addResourceFileToGroup({\n      filepath: storyboardFilePath,\n      groupName: projectName,\n      project,\n    });\n  }\n}\n\nfunction getImageContentMode(resizeMode: string): ImageContentMode {\n  switch (resizeMode) {\n    case 'contain':\n      return 'scaleAspectFit';\n    case 'cover':\n      return 'scaleAspectFill';\n    default:\n      throw new Error(`{ resizeMode: \"${resizeMode}\" } is not supported for iOS platform.`);\n  }\n}\n\n/**\n * Creates [STORYBOARD] file containing ui description of Splash/Launch Screen.\n */\nexport async function getSplashStoryboardContentsAsync(\n  config?: Partial<Pick<IOSSplashConfig, 'image' | 'resizeMode'>>\n): Promise<string> {\n  const resizeMode = config?.resizeMode;\n  const splashScreenImagePresent = Boolean(config?.image);\n\n  let xml = await createTemplateSplashScreenAsync();\n\n  // Only get the resize mode when the image is present.\n  if (splashScreenImagePresent) {\n    const contentMode = getImageContentMode(resizeMode || 'contain');\n    xml = applyImageToSplashScreenXML(xml, {\n      contentMode,\n      imageName: 'SplashScreen',\n    });\n  }\n\n  return toString(xml);\n}\n\nexport async function setSplashStoryboardAsync(\n  {\n    projectPath,\n    projectName,\n    project,\n  }: { projectPath: string; projectName: string; project: XcodeProject },\n  config?: Partial<Pick<IOSSplashConfig, 'image' | 'resizeMode'>>\n): Promise<XcodeProject> {\n  const contents = await getSplashStoryboardContentsAsync(config);\n\n  const filePath = path.resolve(projectPath, STORYBOARD_FILE_PATH);\n  await fs.ensureDir(projectPath);\n  await fs.writeFile(filePath, contents);\n\n  await updatePbxProject({ projectName, project });\n  return project;\n}\n"]}