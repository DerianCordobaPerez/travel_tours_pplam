{"version":3,"file":"withAndroidSplashDrawables.js","sourceRoot":"","sources":["../../../../src/plugins/unversioned/expo-splash-screen/withAndroidSplashDrawables.ts"],"names":[],"mappings":";;;AAAA,yDAA0F;AAInF,MAAM,0BAA0B,GAAyD,CAC9F,MAAM,EACN,MAAM,EACN,EAAE;IACF,OAAO,iCAAgB,CAAC,MAAM,EAAE;QAC9B,SAAS;QACT,KAAK,EAAC,MAAM,EAAC,EAAE;YACb,IAAI,MAAM,EAAE;gBACV,MAAM,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;aACrE;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAbW,QAAA,0BAA0B,8BAarC;AAEK,KAAK,UAAU,sBAAsB,CAC1C,EAAE,UAAU,EAA0C,EACtD,WAAmB;IAEnB,MAAM,QAAQ,GAAG,CAAC,MAAM,8BAAa,CAAC,KAAK,CAAC,uBAAuB,CAAC,WAAW,EAAE;QAC/E,IAAI,EAAE,cAAc;QACpB,IAAI,EAAE,UAAU;KACjB,CAAC,CAAE,CAAC;IAEL,iDAAiD;IACjD,MAAM,UAAU,GAAG;QACjB,YAAY,EAAE;YACZ,CAAC,EAAE;gBACD,eAAe,EAAE,4CAA4C;aAC9D;YACD,IAAI,EAAE;gBACJ;oBACE,CAAC,EAAE;wBACD,gDAAgD;wBAChD,kBAAkB,EAAE,gCAAgC;qBACrD;iBACF;gBACD,yDAAyD;gBACzD,UAAU,KAAK,QAAQ,IAAI;oBACzB,MAAM,EAAE;wBACN;4BACE,CAAC,EAAE;gCACD,iBAAiB,EAAE,QAAQ;gCAC3B,gDAAgD;gCAChD,aAAa,EAAE,8BAA8B;6BAC9C;yBACF;qBACF;iBACF;aACF,CAAC,MAAM,CAAC,OAAO,CAAC;SAClB;KACF,CAAC;IACF,MAAM,oBAAG,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;AAC/D,CAAC;AAtCD,wDAsCC","sourcesContent":["import { AndroidConfig, ConfigPlugin, withDangerousMod, XML } from '@expo/config-plugins';\n\nimport { SplashScreenConfig } from './getAndroidSplashConfig';\n\nexport const withAndroidSplashDrawables: ConfigPlugin<Pick<SplashScreenConfig, 'resizeMode'>> = (\n  config,\n  splash\n) => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      if (splash) {\n        await setSplashDrawableAsync(splash, config.modRequest.projectRoot);\n      }\n      return config;\n    },\n  ]);\n};\n\nexport async function setSplashDrawableAsync(\n  { resizeMode }: Pick<SplashScreenConfig, 'resizeMode'>,\n  projectRoot: string\n) {\n  const filePath = (await AndroidConfig.Paths.getResourceXMLPathAsync(projectRoot, {\n    name: 'splashscreen',\n    kind: 'drawable',\n  }))!;\n\n  // Nuke and rewrite the splashscreen.xml drawable\n  const xmlContent = {\n    'layer-list': {\n      $: {\n        'xmlns:android': 'http://schemas.android.com/apk/res/android',\n      },\n      item: [\n        {\n          $: {\n            // TODO: Ensure these keys don't get out of sync\n            'android:drawable': '@color/splashscreen_background',\n          },\n        },\n        // Only include the image if resizeMode native is in-use.\n        resizeMode === 'native' && {\n          bitmap: [\n            {\n              $: {\n                'android:gravity': 'center',\n                // TODO: Ensure these keys don't get out of sync\n                'android:src': '@drawable/splashscreen_image',\n              },\n            },\n          ],\n        },\n      ].filter(Boolean),\n    },\n  };\n  await XML.writeXMLAsync({ path: filePath, xml: xmlContent });\n}\n"]}