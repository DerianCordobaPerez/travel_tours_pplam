{"version":3,"file":"withAndroidNotifications.js","sourceRoot":"","sources":["../../../../src/plugins/unversioned/expo-notifications/withAndroidNotifications.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withAndroidManifest,\n  withDangerousMod,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ANDROID_RES_PATH, dpiValues } from '../../icons/withAndroidIcons';\n\nconst { Colors } = AndroidConfig;\nconst {\n  addMetaDataItemToMainApplication,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} = AndroidConfig.Manifest;\n\ntype AndroidManifest = AndroidConfig.Manifest.AndroidManifest;\nconst BASELINE_PIXEL_SIZE = 24;\nexport const META_DATA_NOTIFICATION_ICON = 'expo.modules.notifications.default_notification_icon';\nexport const META_DATA_NOTIFICATION_ICON_COLOR =\n  'expo.modules.notifications.default_notification_color';\nexport const NOTIFICATION_ICON = 'notification_icon';\nexport const NOTIFICATION_ICON_RESOURCE = `@drawable/${NOTIFICATION_ICON}`;\nexport const NOTIFICATION_ICON_COLOR = 'notification_icon_color';\nexport const NOTIFICATION_ICON_COLOR_RESOURCE = `@color/${NOTIFICATION_ICON_COLOR}`;\n\nexport const withNotificationIcons: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setNotificationIconAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport const withNotificationIconColor: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setNotificationIconColor(config, config.modResults);\n    return config;\n  });\n};\n\nexport const withNotificationManifest: ConfigPlugin = config => {\n  return withAndroidManifest(config, config => {\n    config.modResults = setNotificationConfig(config, config.modResults);\n    return config;\n  });\n};\n\nexport function getNotificationIcon(config: ExpoConfig) {\n  return config.notification?.icon || null;\n}\n\nexport function getNotificationColor(config: ExpoConfig) {\n  return config.notification?.color || null;\n}\n\n/**\n * Applies configuration for expo-notifications, including\n * the notification icon and notification color.\n */\nexport async function setNotificationIconAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getNotificationIcon(config);\n  if (icon) {\n    await writeNotificationIconImageFilesAsync(icon, projectRoot);\n  } else {\n    await removeNotificationIconImageFilesAsync(projectRoot);\n  }\n}\n\nexport function setNotificationConfig(config: ExpoConfig, manifest: AndroidManifest) {\n  const icon = getNotificationIcon(config);\n  const color = getNotificationColor(config);\n  const mainApplication = getMainApplicationOrThrow(manifest);\n  if (icon) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON,\n      NOTIFICATION_ICON_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON);\n  }\n  if (color) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON_COLOR,\n      NOTIFICATION_ICON_COLOR_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON_COLOR);\n  }\n  return manifest;\n}\n\nexport function setNotificationIconColor(\n  config: ExpoConfig,\n  colors: AndroidConfig.Resources.ResourceXML\n) {\n  return Colors.assignColorValue(colors, {\n    name: NOTIFICATION_ICON_COLOR,\n    value: getNotificationColor(config),\n  });\n}\n\nasync function writeNotificationIconImageFilesAsync(icon: string, projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.ensureDir(dpiFolderPath);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const resizedIcon = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-notification' },\n            {\n              src: icon,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'), resizedIcon);\n      } catch (e) {\n        throw new Error('Encountered an issue resizing Android notification icon: ' + e);\n      }\n    })\n  );\n}\n\nasync function removeNotificationIconImageFilesAsync(projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.remove(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'));\n    })\n  );\n}\n"]}