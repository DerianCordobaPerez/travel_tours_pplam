import { ITheme } from './../theme';
export declare function extendTheme<T extends ITheme | Record<string, any>>(overrides: T): {
    components: {
        Progress: {
            baseStyle: (props: Record<string, any>) => {
                innerBg: any;
                bg: any;
            };
            defaultProps: {
                colorScheme: string;
                size: string;
                rounded: string;
                min: number;
                max: number;
                value: number;
                isIndeterminate: boolean;
            };
            sizes: {
                xs: {
                    height: number;
                };
                sm: {
                    height: number;
                };
                md: {
                    height: number;
                };
                lg: {
                    height: number;
                };
                xl: {
                    height: number;
                };
                '2xl': {
                    height: number;
                };
            };
        };
        Radio: {
            baseStyle: (props: Record<string, any>) => {
                _text: {
                    ml: number;
                };
                _interactionBox: {
                    position: string;
                    zIndex: number;
                    borderRadius: string;
                    _hover: {
                        bg: string;
                    };
                    _focus: {
                        bg: string;
                    };
                    _disabled: {
                        bg: string;
                    };
                    _pressed: {
                        bg: string;
                    };
                };
                _radio: {
                    borderWidth: number;
                    borderRadius: string;
                    p: string;
                    borderColor: any;
                    bg: any;
                    _checked: {
                        borderColor: any;
                    };
                    _disabled: {
                        opacity: number;
                    };
                    _invalid: {
                        borderColor: any;
                    };
                };
                _icon: {
                    color: any;
                    _disabled: {
                        bg: string;
                    };
                };
            };
            sizes: {
                lg: {
                    _icon: {
                        size: number;
                    };
                    _text: {
                        fontSize: string;
                    };
                };
                md: {
                    _icon: {
                        size: number;
                    };
                    _text: {
                        fontSize: string;
                    };
                };
                sm: {
                    _icon: {
                        size: number;
                    };
                    _text: {
                        fontSize: string;
                    };
                };
            };
            defaultProps: {
                defaultIsChecked: boolean;
                size: string;
                colorScheme: string;
            };
        };
        ScaleFade: {
            defaultProps: {
                duration: number;
                initialScale: number;
            };
        };
        Select: {
            baseStyle: {
                customDropdownIconProps: {
                    size: number;
                    mr: number;
                };
                _actionSheetContent: {};
            };
            defaultProps: {
                variant: string;
            };
        };
        SelectItem: {
            baseStyle: {
                p: number;
                px: number;
                borderRadius: number;
                minH: number;
            };
        };
        SimpleGrid: {
            baseStyle: {};
            defaultProps: {};
        };
        Skeleton: {
            baseStyle: (props: Record<string, any>) => {
                skeletonColor: any;
                baseColor: any;
            };
            defaultProps: {
                variant: string;
            };
        };
        SliderFilledTrack: {
            baseStyle: (props: any) => {
                bg: any;
            };
        };
        SliderThumb: {
            baseStyle: (props: any) => {
                borderRadius: number;
                zIndex: number;
                bg: any;
                scaleOnPressed: number;
            };
        };
        SliderTrack: {
            baseStyle: (props: any) => {
                bg: string;
                borderRadius: string;
                overflow: string;
            };
        };
        Slider: {
            defaultProps: {
                size: string;
            };
            sizes: {
                lg: {
                    thumbSize: number;
                    sliderSize: number;
                };
                md: {
                    thumbSize: number;
                    sliderSize: number;
                };
                sm: {
                    thumbSize: number;
                    sliderSize: number;
                };
            };
        };
        Slide: {
            defaultProps: {
                duration: number;
                placement: string;
            };
        };
        SlideFade: {
            defaultProps: {
                duration: number;
                offsetX: number;
                offsetY: number;
            };
        };
        Spinner: {
            baseStyle: {
                color: string;
            };
            sizes: {
                sm: string;
                lg: string;
            };
            defaultProps: {
                size: string;
            };
        };
        Stack: {
            baseStyle: {};
            defaultProps: {};
            sizes: {
                gutter: number;
                '2xs': number;
                xs: number;
                sm: number;
                md: number;
                lg: number;
                xl: number;
                '2xl': number;
            };
        };
        Stat: {
            defaultProps: {
                _statLabel: {
                    fontSize: string;
                };
                _statNumber: {
                    fontSize: string;
                    fontWeight: string;
                    my: number;
                };
                _statHelpText: {
                    _text: {
                        color: string;
                        fontSize: string;
                    };
                    flexDirection: string;
                    alignItems: string;
                };
                _statGroup: {
                    flexWrap: string;
                    space: number;
                    justifyContent: string;
                };
            };
        };
        Switch: {
            baseStyle: (props: Record<string, any>) => {
                offTrackColor: any;
                onTrackColor: any;
                onThumbColor: any;
                offThumbColor: any;
            };
            sizes: {
                sm: {
                    style: {
                        transform: {
                            scale: number;
                        }[];
                    };
                };
                md: {};
                lg: {
                    style: {
                        transform: {
                            scale: number;
                        }[];
                    };
                    margin: number;
                };
            };
            defaultProps: {
                size: string;
                colorScheme: string;
            };
        };
        Tabs: {
            baseStyle: (props: Record<string, any>) => {
                activeTabStyle: {
                    justifyContent: string;
                    alignItems: string;
                    mb: string;
                    flexDirection: string;
                    _text: {
                        fontSize: string;
                        fontWeight: string;
                    };
                };
                inactiveTabStyle: {
                    justifyContent: string;
                    alignItems: string;
                    mb: string;
                    flexDirection: string;
                    _text: {
                        color: any;
                        fontSize: string;
                        fontWeight: string;
                    };
                };
                activeIconProps: {
                    color: any;
                    name: string;
                    mx: number;
                };
                inactiveIconProps: {
                    name: string;
                    mx: number;
                };
            };
            variants: {
                outline: (props: Record<string, any>) => {
                    activeTabStyle: {
                        borderColor: any;
                        _text: {
                            color: any;
                        };
                        _hover: {
                            bg: any;
                        };
                        borderBottomWidth: number;
                    };
                    inactiveTabStyle: {
                        borderColor: string;
                        borderBottomWidth: number;
                        _hover: {
                            bg: any;
                        };
                    };
                    tabBarStyle: {
                        borderBottomWidth: number;
                        borderColor: any;
                    };
                };
                filled: (props: Record<string, any>) => {
                    activeTabStyle: {
                        borderColor: any;
                        _text: {
                            color: any;
                        };
                        _hover: {
                            bg: any;
                        };
                        borderBottomWidth: number;
                        bg: any;
                    };
                    inactiveTabStyle: {
                        borderColor: string;
                        borderBottomWidth: number;
                        _hover: {
                            bg: any;
                        };
                    };
                    tabBarStyle: {
                        borderBottomWidth: number;
                        borderColor: any;
                    };
                };
                'filled-outline': (props: Record<string, any>) => {
                    activeTabStyle: {
                        borderColor: any;
                        _text: {
                            color: any;
                        };
                        _hover: {
                            bg: any;
                        };
                        borderBottomWidth: number;
                    };
                    inactiveTabStyle: {
                        borderColor: string;
                        borderBottomWidth: number;
                        _hover: {
                            bg: any;
                        };
                    };
                    tabBarStyle: {
                        borderBottomWidth: number;
                        borderColor: any;
                        bg: any;
                    };
                };
            };
            sizes: {
                sm: {
                    activeTabStyle: {
                        _text: {
                            fontSize: string;
                        };
                        py: number;
                        px: number;
                    };
                    inactiveTabStyle: {
                        _text: {
                            fontSize: string;
                        };
                        py: number;
                        px: number;
                    };
                };
                md: {
                    activeTabStyle: {
                        _text: {
                            fontSize: string;
                        };
                        py: number;
                        px: number;
                    };
                    inactiveTabStyle: {
                        _text: {
                            fontSize: string;
                        };
                        py: number;
                        px: number;
                    };
                };
                lg: {
                    activeTabStyle: {
                        _text: {
                            fontSize: string;
                        };
                        py: number;
                        px: number;
                    };
                    inactiveTabStyle: {
                        _text: {
                            fontSize: string;
                        };
                        py: number;
                        px: number;
                    };
                };
            };
            defaultProps: {
                size: string;
                variant: string;
                colorScheme: string;
            };
        };
        Tag: {
            variants: {
                solid: (props: Record<string, any>) => {
                    bg: any;
                    borderWidth: number;
                    borderColor: string;
                };
                subtle: (props: Record<string, any>) => {
                    bg: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                    borderColor: string;
                };
                outline: (props: Record<string, any>) => {
                    borderColor: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                };
            };
            baseStyle: {
                _text: {
                    fontWeight: string;
                };
                alignItems: string;
                justifyContent: string;
                flexDirection: string;
                display: string;
            };
            sizes: {
                sm: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    p: number;
                    borderRadius: string;
                };
                md: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    borderRadius: string;
                    p: number;
                };
                lg: {
                    minH: number;
                    minW: number;
                    _text: {
                        fontSize: string;
                    };
                    borderRadius: string;
                    p: number;
                };
            };
            defaultProps: {
                size: string;
                variant: string;
                colorScheme: string;
            };
        };
        Text: {
            baseStyle: (props: Record<string, any>) => {
                color: any;
                fontWeight: number;
                fontFamily: string;
                fontStyle: string;
            };
            defaultProps: {};
        };
        AppBar: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                px: number;
            };
            defaultProps: {
                colorScheme: string;
            };
        };
        TextArea: {
            baseStyle: {
                multiline: boolean;
                px: number;
                py: number;
                totalLines: number;
                _ios: {
                    h: number;
                };
            };
        };
        TextField: {
            baseStyle: (props: Record<string, any>) => {
                _errorMessageProps: {
                    mt: number;
                    ml: number;
                    fontSize: string;
                    color: string;
                };
                _helperTextProps: {
                    mt: number;
                    ml: number;
                    fontSize: string;
                    color: any;
                };
            };
            defaultProps: {
                component: string;
            };
        };
        Toast: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                py: number;
                px: number;
                rounded: string;
                shadow: number;
                _title: {
                    color: any;
                    fontWeight: number;
                };
                _description: {
                    color: any;
                    fontWeight: number;
                };
                _closeIcon: {
                    size: number;
                };
            };
            defaultProps: {};
        };
        TypeAheadSearchItem: {
            baseStyle: (props: Record<string, any>) => {
                backgroundColor: any;
                _focus: {
                    backgroundColor: any;
                };
                _disabled: {
                    backgroundColor: string;
                };
            };
        };
        View: {
            baseStyle: {};
            defaultProps: {};
        };
        Wrap: {};
        ZStack: {
            baseStyle: {};
            defaultProps: {};
        };
        Tooltip: {
            baseStyle: (props: any) => {
                bg: any;
                py: number;
                px: number;
                rounded: string;
                shadow: number;
                _text: {
                    color: any;
                    fontSize: string;
                };
            };
        };
        PopoverCloseButton: {
            baseStyle: (props: any) => {
                size: string;
                p: number;
                mt: string;
                _icon: {
                    size: number;
                    color: any;
                };
            };
        };
        PopoverBody: {
            baseStyle: (props: any) => {
                p: number;
                borderColor: any;
                borderTopWidth: number;
            };
        };
        PopoverContent: {
            baseStyle: (props: any) => {
                backgroundColor: any;
                borderColor: any;
                borderWidth: number;
                rounded: string;
            };
        };
        PopoverHeader: {
            baseStyle: {
                p: number;
                _text: {
                    fontWeight: number;
                };
            };
        };
        PopoverArrow: {
            baseStyle: (props: any) => {
                borderColor: any;
            };
        };
        PopoverFooter: {
            baseStyle: (props: any) => {
                p: number;
                borderTopWidth: number;
                borderColor: any;
                flexDirection: string;
                flexWrap: string;
            };
        };
        FlatList: {
            baseStyle: {};
            defaultProps: {};
        };
        KeyboardAvoidingView: {
            baseStyle: {};
            defaultProps: {};
        };
        ScrollView: {
            baseStyle: {};
            defaultProps: {};
        };
        SectionList: {
            baseStyle: {};
            defaultProps: {};
        };
        StatusBar: {
            baseStyle: {};
            defaultProps: {};
        };
        Accordion: {
            baseStyle: (props: Record<string, any>) => {
                borderWidth: number;
                borderColor: any;
                borderRadius: string;
            };
        };
        AccordionItem: {};
        AccordionIcon: {};
        AccordionSummary: {
            baseStyle: (props: Record<string, any>) => {
                borderTopWidth: number;
                borderTopColor: any;
                p: number;
                _hover: {
                    bg: any;
                };
                _expanded: {
                    bg: string;
                    borderBottomColor: any;
                    _text: {
                        color: string;
                    };
                };
                _disabled: {
                    bg: any;
                };
            };
        };
        AccordionDetails: {
            baseStyle: {
                p: number;
            };
        };
        Actionsheet: {
            defaultProps: {
                size: string;
            };
        };
        ActionsheetContent: {
            baseStyle: {
                alignItems: string;
                p: number;
                borderRadius: string;
                roundedTop: number;
                _dragIndicator: {
                    bg: string;
                    height: number;
                    width: number;
                    borderRadius: number;
                };
            };
        };
        ActionsheetItem: {
            baseStyle: (props: any) => {
                width: string;
                justifyContent: string;
                px: number;
                _pressed: {
                    bg: any;
                };
                _hover: {
                    bg: any;
                };
            };
            defaultProps: {
                variant: string;
            };
        };
        Alert: {
            baseStyle: {
                alignItems: string;
                justifyContent: string;
                p: number;
                space: number;
                borderRadius: string;
                _actionProps: {
                    alignSelf: string;
                    ml: string;
                };
                _text: {
                    fontSize: string;
                    lineHeight: number;
                    color: string;
                };
            };
            variants: {
                subtle: (props: Record<string, any>) => {
                    bg: any;
                    iconColor: any;
                };
                solid: (props: Record<string, any>) => {
                    borderWidth: number;
                    borderColor: string;
                    bg: any;
                    iconColor: any;
                    textColor: any;
                };
                'left-accent': (props: Record<string, any>) => {
                    borderWidth: number;
                    bg: any;
                    iconColor: any;
                    textColor: any;
                    borderColor: string;
                    borderLeftColor: any;
                };
                'top-accent': (props: Record<string, any>) => {
                    borderWidth: number;
                    borderColor: string;
                    borderTopColor: any;
                    bg: any;
                    iconColor: any;
                    textColor: any;
                };
                outline: (props: Record<string, any>) => {
                    borderWidth: number;
                    borderColor: any;
                    iconColor: any;
                    textColor: any;
                };
                'outline-light': (props: Record<string, any>) => {
                    borderWidth: number;
                    borderColor: string;
                    iconColor: any;
                    textColor: any;
                };
            };
            defaultProps: {
                colorScheme: string;
                variant: string;
            };
        };
        AlertDescription: {
            baseStyle: {
                _text: {
                    fontSize: string;
                };
                flexShrink: number;
            };
        };
        AlertTitle: {
            baseStyle: {
                _text: {
                    fontSize: string;
                    lineHeight: number;
                    fontWeight: string;
                };
            };
        };
        AlertIcon: {
            baseStyle: {
                size: number;
            };
        };
        Avatar: {
            baseStyle: (props: Record<string, any>) => {
                bg: string;
                borderColor: any;
                position: string;
                justifyContent: string;
                alignItems: string;
                borderRadius: string;
                _text: {
                    fontWeight: number;
                };
            };
            sizes: {
                '2xs': {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                xs: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                sm: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                md: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                lg: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                xl: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                '2xl': {
                    width: any;
                    height: any;
                    fontSize: string;
                };
                full: {
                    width: any;
                    height: any;
                    fontSize: string;
                };
            };
            defaultProps: {
                size: string;
            };
        };
        AvatarBadge: {
            baseStyle: (props: Record<string, any>) => {
                borderRadius: string;
                borderWidth: number;
                borderColor: any;
                bg: any;
            };
        };
        AvatarGroup: {
            baseStyle: (props: Record<string, any>) => {
                borderWidth: number;
                borderColor: any;
                bg: any;
                space: number;
            };
        };
        Badge: {
            baseStyle: {
                px: number;
                _text: {
                    fontSize: string;
                    fontWeight: string;
                };
            };
            variants: {
                solid: (props: Record<string, any>) => {
                    bg: any;
                    borderWidth: number;
                    borderColor: string;
                };
                subtle: (props: Record<string, any>) => {
                    bg: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                    borderColor: string;
                };
                outline: (props: Record<string, any>) => {
                    borderColor: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                };
            };
            defaultProps: {
                variant: string;
                colorScheme: string;
            };
        };
        Box: {
            baseStyle: {};
            defaultProps: {};
        };
        Breadcrumb: {
            baseStyle: {
                width: string;
                height: string;
                display: string;
                flexDirection: string;
            };
            defaultProps: {
                direction: string;
                wrap: string;
            };
        };
        Button: {
            baseStyle: (props: any) => {
                borderRadius: string;
                flexDirection: string;
                justifyContent: string;
                alignItems: string;
                _web: {
                    cursor: string;
                };
                _text: {
                    fontWeight: number;
                };
                _focusVisible: {
                    style: {
                        boxShadow: string;
                    } | {
                        boxShadow?: undefined;
                    };
                };
                _stack: {
                    space: number;
                    alignItems: string;
                };
                _disabled: {
                    opacity: number;
                };
            };
            variants: {
                ghost: (props: Record<string, any>) => {
                    _text: {
                        color: any;
                    };
                    bg?: undefined;
                    _web?: undefined;
                    _hover?: undefined;
                    _focusVisible?: undefined;
                    _pressed?: undefined;
                } | {
                    _text: {
                        color: any;
                    };
                    bg: string;
                    _web: {
                        outlineWidth: number;
                    };
                    _hover: {
                        bg: string;
                    };
                    _focusVisible: {
                        bg: string;
                    };
                    _pressed: {
                        bg: string;
                    };
                };
                outline: (props: Record<string, any>) => {
                    _text: {
                        color: any;
                    };
                    bg?: undefined;
                    _web?: undefined;
                    _hover?: undefined;
                    _focusVisible?: undefined;
                    _pressed?: undefined;
                    border: string;
                    borderColor: any;
                } | {
                    _text: {
                        color: any;
                    };
                    bg: string;
                    _web: {
                        outlineWidth: number;
                    };
                    _hover: {
                        bg: string;
                    };
                    _focusVisible: {
                        bg: string;
                    };
                    _pressed: {
                        bg: string;
                    };
                    border: string;
                    borderColor: any;
                };
                solid: (props: Record<string, any>) => {
                    _web: {
                        outlineWidth: number;
                    };
                    bg: string;
                    _hover: {
                        bg: any;
                    };
                    _pressed: {
                        bg: any;
                    };
                };
                link: (props: Record<string, any>) => {
                    _text: {
                        color: any;
                    };
                    _hover: {
                        _text: {
                            textDecorationLine: string;
                        };
                    };
                    _ios: {
                        _text: {
                            textDecorationLine: string;
                        };
                    };
                    _android: {
                        _text: {
                            textDecorationLine: string;
                        };
                    };
                    bg?: undefined;
                    _web?: undefined;
                    _focusVisible?: undefined;
                    _pressed?: undefined;
                } | {
                    _text: {
                        color: any;
                    };
                    _hover: {
                        _text: {
                            textDecorationLine: string;
                        };
                    };
                    _ios: {
                        _text: {
                            textDecorationLine: string;
                        };
                    };
                    _android: {
                        _text: {
                            textDecorationLine: string;
                        };
                    };
                    bg: string;
                    _web: {
                        outlineWidth: number;
                    };
                    _focusVisible: {
                        bg: string;
                    };
                    _pressed: {
                        bg: string;
                    };
                };
                unstyled: () => {};
            };
            sizes: {
                lg: {
                    px: number;
                    py: number;
                    _text: {
                        fontSize: string;
                    };
                };
                md: {
                    px: number;
                    py: number;
                    _text: {
                        fontSize: string;
                    };
                };
                sm: {
                    px: number;
                    py: number;
                    _text: {
                        fontSize: string;
                    };
                };
                xs: {
                    px: number;
                    py: number;
                    _text: {
                        fontSize: string;
                    };
                };
            };
            defaultProps: {
                variant: string;
                size: string;
                colorScheme: string;
            };
        };
        ButtonGroup: {
            baseStyle: {
                direction: string;
            };
            defaultProps: {
                space: number;
            };
        };
        Center: {
            sizes: {
                xs: {
                    height: number;
                    width: number;
                };
                sm: {
                    height: number;
                    width: number;
                };
                md: {
                    height: number;
                    width: number;
                };
                lg: {
                    height: number;
                    width: number;
                };
                xl: {
                    height: number;
                    width: number;
                };
                '2xl': {
                    height: number;
                    width: number;
                };
            };
        };
        Checkbox: {
            baseStyle: (props: Record<string, any>) => {
                _text: {
                    ml: number;
                };
                _interactionBox: {
                    position: string;
                    borderRadius: string;
                    _hover: {
                        bg: string;
                    };
                    _focus: {
                        bg: string;
                    };
                    _disabled: {
                        bg: string;
                    };
                    _pressed: {
                        bg: string;
                    };
                };
                _checkbox: {
                    borderWidth: number;
                    borderRadius: string;
                    borderColor: any;
                    bg: any;
                    _checked: {
                        borderColor: any;
                        bg: any;
                    };
                    _disabled: {
                        opacity: number;
                    };
                    _invalid: {
                        borderColor: any;
                    };
                };
                _icon: {
                    color: any;
                };
            };
            sizes: {
                lg: {
                    _icon: {
                        size: number;
                    };
                    _text: {
                        fontSize: string;
                    };
                };
                md: {
                    _icon: {
                        size: number;
                    };
                    _text: {
                        fontSize: string;
                    };
                };
                sm: {
                    _icon: {
                        size: number;
                    };
                    _text: {
                        fontSize: string;
                    };
                };
            };
            defaultProps: {
                defaultIsChecked: boolean;
                size: string;
                colorScheme: string;
            };
        };
        CircularProgress: {
            baseStyle: (props: Record<string, any>) => {
                color: any;
                trackColor: any;
            };
            sizes: {
                xs: {
                    height: number;
                    width: number;
                };
                sm: {
                    height: number;
                    width: number;
                };
                md: {
                    height: number;
                    width: number;
                };
                lg: {
                    height: number;
                    width: number;
                };
                xl: {
                    height: number;
                    width: number;
                };
                '2xl': {
                    height: number;
                    width: number;
                };
            };
            defaultProps: {
                thickness: number;
                colorScheme: string;
                size: string;
            };
        };
        Code: {
            baseStyle: {
                _text: {
                    fontFamily: string;
                    fontSize: string;
                };
                borderRadius: string;
                px: number;
                py: number;
            };
            variants: {
                solid: (props: Record<string, any>) => {
                    bg: any;
                    borderWidth: number;
                    borderColor: string;
                };
                subtle: (props: Record<string, any>) => {
                    bg: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                    borderColor: string;
                };
                outline: (props: Record<string, any>) => {
                    borderColor: any;
                    _text: {
                        color: any;
                    };
                    borderWidth: number;
                };
            };
            defaultProps: {
                variant: string;
                colorScheme: string;
            };
        };
        Container: {
            baseStyle: {
                maxWidth: string;
            };
        };
        Divider: {
            baseStyle: (props: Record<string, any>) => {
                width: string;
                height: string;
                bg: any;
            };
            defaultProps: {
                orientation: string;
                size: number;
            };
        };
        Fade: {
            defaultProps: {
                entryDuration: number;
                exitDuration: number;
            };
        };
        FAB: {
            baseStyle: {
                shadow: number;
            };
            defaultProps: {
                variant: string;
                colorScheme: string;
                rounded: string;
                zIndex: number;
                placementProps: any;
                p: number;
                placement: string;
            };
        };
        Flex: {
            defaultProps: {
                flexDirection: string;
            };
        };
        FormControl: {};
        FormControlLabel: {
            baseStyle: {
                _text: {
                    fontSize: string;
                };
                astrickColor: string;
                mb: number;
                mr: number;
            };
        };
        FormControlHelperText: {
            baseStyle: (props: Record<string, any>) => {
                mt: number;
                _text: {
                    fontSize: string;
                    color: any;
                };
            };
        };
        FormControlErrorMessage: {
            baseStyle: {
                mt: number;
                _text: {
                    fontSize: string;
                    color: string;
                };
            };
        };
        Heading: {
            baseStyle: (props: Record<string, any>) => {
                color: any;
                fontWeight: string;
                fontFamily: string;
            };
            sizes: {
                '4xl': {
                    fontSize: (string | null)[];
                };
                '3xl': {
                    fontSize: (string | null)[];
                };
                '2xl': {
                    fontSize: (string | null)[];
                };
                xl: {
                    fontSize: (string | null)[];
                };
                lg: {
                    fontSize: (string | null)[];
                };
                md: {
                    fontSize: string;
                };
                sm: {
                    fontSize: string;
                };
                xs: {
                    fontSize: string;
                };
            };
            defaultProps: {
                size: string;
            };
        };
        HStack: {
            baseStyle: {};
            defaultProps: {};
        };
        VStack: {
            baseStyle: {};
            defaultProps: {};
        };
        Icon: {
            baseStyle: (props: Record<string, any>) => {
                color: any;
            };
            sizes: {
                xxs: number;
                xs: number;
                sm: number;
                md: number;
                lg: number;
                xl: number;
                '2xl': number;
                '3xl': number;
                '4xl': number;
                '5xl': number;
                '6xl': number;
            };
            defaultProps: {
                size: string;
                color: string;
            };
        };
        IconButton: {
            baseStyle: {
                borderRadius: string;
            };
            sizes: {
                lg: {
                    p: number;
                };
                md: {
                    p: number;
                };
                sm: {
                    p: number;
                };
            };
            defaultProps: {
                variant: string;
                size: string;
            };
        };
        Image: {
            baseStyle: {
                maxWidth: string;
            };
            sizes: {
                '2xs': {
                    size: number;
                };
                xs: {
                    size: number;
                };
                sm: {
                    size: number;
                };
                md: {
                    size: number;
                };
                lg: {
                    size: number;
                };
                xl: {
                    size: number;
                };
                '2xl': {
                    size: number;
                };
                full: {
                    size: string;
                };
            };
            defaultProps: {};
        };
        Input: {
            baseStyle: (props: Record<string, any>) => {
                fontFamily: string;
                px: number;
                py: number;
                borderRadius: string;
                color: any;
                placeholderTextColor: any;
                background: string;
                borderColor: any;
                _disabled: {
                    opacity: number;
                    bg: any;
                };
                _hover: {
                    borderColor: any;
                };
                _invalid: {
                    borderColor: any;
                };
                _focus: {
                    style: {
                        boxShadow: string;
                        zIndex: number;
                    } | {
                        boxShadow?: undefined;
                        zIndex?: undefined;
                    };
                    borderColor: string;
                };
                _android: {
                    px: number;
                    py: number;
                    _focus: {
                        borderColor: string;
                    };
                };
                _ios: {
                    px: number;
                    py: number;
                    _focus: {
                        borderColor: string;
                    };
                };
                _web: {
                    outlineWidth: number;
                    lineHeight: number;
                };
            };
            defaultProps: {
                size: string;
                variant: string;
            };
            variants: {
                outline: () => {
                    borderWidth: number;
                };
                underlined: () => {
                    borderRadius: number;
                    borderBottomWidth: number;
                };
                rounded: () => {
                    borderRadius: string;
                    borderWidth: number;
                };
                filled: (props: Record<string, any>) => {
                    bg: any;
                    borderWidth: number;
                    borderColor: string;
                    _hover: {
                        bg: any;
                    };
                };
                unstyled: () => {
                    borderWidth: number;
                };
            };
            sizes: {
                '2xl': {
                    fontSize: string;
                };
                xl: {
                    fontSize: string;
                };
                lg: {
                    fontSize: string;
                };
                md: {
                    fontSize: string;
                };
                sm: {
                    fontSize: string;
                };
                xs: {
                    fontSize: string;
                };
            };
        };
        Kbd: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                borderColor: any;
                borderWidth: number;
                borderBottomWidth: number;
                shadow: number;
                borderRadius: string;
                px: number;
                _text: {
                    fontSize: string;
                    fontWeight: string;
                    fontFamily: string;
                };
            };
            defaultProps: {};
        };
        Link: {
            baseStyle: {
                width: string;
                height: string;
            };
        };
        List: {
            baseStyle: (props: Record<string, any>) => {
                py: number;
                borderWidth: number;
                borderColor: string;
                _hover: {
                    bg: any;
                };
            };
        };
        ListItem: {
            baseStyle: {
                py: number;
                borderColor: string;
            };
            defaultProps: {
                start: number;
            };
        };
        ListIcon: {
            baseStyle: {
                mr: number;
                size: string;
            };
        };
        Menu: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                py: number;
                borderWidth: number;
                borderColor: any;
                shadow: number;
                borderRadius: number;
                transition: {
                    initial: {
                        opacity: number;
                        translateY: number;
                    };
                    animate: {
                        opacity: number;
                        translateY: number;
                        transition: {
                            duration: number;
                        };
                    };
                    exit: {
                        opacity: number;
                        translateY: number;
                        transition: {
                            duration: number;
                        };
                    };
                    style: import("react-native").RegisteredStyle<import("react-native").StyleSheet.AbsoluteFillStyle>;
                };
            };
        };
        MenuGroup: {
            baseStyle: (props: any) => {
                _title: {
                    fontSize: string;
                    fontWeight: number;
                    textTransform: string;
                    color: any;
                };
                p: number;
            };
        };
        MenuItem: {
            baseStyle: (props: any) => {
                p: number;
                outlineWidth: number | undefined;
                _focus: {
                    bg: any;
                };
                _pressed: {
                    bg: any;
                };
                _icon: {
                    size: number;
                    color: any;
                };
            };
            defaultProps: {
                _disabled: {
                    opacity: number;
                };
            };
        };
        Modal: {
            baseStyle: {
                width: string;
                height: string;
                justifyContent: string;
                alignItems: string;
            };
            sizes: {
                sm: {
                    contentSize: {
                        width: string;
                    };
                };
                md: {
                    contentSize: {
                        width: string;
                    };
                };
                lg: {
                    contentSize: {
                        width: string;
                    };
                };
                full: {
                    contentSize: {
                        width: string;
                    };
                };
            };
            defaultProps: {
                size: string;
                closeOnOverlayClick: boolean;
            };
        };
        ModalContent: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                pl: number;
                pt: number;
                shadow: number;
                rounded: string;
                maxHeight: string;
            };
        };
        ModalHeader: {
            baseStyle: {
                pb: number;
                pr: number;
                _text: {
                    fontSize: string;
                    fontWeight: string;
                };
            };
        };
        ModalBody: {
            baseStyle: (props: Record<string, any>) => {
                pb: number;
                pr: number;
                _text: {
                    fontSize: string;
                    color: any;
                };
            };
        };
        ModalFooter: {
            baseStyle: {
                py: number;
                flexDirection: string;
                justifyContent: string;
                flexWrap: string;
                pr: number;
            };
        };
        ModalOverlay: {
            baseStyle: {
                position: string;
                left: number;
                top: number;
                opacity: number;
                right: number;
                bottom: number;
            };
        };
        ModalCloseButton: {
            baseStyle: (props: Record<string, any>) => {
                position: string;
                right: number;
                top: number;
                zIndex: number;
                size: number;
                _icon: {
                    size: number;
                    color: any;
                };
            };
        };
        NumberInput: {
            defaultProps: {
                size: string;
                step: number;
                min: number;
                max: number;
                defaultValue: string;
                keepWithinRange: boolean;
                clampValueOnBlur: boolean;
                focusInputOnChange: boolean;
                getAriaValueText: boolean;
            };
        };
        NumberInputStepper: {
            baseStyle: (props: Record<string, any>) => {
                bg: any;
                iconColor: any;
                _active: {};
                _disabled: {
                    opacity: number;
                };
            };
        };
        PinInput: {
            sizes: {
                '2xl': {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                xl: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                lg: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                md: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                sm: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
                xs: {
                    fontSize: string;
                    p: number;
                    width: string;
                    height: string;
                    textAlign: string;
                    borderRadius: string;
                };
            };
            defaultProps: {
                placeholder: string;
                size: string;
                manageFocus: boolean;
                space: number;
            };
        };
    };
    config: import("./color-mode").ColorModeOptions;
    sizes: {
        container: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        '3xs': string;
        '2xs': string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        16: string;
        20: string;
        24: string;
        32: string;
        40: string;
        48: string;
        56: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        16: string;
        20: string;
        24: string;
        32: string;
        40: string;
        48: string;
        56: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    shadows: () => {
        0: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        1: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        2: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        3: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        4: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        5: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        6: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        7: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        8: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        9: {
            shadowColor: string;
            shadowOffset: {
                width: number;
                height: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
    };
    letterSpacings: {
        xxs: number;
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
        '2xl': number;
        '3xl': number;
        '4xl': number;
        '5xl': number;
    };
    lineHeights: {
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    fonts: {
        heading: undefined;
        body: undefined;
        mono: undefined;
    };
    fontSizes: {
        xxs: number;
        xs: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
        '2xl': number;
        '3xl': number;
        '4xl': number;
        '5xl': number;
        '6xl': number;
        '7xl': number;
        '8xl': number;
        '9xl': number;
    };
    borders: {
        none: number;
        '1px': string;
        '2px': string;
        '4px': string;
    };
    breakpoints: {
        base: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
    };
    colors: {
        contrastThreshold: number;
        white: string;
        black: string;
        lightText: string;
        darkText: string;
        rose: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        pink: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        fuchsia: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        purple: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        violet: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        indigo: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        blue: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        lightBlue: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        darkBlue: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        cyan: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        teal: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        emerald: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        green: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        lime: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        yellow: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        amber: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        orange: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        red: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        warmGray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        trueGray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        gray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        coolGray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        blueGray: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        dark: {
            50: string;
            100: string;
            200: string;
            300: string;
            400: string;
            500: string;
            600: string;
            700: string;
            800: string;
            900: string;
        };
        danger: {};
        error: {};
        success: {};
        warning: {};
        muted: {};
        primary: {};
        info: {};
        secondary: {};
        light: {};
        tertiary: {};
    };
    radii: {
        none: number;
        sm: number;
        md: number;
        lg: number;
        xl: number;
        pill: number;
        full: number;
    };
} & T;
