{"version":3,"sources":["Popover.tsx"],"names":["Popover","ref","onOpen","trigger","onClose","isOpenProp","isOpen","children","defaultIsOpen","initialFocusRef","finalFocusRef","trapFocus","rest","triggerRef","React","useRef","mergedRef","value","defaultValue","onChange","setIsOpen","useState","bodyMounted","setBodyMounted","headerMounted","setHeaderMounted","popoverContentId","headerId","bodyId","handleOpen","useCallback","updatedTrigger","undefined","open","handleClose","opacity","transition","duration","scale","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    trapFocus = true,\n    ...rest\n  }: IPopoverProps,\n  ref: any\n) => {\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n\n  const popoverContentId = `${useId()}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  let updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay isOpen={isOpen} onRequestClose={handleClose} useRNModalOnAndroid>\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...rest}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n"]}