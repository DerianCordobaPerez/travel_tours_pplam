{"version":3,"sources":["PopoverContent.tsx"],"names":["PopoverContent","React","forwardRef","props","ref","useContext","PopoverContext","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","newProps","arrowDefaultColor","bgColor","bg","backgroundColor","color","useEffect","finalFocusRefCurrentVal","current","focus","enabled","callback","arrowElement","restChildren","Children","forEach","children","child","type","displayName","cloneElement","push","accessibilityProps","Platform","OS","undefined"],"mappings":"0PAAA,qCAKA,oDACA,yCAEA,iCACA,gD,4IAEO,GAAMA,CAAAA,cAAc,CAAGC,eAAMC,UAAN,CAC5B,SAACC,KAAD,CAA8BC,GAA9B,CAA2C,qDAUrCH,eAAMI,UAAN,CAAiBC,8BAAjB,CAVqC,CAEvCC,OAFuC,mBAEvCA,OAFuC,CAGvCC,eAHuC,mBAGvCA,eAHuC,CAIvCC,aAJuC,mBAIvCA,aAJuC,CAKvCC,gBALuC,mBAKvCA,gBALuC,CAMvCC,aANuC,mBAMvCA,aANuC,CAOvCC,WAPuC,mBAOvCA,WAPuC,CAQvCC,MARuC,mBAQvCA,MARuC,CASvCC,QATuC,mBASvCA,QATuC,CAWzC,GAAIC,CAAAA,QAAQ,CAAG,8BAAmB,gBAAnB,CAAqCZ,KAArC,CAAf,CAEA,GAAMa,CAAAA,iBAAiB,8BACrBb,KAAK,CAACc,OADe,uBAErBd,KAAK,CAACe,EAFe,cAGrBf,KAAK,CAACgB,eAHe,aAIrBJ,QAAQ,CAACI,eAJX,CAKA,GAAMC,CAAAA,KAAK,CAAG,oBAAS,QAAT,CAAmBJ,iBAAnB,CAAd,CAEAf,eAAMoB,SAAN,CAAgB,UAAM,CACpB,GAAIC,CAAAA,uBAAuB,CAAGb,aAAH,cAAGA,aAAa,CAAEc,OAA7C,CACA,GAAIf,eAAe,EAAIA,eAAe,CAACe,OAAvC,CAAgD,CAC9Cf,eAAe,CAACe,OAAhB,CAAwBC,KAAxB,GACD,CAED,MAAO,WAAM,CACX,GAAIF,uBAAJ,CAA6B,CAC3BA,uBAAuB,CAACE,KAAxB,GACD,CACF,CAJD,CAKD,CAXD,CAWG,CAACf,aAAD,CAAgBD,eAAhB,CAXH,EAaA,kCAAuB,CACrBiB,OAAO,CAAE,IADY,CAErBC,QAAQ,CAAEnB,OAFW,CAAvB,EAKA,GAAIoB,CAAAA,YAAY,CAAG,IAAnB,CACA,GAAIC,CAAAA,YAAiB,CAAG,EAAxB,CACA3B,eAAM4B,QAAN,CAAeC,OAAf,CAAuB3B,KAAK,CAAC4B,QAA7B,CAAuC,SAACC,KAAD,CAAW,CAChD,GAAIA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAA2B,aAA/B,CAA8C,wBAC5CP,YAAY,CAAG1B,eAAMkC,YAAN,CAAmBH,KAAnB,CAA0B,CACvCb,eAAe,qBAAEa,KAAK,CAAC7B,KAAN,CAAYiB,KAAd,2BAAuBA,KADC,CAA1B,CAAf,CAGD,CAJD,IAIO,CACLQ,YAAY,CAACQ,IAAb,CAAkBJ,KAAlB,EACD,CACF,CARD,EAUA,GAAMK,CAAAA,kBAAkB,CACtBC,sBAASC,EAAT,GAAgB,KAAhB,CACK,CACC,oBAAqB,QADtB,CAEC,kBAAmB5B,aAAa,CAAGG,QAAH,CAAc0B,SAF/C,CAGC,mBAAoB5B,WAAW,CAAGC,MAAH,CAAY2B,SAH5C,CADL,CAMI,EAPN,CASA,MACE,8BAAC,cAAD,CAAQ,OAAR,wBACE,QAAQ,CAAE9B,gBADZ,EAEM2B,kBAFN,CAGMtB,QAHN,CAIMZ,KAJN,EAKE,GAAG,CAAEC,GALP,8EAOGuB,YAPH,CAQGC,YARH,CADF,CAYD,CAxE2B,CAAvB,C,sCA2EP5B,cAAc,CAACkC,WAAf,CAA6B,gBAA7B","sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n    } = React.useContext(PopoverContext);\n    let newProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      newProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      let finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    let restChildren: any = [];\n    React.Children.forEach(props.children, (child) => {\n      if (child.type.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...newProps}\n        {...props}\n        ref={ref}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]}