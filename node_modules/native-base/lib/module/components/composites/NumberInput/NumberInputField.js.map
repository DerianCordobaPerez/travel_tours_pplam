{"version":3,"sources":["NumberInputField.tsx"],"names":["NumberInputFiled","ref","isDisabled","props","React","useContext","NumberInputContext","handleChange","handleChangeWithoutCheck","numberInputStepper","numberInputValue","isControlled","context","changeHandler","inputValue","minusIndex","indexOf","replace","value","parseInt","blurHandler","memo","forwardRef"],"mappings":"mWAAA,oDACA,6CAEA,kC,kJAEA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,MAEvBC,GAFuB,CAGpB,IAFDC,CAAAA,UAEC,MAFDA,UAEC,CAFcC,KAEd,kFAWCC,eAAMC,UAAN,CAAiBC,2BAAjB,CAXD,CAEDC,YAFC,mBAEDA,YAFC,CAGDC,wBAHC,mBAGDA,wBAHC,CAIDC,kBAJC,mBAIDA,kBAJC,CAKDC,gBALC,mBAKDA,gBALC,CAMDC,YANC,mBAMDA,YANC,CAOEC,OAPF,6JAYH,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,UAAD,CAAqB,CACzC,GAAIC,CAAAA,UAAU,CAAGD,UAAU,CAACE,OAAX,CAAmB,GAAnB,CAAjB,CACA,GAAID,UAAU,GAAK,CAAC,CAAhB,EAAqBA,UAAU,GAAK,CAAxC,CAA2C,CACzCD,UAAU,CAAGA,UAAU,CAACG,OAAX,CAAmB,GAAnB,CAAwB,EAAxB,CAAb,CACAH,UAAU,CAAG,IAAMA,UAAnB,CACD,CACD,GAAMI,CAAAA,KAAK,CAAGC,QAAQ,CAACL,UAAD,CAAa,EAAb,CAAtB,CACA,GAAIH,YAAJ,CAAkBJ,YAAY,EAAIA,YAAY,CAACW,KAAD,CAA5B,CAAlB,IACK,IAAIA,KAAJ,CAAWV,wBAAwB,EAAIA,wBAAwB,CAACU,KAAD,CAApD,CAAX,IACAV,CAAAA,wBAAwB,EAAIA,wBAAwB,CAAC,CAAD,CAApD,CACN,CAVD,CAWA,GAAMY,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAIV,gBAAJ,CAAsBH,YAAY,EAAIA,YAAY,CAACG,gBAAD,CAA5B,CACvB,CAFD,CAGA,MACE,8BAAC,YAAD,wBACE,CAAC,CAAE,CADL,CAEE,EAAE,CAAE,CAFN,EAGME,OAHN,CAIMT,KAJN,EAKE,MAAM,CAAE,wBAAMiB,CAAAA,WAAW,EAAjB,EALV,CAME,UAAU,CAAElB,UAAU,EAAIU,OAAO,CAACV,UANpC,CAOE,YAAY,CAAE,sBAACY,UAAD,QAAgBD,CAAAA,aAAa,CAACC,UAAD,CAA7B,EAPhB,CAQE,YAAY,CAAC,SARf,CASE,KAAK,IAAKJ,gBATZ,CAUE,iBAAiB,CAAED,kBAVrB,CAWE,GAAG,CAAER,GAXP,8EADF,CAeD,CA5CD,C,aA8CeG,eAAMiB,IAAN,CAAWjB,eAAMkB,UAAN,CAAiBtB,gBAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { INumberInputContext, INumberInputFieldProps } from './types';\nimport { NumberInputContext } from './Context';\n\nconst NumberInputFiled = (\n  { isDisabled, ...props }: INumberInputFieldProps,\n  ref: any\n) => {\n  const {\n    handleChange,\n    handleChangeWithoutCheck,\n    numberInputStepper,\n    numberInputValue,\n    isControlled,\n    ...context\n  }: INumberInputContext & {\n    handleChange?: (value: string | number) => void;\n    numberInputStepper?: any;\n  } = React.useContext(NumberInputContext);\n  const changeHandler = (inputValue: any) => {\n    let minusIndex = inputValue.indexOf('-');\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n    const value = parseInt(inputValue, 10);\n    if (isControlled) handleChange && handleChange(value);\n    else if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);\n    else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n  const blurHandler = () => {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  };\n  return (\n    <Input\n      p={0}\n      pl={2}\n      {...context}\n      {...props}\n      onBlur={() => blurHandler()}\n      isDisabled={isDisabled || context.isDisabled}\n      onChangeText={(inputValue) => changeHandler(inputValue)}\n      keyboardType=\"numeric\"\n      value={`${numberInputValue}`}\n      InputRightElement={numberInputStepper}\n      ref={ref}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(NumberInputFiled));\n"]}