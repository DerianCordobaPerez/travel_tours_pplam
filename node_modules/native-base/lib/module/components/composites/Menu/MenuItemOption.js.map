{"version":3,"sources":["MenuItemOption.tsx"],"names":["MenuItemOption","ref","value","children","onPress","props","React","useContext","MenuOptionContext","values","onChange","type","modifiedOnPress","e","newProps","isChecked","includes","menuOptionProps","px","_icon"],"mappings":"wbAAA,qDACA,kDACA,iEACA,2DACA,4DAEA,kDACA,kCACA,6C,yIAEA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAErBC,GAFqB,CAGlB,IAFDC,CAAAA,KAEC,MAFDA,KAEC,CAFMC,QAEN,MAFMA,QAEN,CAFgBC,OAEhB,MAFgBA,OAEhB,CAF4BC,KAE5B,kGACyDC,eAAMC,UAAN,CAC1DC,kCAD0D,CADzD,CACKC,MADL,mBACKA,MADL,CACaC,QADb,mBACaA,QADb,CACuBC,IADvB,mBACuBA,IADvB,CAIH,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,CAAD,CAAY,CAClCH,QAAQ,CAACR,KAAD,CAAR,CACAE,OAAO,EAAIA,OAAO,CAACS,CAAD,CAAlB,CACD,CAHD,CAKA,GAAMC,CAAAA,QAAQ,CAAG,sCAAmB,UAAnB,CAA+BT,KAA/B,CAAjB,CACA,GAAMU,CAAAA,SAAS,CAAGN,MAAM,CAACO,QAAP,CAAgBd,KAAhB,CAAlB,CACA,GAAMe,CAAAA,eAAe,CAAG,+BAAkB,CAAEF,SAAS,CAATA,SAAF,CAAaJ,IAAI,CAAJA,IAAb,CAAlB,CAAxB,CAEA,MACE,8BAAC,iBAAD,0BACMN,KADN,CAEMY,eAFN,EAGE,iBAAiB,CAAC,QAHpB,CAIE,OAAO,CAAEL,eAJX,CAKE,GAAG,CAAEX,GALP,8EAOE,6BAAC,aAAD,EAAQ,UAAU,CAAC,QAAnB,CAA4B,EAAE,CAAEa,QAAQ,CAACI,EAAzC,CAA6C,KAAK,CAAE,CAApD,6EACE,6BAAC,gBAAD,0BAAeJ,QAAQ,CAACK,KAAxB,EAA+B,OAAO,CAAEJ,SAAS,CAAG,CAAH,CAAO,CAAxD,8EADF,CAEE,6BAAC,YAAD,8EAAMZ,QAAN,CAFF,CAPF,CADF,CAcD,CA9BD,C,aAgCe,gBAAK,sBAAWH,cAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\n\nconst MenuItemOption = (\n  { value, children, onPress, ...props }: IMenuItemOptionProps,\n  ref: any\n) => {\n  const { values, onChange, type }: IMenuOptionContextProps = React.useContext(\n    MenuOptionContext\n  );\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  const newProps = usePropsResolution('MenuItem', props);\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n\n  return (\n    <MenuItem\n      {...props}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack alignItems=\"center\" px={newProps.px} space={3}>\n        <CheckIcon {...newProps._icon} opacity={isChecked ? 1 : 0} />\n        <Box>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]}