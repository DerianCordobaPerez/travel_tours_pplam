{"version":3,"sources":["BreadcrumbSeparator.tsx"],"names":["getBreadcrumbSeparator","children","separator","props","spacing","separatorProps","accessibilityRole","Platform","OS","undefined","Array","isArray","length","separatorElement","React","cloneElement","mx","result","reduce","r","a","concat","slice","map","child","index","_text","key"],"mappings":"kQAAA,oDACA,yCACA,mE,oJAEO,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CACpCC,QADoC,CAEpCC,SAFoC,CAGpCC,KAHoC,CAIpCC,OAJoC,CAKjC,CACH,GAAIC,CAAAA,cAAc,CAAG,CACnBC,iBAAiB,CAAGC,sBAASC,EAAT,GAAgB,KAAhB,CAChB,cADgB,CAEhBC,SAHe,CAArB,CAMA,GAAIC,KAAK,CAACC,OAAN,CAAcV,QAAd,CAAJ,CAA6B,CAC3B,GAAIA,QAAQ,CAACW,MAAT,GAAoB,CAAxB,CAA2B,CACzB,MAAOX,CAAAA,QAAP,CACD,CACD,GAAMY,CAAAA,gBAAgB,CAAGX,SAAS,CAChC,MAAOA,CAAAA,SAAP,GAAqB,QAArB,CACE,6BAAC,aAAD,0BAAUG,cAAV,EAA0B,EAAE,CAAED,OAAF,OAAEA,OAAF,CAAa,CAAzC,8EACGF,SADH,CADF,CAKEY,eAAMC,YAAN,CAAmBb,SAAnB,wBACEc,EAAE,CAAEZ,OAAF,OAAEA,OAAF,CAAa,CADjB,EAEKC,cAFL,EAN8B,CAYhC,6BAAC,aAAD,wBAAM,EAAE,CAAED,OAAF,OAAEA,OAAF,CAAa,CAArB,EAA4BC,cAA5B,+EACG,GADH,CAZF,CAgBA,GAAIY,CAAAA,MAAW,CAAG,EAAlB,CACA,GAAIhB,QAAQ,EAAIA,QAAQ,CAACW,MAAT,CAAkB,CAAlC,CAAqC,CACnCK,MAAM,CAAGhB,QAAQ,CAACiB,MAAT,CACP,SAACC,CAAD,CAAWC,CAAX,QAAsBD,CAAAA,CAAC,CAACE,MAAF,CAASD,CAAT,CAAYP,gBAAZ,CAAtB,EADO,CAEP,CAACA,gBAAD,CAFO,CAAT,CAID,CACDI,MAAM,CAAGA,MAAM,CAACK,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAT,CACA,MAAOL,CAAAA,MAAM,CAACM,GAAP,CAAW,SAACC,KAAD,CAAaC,KAAb,CAA+B,CAC/C,MAAOX,gBAAMC,YAAN,CAAmBS,KAAnB,wBACLE,KAAK,0BAAOvB,KAAP,CADA,EAEFA,KAFE,EAGLwB,GAAG,yBAA0BF,KAHxB,GAAP,CAKD,CANM,CAAP,CAOD,CAnCD,IAmCO,CACL,MAAOxB,CAAAA,QAAP,CACD,CACF,CAlDM,C","sourcesContent":["import React from 'react';\nimport { AccessibilityRole, Platform } from 'react-native';\nimport Text from '../../primitives/Text';\n\nexport const getBreadcrumbSeparator = (\n  children: JSX.Element[] | JSX.Element | any,\n  separator: string | JSX.Element | JSX.Element[] | any,\n  props: any,\n  spacing: number | undefined\n) => {\n  let separatorProps = {\n    accessibilityRole: (Platform.OS === 'web'\n      ? 'presentation'\n      : undefined) as AccessibilityRole,\n  };\n\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    const separatorElement = separator ? (\n      typeof separator === 'string' ? (\n        <Text {...separatorProps} mx={spacing ?? 2}>\n          {separator}\n        </Text>\n      ) : (\n        React.cloneElement(separator, {\n          mx: spacing ?? 2,\n          ...separatorProps,\n        })\n      )\n    ) : (\n      <Text mx={spacing ?? 2} {...separatorProps}>\n        {'/'}\n      </Text>\n    );\n    let result: any = [];\n    if (children && children.length > 1) {\n      result = children.reduce(\n        (r: any[], a: any) => r.concat(a, separatorElement),\n        [separatorElement]\n      );\n    }\n    result = result.slice(1, -1);\n    return result.map((child: any, index: number) => {\n      return React.cloneElement(child, {\n        _text: { ...props },\n        ...props,\n        key: `breadcrumb-separator-${index}`,\n      });\n    });\n  } else {\n    return children;\n  }\n};\n"]}