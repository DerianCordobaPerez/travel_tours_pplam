{"version":3,"sources":["FormControl.test.tsx"],"names":["Input","React","forwardRef","props","ref","inputProps","it","getByPlaceholderText","textInput","expect","accessibilityRequired","toBe","required","accessibilityInvalid","accessibilityReadOnly","readOnly","disabled","accessibilityDescribedBy","toBeUndefined","inputID","_ref","nativeID","htmlFor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormControl, useFormControl } from '../index';\nimport { TextInput } from 'react-native';\nimport { render } from '@testing-library/react-native';\nimport { Wrapper } from '../../../../utils/test-utils';\n\nconst Input = React.forwardRef((props: any, ref: any) => {\n  const inputProps = useFormControl(props);\n  return (\n    //@ts-ignore\n    <TextInput ref={ref} {...inputProps} />\n  );\n});\n\nit('a11y test in when required', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isRequired>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.accessibilityRequired).toBe(true);\n  expect(textInput.props.required).toBe(true);\n});\n\nit('a11y test in when invalid', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isInvalid>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.accessibilityInvalid).toBe(true);\n});\n\nit('a11y test in when readOnly', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isReadOnly>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.accessibilityReadOnly).toBe(true);\n  expect(textInput.props.readOnly).toBe(true);\n});\n\nit('a11y test in when disabled', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isDisabled>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.disabled).toBe(true);\n});\n\nit('a11y test when helper text is present', async () => {\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID=\"name\" isDisabled>\n        <FormControl.Label>Name</FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  expect(textInput.props.accessibilityDescribedBy).toBe('name-helptext');\n  expect(textInput.props.accessibilityReadOnly).toBeUndefined();\n  expect(textInput.props.accessibilityInvalid).toBeUndefined();\n  expect(textInput.props.accessibilityRequired).toBeUndefined();\n});\n\nit('sets htmlFor of FormLabel ref to nativeID of Input', async () => {\n  let ref: HTMLLabelElement;\n  const inputID = 'name';\n  let { getByPlaceholderText } = render(\n    <Wrapper>\n      <FormControl nativeID={inputID} isInvalid>\n        <FormControl.Label\n          //@ts-ignore\n          ref={(_ref) => (ref = _ref)}\n        >\n          Name\n        </FormControl.Label>\n        <Input placeholder=\"Name\" />\n        <FormControl.HelperText>Enter your name please!</FormControl.HelperText>\n        <FormControl.ErrorMessage>\n          Your name is invalid\n        </FormControl.ErrorMessage>\n      </FormControl>\n    </Wrapper>\n  );\n  const textInput = getByPlaceholderText('Name');\n  //@ts-ignore\n  expect(textInput.props.nativeID).toBe(ref.htmlFor);\n});\n"]}