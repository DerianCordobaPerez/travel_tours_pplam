{"version":3,"sources":["AlertIcon.tsx"],"names":["AlertIcon","ref","children","wrapperRef","props","newProps","React","useContext","AlertContext","status","iconColor","getIcon"],"mappings":"wbAAA,qDACA,4CACA,kDAOA,2DACA,kCACA,iD,qIAEA,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAEhBC,GAFgB,CAGb,IAFDC,CAAAA,QAEC,MAFDA,QAEC,CAFSC,UAET,MAFSA,UAET,CAFwBC,KAExB,uEACH,GAAIC,CAAAA,QAAQ,CAAG,sCAAmB,WAAnB,CAAgCD,KAAhC,CAAf,CACAC,QAAQ,CAAG,yBAAcA,QAAd,CAAX,CAFG,sBAG0CC,eAAMC,UAAN,CAAiBC,qBAAjB,CAH1C,CAGKC,MAHL,mBAGKA,MAHL,CAGaC,SAHb,mBAGaA,SAHb,CAIH,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,OAAQF,MAAR,EACE,IAAK,OAAL,CACE,MAAO,8BAAC,qBAAD,wBAAgB,KAAK,CAAEC,SAAvB,EAAsCL,QAAtC,EAAgD,GAAG,CAAEJ,GAArD,+EAAP,CACF,IAAK,SAAL,CACE,MAAO,8BAAC,kBAAD,wBAAa,KAAK,CAAES,SAApB,EAAmCL,QAAnC,EAA6C,GAAG,CAAEJ,GAAlD,+EAAP,CACF,IAAK,SAAL,CACE,MAAO,8BAAC,sBAAD,wBAAiB,KAAK,CAAES,SAAxB,EAAuCL,QAAvC,EAAiD,GAAG,CAAEJ,GAAtD,+EAAP,CACF,QACE,MAAO,8BAAC,eAAD,wBAAU,KAAK,CAAES,SAAjB,EAAgCL,QAAhC,EAA0C,GAAG,CAAEJ,GAA/C,+EAAP,CARJ,CAUD,CAXD,CAaA,MAAO,8BAAC,eAAD,EAAK,GAAG,CAAEE,UAAV,8EAAuBD,QAAQ,EAAIS,OAAO,EAA1C,CAAP,CACD,CArBD,C,aAsBe,gBAAK,sBAAWX,SAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box } from '../../primitives';\nimport {\n  WarningIcon,\n  WarningTwoIcon,\n  InfoIcon,\n  CheckCircleIcon,\n} from '../../primitives/Icon/Icons';\nimport type { IAlertContext, IAlertIconProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { AlertContext } from './Context';\nimport { omitUndefined } from '../../../theme/tools/utils';\n\nconst AlertIcon = (\n  { children, wrapperRef, ...props }: IAlertIconProps,\n  ref?: any\n) => {\n  let newProps = usePropsResolution('AlertIcon', props);\n  newProps = omitUndefined(newProps);\n  const { status, iconColor }: IAlertContext = React.useContext(AlertContext);\n  const getIcon = () => {\n    switch (status) {\n      case 'error':\n        return <WarningTwoIcon color={iconColor} {...newProps} ref={ref} />;\n      case 'warning':\n        return <WarningIcon color={iconColor} {...newProps} ref={ref} />;\n      case 'success':\n        return <CheckCircleIcon color={iconColor} {...newProps} ref={ref} />;\n      default:\n        return <InfoIcon color={iconColor} {...newProps} ref={ref} />;\n    }\n  };\n\n  return <Box ref={wrapperRef}>{children || getIcon()}</Box>;\n};\nexport default memo(forwardRef(AlertIcon));\n"]}