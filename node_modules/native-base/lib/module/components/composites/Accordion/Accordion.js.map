{"version":3,"sources":["Accordion.tsx"],"names":["Accordion","ref","children","pIndex","index","defaultIndex","allowMultiple","allowToggle","onChange","props","endingHeight","startingHeight","duration","isOpen","onAnimationEnd","onAnimationStart","newProps","React","useState","setIndex","changeHandler","isOpening","activeIndex","indexCopy","map","i","push","splice","indexOf","filter","n","AnimationProps","memo","forwardRef"],"mappings":"+bAAA,oDACA,iEAEA,qCACA,6FACA,kC,yIAEA,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAUhBC,GAVgB,CAWb,IATDC,CAAAA,QASC,MATDA,QASC,CARMC,MAQN,MARDC,KAQC,CAPDC,YAOC,MAPDA,YAOC,CANDC,aAMC,MANDA,aAMC,CALDC,WAKC,MALDA,WAKC,CAJDC,QAIC,MAJDA,QAIC,CAHEC,KAGF,6IASC,yBAAc,WAAd,CAA2BA,KAA3B,CATD,CAEDC,YAFC,gBAEDA,YAFC,CAGDC,cAHC,gBAGDA,cAHC,CAIDC,QAJC,gBAIDA,QAJC,CAKDC,MALC,gBAKDA,MALC,CAMDC,cANC,gBAMDA,cANC,CAODC,gBAPC,gBAODA,gBAPC,CAQEC,QARF,qKAWuBC,eAAMC,QAAN,CAAef,MAAM,EAAIE,YAAV,EAA0B,EAAzC,CAXvB,iEAWID,KAXJ,qBAWWe,QAXX,qBAYH,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,SAAD,CAAqBC,WAArB,CAA6C,CACjE,GAAIC,CAAAA,SAAS,CAAGnB,KAAK,CAACoB,GAAN,CAAU,SAACC,CAAD,QAAeA,CAAAA,CAAf,EAAV,CAAhB,CACA,GAAIlB,WAAJ,CAAiB,CACf,GAAIc,SAAJ,CAAe,CACbE,SAAS,CAACG,IAAV,CAAeJ,WAAf,EACAhB,aAAa,CAAGa,QAAQ,CAACI,SAAD,CAAX,CAAyBJ,QAAQ,CAAC,CAACG,WAAD,CAAD,CAA9C,CACD,CAHD,IAGO,CACLH,QAAQ,CAACf,KAAK,CAACuB,MAAN,CAAavB,KAAK,CAACwB,OAAN,CAAcN,WAAd,CAAb,CAAyC,CAAzC,CAAD,CAAR,CACD,CACF,CAPD,IAOO,CACL,GAAID,SAAJ,CAAe,CACbE,SAAS,CAACG,IAAV,CAAeJ,WAAf,EACAhB,aAAa,CAAGa,QAAQ,CAACI,SAAD,CAAX,CAAyBJ,QAAQ,CAAC,CAACG,WAAD,CAAD,CAA9C,CACD,CAHD,IAGO,CACLC,SAAS,CAAGA,SAAS,CAACM,MAAV,CAAiB,SAACC,CAAD,QAAOA,CAAAA,CAAC,GAAKR,WAAb,EAAjB,CAAZ,CACAH,QAAQ,CAACI,SAAD,CAAR,CACD,CACF,CACDf,QAAQ,EAAIA,QAAQ,CAACe,SAAD,CAApB,CACD,CAnBD,CAoBA,MACE,8BAAC,yBAAD,CAAkB,QAAlB,EACE,KAAK,CAAE,CACLnB,KAAK,CAAEA,KADF,CAELgB,aAAa,CAAbA,aAFK,CAGLW,cAAc,CAAE,CACdrB,YAAY,CAAZA,YADc,CAEdC,cAAc,CAAdA,cAFc,CAGdC,QAAQ,CAARA,QAHc,CAIdC,MAAM,CAANA,MAJc,CAKdC,cAAc,CAAdA,cALc,CAMdC,gBAAgB,CAAhBA,gBANc,CAHX,CADT,6EAcE,6BAAC,YAAD,wBAAK,QAAQ,CAAC,QAAd,EAA2BC,QAA3B,EAAqC,GAAG,CAAEf,GAA1C,8EACG,gCAAmBC,QAAnB,CADH,CAdF,CADF,CAoBD,CA/DD,C,aAiEee,eAAMe,IAAN,CAAWf,eAAMgB,UAAN,CAAiBjC,SAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport type { IAccordionProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport getIndexedChildren from '../../../utils/getIndexedChildren';\nimport { AccordionContext } from './Context';\n\nconst Accordion = (\n  {\n    children,\n    index: pIndex,\n    defaultIndex,\n    allowMultiple,\n    allowToggle,\n    onChange,\n    ...props\n  }: IAccordionProps,\n  ref: any\n) => {\n  const {\n    endingHeight,\n    startingHeight,\n    duration,\n    isOpen,\n    onAnimationEnd,\n    onAnimationStart,\n    ...newProps\n  } = useThemeProps('Accordion', props);\n\n  const [index, setIndex] = React.useState(pIndex || defaultIndex || []);\n  const changeHandler = (isOpening: boolean, activeIndex: number) => {\n    let indexCopy = index.map((i: number) => i);\n    if (allowToggle) {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        setIndex(index.splice(index.indexOf(activeIndex), 1));\n      }\n    } else {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        indexCopy = indexCopy.filter((n) => n !== activeIndex);\n        setIndex(indexCopy);\n      }\n    }\n    onChange && onChange(indexCopy);\n  };\n  return (\n    <AccordionContext.Provider\n      value={{\n        index: index,\n        changeHandler,\n        AnimationProps: {\n          endingHeight,\n          startingHeight,\n          duration,\n          isOpen,\n          onAnimationEnd,\n          onAnimationStart,\n        },\n      }}\n    >\n      <Box overflow=\"hidden\" {...newProps} ref={ref}>\n        {getIndexedChildren(children)}\n      </Box>\n    </AccordionContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(Accordion));\n"]}