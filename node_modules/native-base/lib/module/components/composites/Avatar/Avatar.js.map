{"version":3,"sources":["Avatar.tsx"],"names":["Avatar","ref","wrapperRef","props","React","useState","error","setError","size","style","source","children","remainingProps","name","_text","newProps","Badge","remainingChildren","Children","map","child","key","type","displayName","push","imageFitStyle","height","width","borderRadius","length"],"mappings":"ohBAAA,qDACA,4CACA,2D,mIAGA,GAAMA,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAyCC,GAAzC,CAAsD,IAAnDC,CAAAA,UAAmD,MAAnDA,UAAmD,CAApCC,KAAoC,gFACzCC,eAAMC,QAAN,CAAe,KAAf,CADyC,iEAC5DC,KAD4D,qBACrDC,QADqD,wBAE3DC,CAAAA,IAF2D,CAENL,KAFM,CAE3DK,IAF2D,CAErDC,KAFqD,CAENN,KAFM,CAErDM,KAFqD,CAE9CC,MAF8C,CAENP,KAFM,CAE9CO,MAF8C,CAEtCC,QAFsC,CAENR,KAFM,CAEtCQ,QAFsC,CAEzBC,cAFyB,uCAENT,KAFM,+DAIpC,sCAAmB,QAAnB,0BAC1BS,cAD0B,EAE7BC,IAAI,CAAE,QAFuB,CAG7BL,IAAI,CAAJA,IAH6B,GAJoC,CAI3DM,KAJ2D,qBAI3DA,KAJ2D,CAIjDC,QAJiD,sEAUnE,GAAIC,CAAAA,KAAK,CAAG,0DAAZ,CACA,GAAIC,CAAAA,iBAAgC,CAAG,EAAvC,CAEAb,eAAMc,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,CAA6B,SAACS,KAAD,CAAQC,GAAR,CAAgB,CAC3C,GACE,OAAOD,KAAP,cAAOA,KAAK,CAAEE,IAAd,IAAuB,QAAvB,EACA,CAAAF,KAAK,MAAL,QAAAA,KAAK,CAAEE,IAAP,CAAYC,WAAZ,IAA4B,aAF9B,CAGE,CACAP,KAAK,CAAGI,KAAR,CACD,CALD,IAKO,CACLH,iBAAiB,CAACO,IAAlB,CACE,MAAOJ,CAAAA,KAAP,GAAiB,QAAjB,CACE,6BAAC,gBAAD,wBAAM,GAAG,CAAE,mBAAqBC,GAAhC,EAAyCP,KAAzC,gFACGM,KADH,CADF,CAKEA,KANJ,EASD,CACF,CAjBD,EAmBA,GAAMK,CAAAA,aAAa,CAAG,CAAEC,MAAM,CAAE,MAAV,CAAkBC,KAAK,CAAE,MAAzB,CAAtB,CAEA,MACE,8BAAC,eAAD,0BAASZ,QAAT,EAAmB,KAAK,CAAEN,KAA1B,CAAiC,GAAG,CAAEP,UAAtC,8EACGQ,MAAM,EAAI,CAACJ,KAAX,CACC,6BAAC,iBAAD,EACE,YAAY,CAAES,QAAQ,CAACa,YADzB,CAEE,MAAM,CAAElB,MAFV,CAGE,GAAG,CAAE,IAHP,CAIE,IAAI,CAAEI,KAJR,CAKE,KAAK,CAAE,CAACL,KAAD,CAAQgB,aAAR,CALT,CAME,OAAO,CAAE,kBAAM,CACblB,QAAQ,CAAC,IAAD,CAAR,CACD,CARH,CASE,GAAG,CAAEN,GATP,6EADD,CAYGgB,iBAAiB,CAACY,MAAlB,GAA6B,CAA7B,CACF,6BAAC,gBAAD,0BAAUf,KAAV,oFADE,CAGFG,iBAhBJ,CAkBGD,KAlBH,CADF,CAsBD,CAxDD,C,aA0De,gBAAK,sBAAWhB,MAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image, Text } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\n\nconst Avatar = ({ wrapperRef, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { size, style, source, children, ...remainingProps } = props;\n\n  const { _text, ...newProps } = usePropsResolution('Avatar', {\n    ...remainingProps,\n    name: 'avatar',\n    size,\n  });\n\n  let Badge = <></>;\n  let remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child, key) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = child;\n    } else {\n      remainingChildren.push(\n        typeof child === 'string' ? (\n          <Text key={'avatar-children-' + key} {..._text}>\n            {child}\n          </Text>\n        ) : (\n          child\n        )\n      );\n    }\n  });\n\n  const imageFitStyle = { height: '100%', width: '100%' };\n\n  return (\n    <Box {...newProps} style={style} ref={wrapperRef}>\n      {source && !error ? (\n        <Image\n          borderRadius={newProps.borderRadius}\n          source={source}\n          alt={'--'}\n          _alt={_text}\n          style={[style, imageFitStyle]}\n          onError={() => {\n            setError(true);\n          }}\n          ref={ref}\n        />\n      ) : remainingChildren.length === 0 ? (\n        <Text {..._text}>--</Text> // default alternate\n      ) : (\n        remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]}