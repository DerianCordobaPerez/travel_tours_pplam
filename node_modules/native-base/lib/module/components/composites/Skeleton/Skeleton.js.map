{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","allProps","ref","isDomUsable","variant","children","props","newProps","style","skeletonColor","baseColor","blinkAnim","React","useRef","Animated","Value","current","useEffect","blink","sequence","timing","toValue","duration","useNativeDriver","Platform","OS","loop","start","skeletonStyle","skeleton","position","top","bottom","height","width","borderRadius","backgroundColor","opacity","transform","scaleY","undefined","memo","forwardRef"],"mappings":"mWAAA,oDACA,yCACA,qCACA,qCACA,iE,uIAGA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,QAAD,CAA2BC,GAA3B,CAAwC,sBACvD,GAAMC,CAAAA,WAAW,CAAG,sBAApB,CADuD,GAE/CC,CAAAA,OAF+C,CAEfH,QAFe,CAE/CG,OAF+C,CAEtCC,QAFsC,CAEfJ,QAFe,CAEtCI,QAFsC,CAEzBC,KAFyB,uCAEfL,QAFe,yBAGvD,GAAMM,CAAAA,QAAQ,CAAG,yBAAc,UAAd,CAA0BD,KAA1B,CAAjB,CAHuD,GAI/CE,CAAAA,KAJ+C,CAIXD,QAJW,CAI/CC,KAJ+C,CAIxCC,aAJwC,CAIXF,QAJW,CAIxCE,aAJwC,CAIzBC,SAJyB,CAIXH,QAJW,CAIzBG,SAJyB,CAKvD,GAAMC,CAAAA,SAAS,CAAGC,eAAMC,MAAN,CAAa,GAAIC,uBAASC,KAAb,CAAmB,CAAnB,CAAb,EAAoCC,OAAtD,CAEAJ,eAAMK,SAAN,CAAgB,UAAM,CACpB,GAAId,WAAJ,CAAiB,CACf,GAAMe,CAAAA,KAAK,CAAGJ,sBAASK,QAAT,CAAkB,CAC9BL,sBAASM,MAAT,CAAgBT,SAAhB,CAA2B,CACzBU,OAAO,CAAE,CADgB,CAEzBC,QAAQ,CAAE,IAFe,CAGzBC,eAAe,CAAEC,sBAASC,EAAT,GAAgB,KAHR,CAA3B,CAD8B,CAM9BX,sBAASM,MAAT,CAAgBT,SAAhB,CAA2B,CACzBU,OAAO,CAAE,CADgB,CAEzBC,QAAQ,CAAE,IAFe,CAGzBC,eAAe,CAAEC,sBAASC,EAAT,GAAgB,KAHR,CAA3B,CAN8B,CAAlB,CAAd,CAYAX,sBAASY,IAAT,CAAcR,KAAd,EAAqBS,KAArB,GACD,CACF,CAhBD,CAgBG,CAAChB,SAAD,CAAYR,WAAZ,CAhBH,EAkBA,GAAMyB,CAAAA,aAAkB,CAAG,CACzBC,QAAQ,CAAE,CACRC,QAAQ,CAAE,UADF,CAERC,GAAG,CAAE,CAFG,CAGRC,MAAM,CAAE,CAHA,CAIRC,MAAM,CAAE,MAJA,CAKRC,KAAK,CAAE,MALC,CAMRC,YAAY,CAAE/B,OAAO,GAAK,QAAZ,CAAuB,GAAvB,CAA6B,CANnC,CAORgC,eAAe,CAAE3B,aAPT,CAQR4B,OAAO,CAAE1B,SARD,CADe,CAA3B,CAaA,MACE,8BAAC,YAAD,wBACE,KAAK,CAAE,CACLH,KADK,CAEL,CACE8B,SAAS,CACP,mBAAAhC,KAAK,CAACgC,SAAN,yBAAmBlC,OAAO,GAAK,MAA/B,EACI,CAAC,CAAEmC,MAAM,CAAE,GAAV,CAAD,CADJ,CAEIC,SAJR,CAFK,CADT,CAUE,YAAY,CAAEpC,OAAO,GAAK,QAAZ,CAAuB,GAAvB,CAA6B,CAV7C,CAWE,EAAE,CAAEM,SAXN,EAYMJ,KAZN,EAaE,GAAG,CAAEJ,GAbP,8EAeE,6BAAC,qBAAD,CAAU,IAAV,EAAe,KAAK,CAAE0B,aAAa,CAACC,QAApC,6EAfF,CAgBGxB,QAAQ,CAAG,6BAAC,iBAAD,EAAM,KAAK,CAAE,CAAEgC,OAAO,CAAE,CAAX,CAAb,8EAA8BhC,QAA9B,CAAH,CAAoD,IAhB/D,CADF,CAoBD,CA1DD,C,aA4DeO,eAAM6B,IAAN,CAAW7B,eAAM8B,UAAN,CAAiB1C,QAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { Animated, Platform, View } from 'react-native';\nimport { useThemeProps } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\n\nconst Skeleton = (allProps: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const { variant, children, ...props } = allProps;\n  const newProps = useThemeProps('Skeleton', props);\n  const { style, skeletonColor, baseColor } = newProps;\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration: 1000,\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration: 1000,\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      height: '100%',\n      width: '100%',\n      borderRadius: variant === 'circle' ? 999 : 3,\n      backgroundColor: skeletonColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  return (\n    <Box\n      style={[\n        style,\n        {\n          transform:\n            props.transform ?? variant === 'text'\n              ? [{ scaleY: 0.6 }]\n              : undefined,\n        },\n      ]}\n      borderRadius={variant === 'circle' ? 999 : 3}\n      bg={baseColor}\n      {...props}\n      ref={ref}\n    >\n      <Animated.View style={skeletonStyle.skeleton} />\n      {children ? <View style={{ opacity: 0 }}>{children}</View> : null}\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(Skeleton));\n"]}