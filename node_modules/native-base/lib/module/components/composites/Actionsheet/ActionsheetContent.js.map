{"version":3,"sources":["ActionsheetContent.tsx"],"names":["ActionsheetContent","ref","children","props","_dragIndicator","newProps","React","useContext","ModalContext","handleClose","ActionSheetContext","hideDragIndicator","pan","useRef","Animated","ValueXY","current","sheetHeight","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","_evt","gestureState","dy","onPanResponderMove","e","event","y","useNativeDriver","onPanResponderRelease","_e","timing","toValue","x","duration","start","spring","overshootClamping","transform","translateY","width","height","nativeEvent","layout","panHandlers"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetContentProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { Animated, PanResponder } from 'react-native';\nimport { ModalContext } from '../Modal/Context';\nimport Box from '../../primitives/Box';\nimport { ActionSheetContext } from './ActionSheetContext';\n\nconst ActionsheetContent = (\n  { children, ...props }: IActionsheetContentProps,\n  ref?: any\n) => {\n  const { _dragIndicator, ...newProps } = usePropsResolution(\n    'ActionsheetContent',\n    props\n  );\n  const { handleClose } = React.useContext(ModalContext);\n  const { hideDragIndicator } = React.useContext(ActionSheetContext);\n  let pan = React.useRef(new Animated.ValueXY()).current;\n  let sheetHeight = React.useRef(0);\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponder: (_evt, gestureState) => {\n        return gestureState.dy > 15;\n      },\n      onPanResponderMove: (e, gestureState) => {\n        if (gestureState.dy > 0) {\n          Animated.event([null, { dy: pan.y }], {\n            useNativeDriver: false,\n          })(e, gestureState);\n        }\n      },\n      onPanResponderRelease: (_e, gestureState) => {\n        // If sheet is dragged 1/4th of it's height, close it\n        if (sheetHeight.current / 4 - gestureState.dy < 0) {\n          Animated.timing(pan, {\n            toValue: { x: 0, y: sheetHeight.current },\n            duration: 150,\n            useNativeDriver: true,\n          }).start(handleClose);\n        } else {\n          Animated.spring(pan, {\n            toValue: { x: 0, y: 0 },\n            overshootClamping: true,\n            useNativeDriver: true,\n          }).start();\n        }\n      },\n    })\n  ).current;\n\n  return (\n    <Animated.View\n      style={{\n        transform: [{ translateY: pan.y }],\n        width: '100%',\n      }}\n      onLayout={(event) => {\n        const { height } = event.nativeEvent.layout;\n        sheetHeight.current = height;\n      }}\n      pointerEvents=\"box-none\"\n    >\n      {!hideDragIndicator ? (\n        <>\n          {/* To increase the draggable area */}\n          <Box py={5} {...panResponder.panHandlers} collapsable={false} />\n        </>\n      ) : null}\n\n      <Modal.Content {...newProps} ref={ref} safeAreaBottom>\n        {!hideDragIndicator ? (\n          <>\n            {/* Hack. Fix later. Add -2 negative margin to remove the padding added by ActionSheetContent */}\n            <Box\n              py={5}\n              mt={-2}\n              {...panResponder.panHandlers}\n              width=\"100%\"\n              alignItems=\"center\"\n              collapsable={false}\n            >\n              <Box {..._dragIndicator} />\n            </Box>\n          </>\n        ) : null}\n\n        {children}\n      </Modal.Content>\n    </Animated.View>\n  );\n};\n\nexport default memo(forwardRef(ActionsheetContent));\n"]}