{"version":3,"sources":["Typeahead.tsx"],"names":["Typeahead","React","forwardRef","ref","onSelectedItemChange","options","renderItem","getOptionLabel","getOptionKey","onChange","numberOfItems","rest","undefined","slice","item","Error","id","optionLabel","optionKey","ComboBoxImplementation","props","layoutPropsList","layoutProps","state","triggerRef","useRef","inputRef","listBoxRef","popoverRef","buttonRef","menuTrigger","triggerProps","buttonProps","inputProps","listBoxProps","labelProps","toggleIconSetter","toggleIcon","isOpen","label","ListBoxPopup","dropdownHeight","autoFocus","focusStrategy","disallowEmptySelection","node","Platform","OS","current","collection","map","key","Option","searchItemStyle","isDisabled","disabledKeys","has","isSelected","selectionManager","isFocused","focusedKey","shouldFocusOnHover","shouldUseVirtualFocus","optionProps","backgroundColor","opacity","_focus","_disabled","rendered"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useButton } from '@react-native-aria/button';\nimport { ComboBoxState, useComboBoxState } from '@react-stately/combobox';\nimport { useComboBox } from '@react-native-aria/combobox';\nimport { useListBox, useOption } from '@react-native-aria/listbox';\nimport { ScrollView, findNodeHandle, Platform } from 'react-native';\nimport { Item } from '@react-stately/collections';\nimport Box from '../../primitives/Box';\nimport { Pressable } from '../../primitives/Pressable';\nimport Text from '../../primitives/Text';\nimport { extractInObject } from '../../../theme/tools';\nimport { ITypeaheadProps, IComboBoxProps, layoutPropsList } from './types';\nimport { Input } from '../../primitives/Input';\nimport { useThemeProps } from '../../../hooks';\n\nexport const Typeahead = React.forwardRef(\n  (\n    {\n      onSelectedItemChange,\n      options,\n      renderItem,\n      getOptionLabel,\n      getOptionKey,\n      onChange,\n      numberOfItems,\n      ...rest\n    }: ITypeaheadProps,\n    ref?: any\n  ) => {\n    return (\n      <ComboBoxImplementation\n        {...rest}\n        onSelectionChange={onSelectedItemChange}\n        items={\n          numberOfItems !== undefined\n            ? options.slice(0, numberOfItems)\n            : options\n        }\n        onInputChange={onChange}\n        ref={ref}\n      >\n        {(item: any) => {\n          if (typeof item !== 'string' && getOptionLabel === undefined) {\n            throw new Error('Please use getOptionLabel prop');\n          }\n\n          if (item.id === undefined && getOptionKey === undefined) {\n            throw new Error('Please use getOptionKey prop');\n          }\n\n          const optionLabel = getOptionLabel ? getOptionLabel(item) : item;\n          const optionKey = getOptionKey\n            ? getOptionKey(item)\n            : item.id !== undefined\n            ? item.id\n            : optionLabel;\n\n          return (\n            <Item textValue={optionLabel} key={optionKey}>\n              {renderItem ? (\n                renderItem(item)\n              ) : (\n                <Box p={2} justifyContent=\"center\">\n                  <Text>{optionLabel}</Text>\n                </Box>\n              )}\n            </Item>\n          );\n        }}\n      </ComboBoxImplementation>\n    );\n  }\n);\n\nconst ComboBoxImplementation = React.forwardRef(\n  (props: IComboBoxProps, ref?: any) => {\n    const [layoutProps] = extractInObject(props, layoutPropsList);\n    let state = useComboBoxState(props);\n\n    let triggerRef = React.useRef(null);\n    let inputRef = React.useRef(null);\n    let listBoxRef = React.useRef(null);\n    let popoverRef = React.useRef(null);\n\n    let {\n      buttonProps: triggerProps,\n      inputProps,\n      listBoxProps,\n      labelProps,\n    } = useComboBox(\n      {\n        ...props,\n        inputRef,\n        buttonRef: triggerRef,\n        listBoxRef,\n        popoverRef,\n        menuTrigger: 'input',\n      },\n      state\n    );\n\n    const toggleIconSetter = () => {\n      if (typeof props.toggleIcon === 'function')\n        return props.toggleIcon({\n          isOpen: state.isOpen,\n        });\n      return props.toggleIcon;\n    };\n\n    let { buttonProps } = useButton(triggerProps);\n\n    return (\n      <Box flexDirection=\"row\" {...layoutProps} ref={ref}>\n        <Box flex={1}>\n          {props.label && (\n            <Text {...labelProps} pb={1}>\n              {props.label}\n            </Text>\n          )}\n          <Input\n            {...inputProps}\n            ref={inputRef}\n            InputRightElement={\n              // @ts-ignore - RN has hitSlop type inconsistent for View and Pressable!\n              <Pressable {...buttonProps} ref={triggerRef}>\n                {toggleIconSetter()}\n              </Pressable>\n            }\n          />\n\n          {state.isOpen && (\n            <ListBoxPopup\n              {...listBoxProps}\n              listBoxRef={listBoxRef}\n              popoverRef={popoverRef}\n              state={state}\n              label={props.label}\n            />\n          )}\n        </Box>\n      </Box>\n    );\n  }\n);\n\ntype IListBoxProps = {\n  popoverRef: any;\n  listBoxRef: any;\n  state: ComboBoxState<any>;\n  dropdownHeight: number;\n  label: string;\n};\n\nfunction ListBoxPopup(props: IListBoxProps) {\n  let { popoverRef, listBoxRef, state, dropdownHeight, label } = props;\n\n  let { listBoxProps } = useListBox(\n    {\n      label,\n      autoFocus: state.focusStrategy,\n      disallowEmptySelection: true,\n    },\n    state,\n    listBoxRef\n  );\n\n  return (\n    <Box ref={popoverRef}>\n      <Box position=\"absolute\" width=\"100%\" maxHeight={dropdownHeight ?? 200}>\n        <ScrollView\n          {...listBoxProps}\n          keyboardShouldPersistTaps=\"handled\"\n          ref={(node) => {\n            if (Platform.OS === 'web') {\n              listBoxRef.current = findNodeHandle(node);\n            } else {\n              listBoxRef.current = node;\n            }\n          }}\n        >\n          {[...state.collection].map((item) => (\n            <Option key={item.key} item={item} state={state} />\n          ))}\n        </ScrollView>\n      </Box>\n    </Box>\n  );\n}\n\nfunction Option({ item, state }: { item: any; state: ComboBoxState<any> }) {\n  const searchItemStyle = useThemeProps('TypeAheadSearchItem', {});\n\n  let ref = React.useRef(null);\n  let isDisabled = state.disabledKeys.has(item.key);\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let isFocused = state.selectionManager.focusedKey === item.key;\n\n  let { optionProps } = useOption(\n    {\n      key: item.key,\n      isDisabled,\n      isSelected,\n      shouldFocusOnHover: true,\n      shouldUseVirtualFocus: true,\n    },\n    state,\n    ref\n  );\n\n  let backgroundColor = searchItemStyle.backgroundColor;\n  let opacity = 1;\n\n  if (isSelected) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isFocused) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isDisabled) {\n    opacity = 0.6;\n    backgroundColor = searchItemStyle._disabled.backgroundColor;\n  }\n\n  return (\n    <Pressable\n      {...optionProps}\n      opacity={opacity}\n      cursor={\n        isDisabled ? (Platform.OS === 'web' ? 'not-allowed' : null) : null\n      }\n      backgroundColor={backgroundColor}\n      ref={ref}\n    >\n      {item.rendered}\n    </Pressable>\n  );\n}\n"]}