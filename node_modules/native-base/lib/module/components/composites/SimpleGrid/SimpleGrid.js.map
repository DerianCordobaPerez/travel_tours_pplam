{"version":3,"sources":["SimpleGrid.tsx"],"names":["DEBUG_STYLES","rows","border","cols","SimpleGrid","props","ref","columns","space","spacingX","spacingY","minChildWidth","children","remainingProps","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","React","Children","toArray","rowSlices","i","length","push","slice","map","row","rowIndex","col","key","memo","forwardRef"],"mappings":"mWAAA,oDACA,4CAGA,4D,2IAEA,GAAMA,CAAAA,YAAY,CAAG,MACjB,CACEC,IAAI,CAAE,CACJC,MAAM,CAAE,iBADJ,CADR,CAIEC,IAAI,CAAE,CACJD,MAAM,CAAE,eADJ,CAJR,CADiB,CASjB,CACED,IAAI,CAAE,EADR,CAEEE,IAAI,CAAE,EAFR,CATJ,CAcA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAA0BC,GAA1B,CAAqD,oBASlE,kCAAc,YAAd,CAA4BD,KAA5B,CATkE,CAEpEE,OAFoE,gBAEpEA,OAFoE,CAGpEC,KAHoE,gBAGpEA,KAHoE,CAIpEC,QAJoE,gBAIpEA,QAJoE,CAKpEC,QALoE,gBAKpEA,QALoE,CAMpEC,aANoE,gBAMpEA,aANoE,CAOpEC,QAPoE,gBAOpEA,QAPoE,CAQjEC,cARiE,4HAUtE,GAAIC,CAAAA,WAAW,CAAGN,KAAH,OAAGA,KAAH,CAAY,CAA3B,CACA,GAAIO,CAAAA,YAAY,CAAGN,QAAH,OAAGA,QAAH,CAAeK,WAA/B,CACA,GAAIE,CAAAA,YAAY,CAAGN,QAAH,OAAGA,QAAH,CAAeI,WAA/B,CAEA,GAAMG,CAAAA,aAAa,CAAGC,eAAMC,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,CAAtB,CACA,GAAIL,OAAJ,CAAa,CACX,GAAIc,CAAAA,SAAS,CAAG,EAAhB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,aAAa,CAACM,MAAlC,CAA0CD,CAAC,CAAGA,CAAC,CAAGf,OAAlD,CAA2D,CACzDc,SAAS,CAACG,IAAV,CAAeP,aAAa,CAACQ,KAAd,CAAoBH,CAApB,CAAuBA,CAAC,CAAGf,OAA3B,CAAf,EACD,CAED,MACE,8BAAC,kBAAD,0BACMP,YAAY,CAACC,IADnB,EAEE,KAAK,CAAEe,YAFT,EAGMH,cAHN,EAIE,GAAG,CAAEP,GAJP,8EAMGe,SAAS,CAACK,GAAV,CAAc,SAACC,GAAD,CAAMC,QAAN,CAAmB,CAChC,MACE,8BAAC,kBAAD,EAAQ,KAAK,CAAEb,YAAf,CAA6B,GAAG,CAAEa,QAAlC,8EACGD,GAAG,CAACD,GAAJ,CAAQ,SAACG,GAAD,CAAc,CACrB,MACE,8BAAC,eAAD,0BAAS7B,YAAY,CAACG,IAAtB,EAA4B,GAAG,CAAE0B,GAAG,CAACC,GAArC,+EACGD,GADH,CADF,CAKD,CANA,CADH,CADF,CAWD,CAZA,CANH,CADF,CAsBD,CA5BD,IA+BK,IAAIlB,aAAJ,CAAmB,CACtB,MACE,8BAAC,eAAD,wBACE,aAAa,CAAC,KADhB,CAEE,QAAQ,CAAC,MAFX,CAGE,cAAc,CAAC,QAHjB,EAIME,cAJN,EAKE,GAAG,CAAEP,GALP,8EAOGW,aAAa,CAACS,GAAd,CAAkB,SAACG,GAAD,CAAc,CAC/B,MACE,8BAAC,eAAD,0BACM7B,YAAY,CAACG,IADnB,EAEE,EAAE,CAAEY,YAFN,CAGE,EAAE,CAAEC,YAHN,CAIE,GAAG,CAAEa,GAAG,CAACC,GAJX,CAKE,QAAQ,CAAEnB,aALZ,+EAOGkB,GAPH,CADF,CAWD,CAZA,CAPH,CADF,CAuBD,CAED,MAAO,2DAAP,CACD,CAzED,C,aA0EeX,eAAMa,IAAN,CAAWb,eAAMc,UAAN,CAAiB5B,UAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        border: '1px solid black',\n      },\n      cols: {\n        border: '1px solid red',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (props: ISimpleGridProps, ref?: any): JSX.Element => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props);\n  let cellSpacing = space ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack\n        {...DEBUG_STYLES.rows}\n        space={cellSpacingY}\n        {...remainingProps}\n        ref={ref}\n      >\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        {...remainingProps}\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"]}