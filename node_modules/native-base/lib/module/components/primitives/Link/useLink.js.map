{"version":3,"sources":["useLink.ts"],"names":["linkToHREF","URL","Linking","openURL","catch","err","console","error","addOnPressFunctionality","href","callback","useLink","props","isExternal","onPress","_ref","platformLinkProps","Platform","OS","onClick","current","target","linkProps","accessibilityRole","accessible"],"mappings":"oPAAA,yCAIA,GAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,GAAD,CAAiB,CAClCC,qBAAQC,OAAR,CAAgBF,GAAhB,EAAqBG,KAArB,CAA2B,SAACC,GAAD,QAASC,CAAAA,OAAO,CAACC,KAAR,CAAc,mBAAd,CAAmCF,GAAnC,CAAT,EAA3B,EACD,CAFD,CAIA,GAAMG,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,IAAD,CAAqBC,QAArB,CAAuC,CACrED,IAAI,CAAGT,UAAU,CAACS,IAAD,CAAb,CAAsB,EAA1B,CACAC,QAAQ,CAAGA,QAAQ,EAAX,CAAgB,UAAM,CAAE,CAAhC,CACD,CAHD,CAKO,QAASC,CAAAA,OAAT,CAAiBC,KAAjB,CAAsC,IACnCH,CAAAA,IADmC,CACCG,KADD,CACnCH,IADmC,CAC7BI,UAD6B,CACCD,KADD,CAC7BC,UAD6B,CACjBC,QADiB,CACCF,KADD,CACjBE,OADiB,CACRC,IADQ,CACCH,KADD,CACRG,IADQ,CAG3C,GAAIC,CAAAA,iBAAiB,CAAG,EAAxB,CAEA,GAAIC,sBAASC,EAAT,GAAgB,KAApB,CAA2B,CACzBF,iBAAiB,CAAG,CAClBP,IAAI,CAAJA,IADkB,CAElBU,OAAO,CAAEL,QAFS,CAApB,CAKA,GAAID,UAAU,EAAIE,IAAI,CAACK,OAAvB,CAAgC,CAC9BL,IAAI,CAACK,OAAL,CAAaC,MAAb,CAAsB,QAAtB,CACD,CACF,CATD,IASO,CACLL,iBAAiB,CAAG,CAClBF,OAAO,CAAE,kBAAM,CACbN,uBAAuB,CAACC,IAAD,CAAOK,QAAP,CAAvB,CACD,CAHiB,CAApB,CAKD,CAED,MAAO,CACLQ,SAAS,0BACJN,iBADI,EAEPO,iBAAiB,CAAE,MAFZ,CAGPC,UAAU,CAAE,IAHL,EADJ,CAAP,CAOD","sourcesContent":["import { Linking, Platform } from 'react-native';\nimport type { IUseLinkProp } from './types';\nimport type { AccessibilityRole } from 'react-native';\n\nconst linkToHREF = (URL: string) => {\n  Linking.openURL(URL).catch((err) => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href: string | any, callback: any) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props: IUseLinkProp) {\n  const { href, isExternal, onPress, _ref } = props;\n\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress,\n    };\n    // Adding target to a tag created by RN-Web\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      },\n    };\n  }\n\n  return {\n    linkProps: {\n      ...platformLinkProps,\n      accessibilityRole: 'link' as AccessibilityRole,\n      accessible: true,\n    },\n  };\n}\n"]}