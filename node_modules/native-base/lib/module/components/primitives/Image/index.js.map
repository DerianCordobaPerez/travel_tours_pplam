{"version":3,"sources":["index.tsx"],"names":["StyledImage","RNImage","color","space","layout","flexbox","border","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","Image","ref","source","props","alt","fallbackSource","ignoreFallback","_alt","newProps","renderedSource","setSource","alternate","setAlternate","React","useEffect","onImageLoadError","event","console","warn","nativeEvent","error","onError"],"mappings":"ohBAAA,qDACA,yCACA,wEACA,2CACA,uDASA,qDACA,2D,iIAGA,GAAMA,CAAAA,WAAW,CAAG,oBAAOC,kBAAP,EAClBC,mBADkB,CAElBC,mBAFkB,CAGlBC,oBAHkB,CAIlBC,qBAJkB,CAKlBC,oBALkB,CAMlBC,sBANkB,CAOlBC,2BAPkB,CAQlBC,yBARkB,CASlBC,6BATkB,CAUlBC,0BAVkB,CAWlBC,yBAXkB,CAYlBC,wBAZkB,CAalBC,yBAbkB,CAApB,CAgBA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAoCC,GAApC,CAAiD,IAA9CC,CAAAA,MAA8C,MAA9CA,MAA8C,CAAnCC,KAAmC,gFAOzD,sCAAmB,OAAnB,CAA4BA,KAA5B,CAPyD,CAE3DC,GAF2D,qBAE3DA,GAF2D,CAG3DC,cAH2D,qBAG3DA,cAH2D,CAI3DC,cAJ2D,qBAI3DA,cAJ2D,CAK3DC,IAL2D,qBAK3DA,IAL2D,CAMxDC,QANwD,2HAQzB,oBAASN,MAAT,CARyB,qDAQtDO,cARsD,eAQtCC,SARsC,8BAS3B,oBAAS,KAAT,CAT2B,sDAStDC,SATsD,eAS3CC,YAT2C,eAW7DC,eAAMC,SAAN,CAAgB,UAAM,CACpBF,YAAY,CAAC,KAAD,CAAZ,CACAF,SAAS,CAACR,MAAD,CAAT,CACD,CAHD,CAGG,CAACA,MAAD,CAHH,EAKA,GAAMa,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAgB,CACvCC,OAAO,CAACC,IAAR,CAAaF,KAAK,CAACG,WAAN,CAAkBC,KAA/B,EACA,GACE,CAACd,cAAD,EACAD,cADA,EAEAA,cAAc,GAAKI,cAHrB,CAIE,CACAC,SAAS,CAACL,cAAD,CAAT,CACD,CAND,IAMO,CACLO,YAAY,CAAC,IAAD,CAAZ,CACD,CACF,CAXD,CAaA,GAAI,CAACR,GAAL,CAAU,CACRa,OAAO,CAACC,IAAR,CAAa,yCAAb,EACD,CAED,GAAIP,SAAJ,CAAe,CACb,MAAO,8BAAC,aAAD,0BAAUJ,IAAV,gFAAiBH,GAAjB,CAAP,CACD,CACD,MACE,8BAAC,WAAD,wBACE,MAAM,CAAEK,cADV,CAEE,kBAAkB,CAAEL,GAFtB,CAGE,GAAG,CAAEA,GAHP,EAIMI,QAJN,EAKE,OAAO,CAAEL,KAAK,CAACkB,OAAN,CAAgBlB,KAAK,CAACkB,OAAtB,CAAgCN,gBAL3C,CAME,GAAG,CAAEd,GANP,8EADF,CAUD,CA9CD,C,aAgDe,gBAAK,sBAAWD,KAAX,CAAL,C","sourcesContent":["import React, { useState, memo, forwardRef } from 'react';\nimport { Image as RNImage } from 'react-native';\nimport styled from 'styled-components/native';\nimport { border, color, flexbox, layout, space, position } from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customPosition,\n} from '../../../utils/customProps';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IImageProps } from './types';\n\nconst StyledImage = styled(RNImage)<IImageProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\n\nconst Image = ({ source, ...props }: IImageProps, ref: any) => {\n  const {\n    alt,\n    fallbackSource,\n    ignoreFallback,\n    _alt,\n    ...newProps\n  } = usePropsResolution('Image', props);\n  const [renderedSource, setSource] = useState(source);\n  const [alternate, setAlternate] = useState(false);\n\n  React.useEffect(() => {\n    setAlternate(false);\n    setSource(source);\n  }, [source]);\n\n  const onImageLoadError = (event: any) => {\n    console.warn(event.nativeEvent.error);\n    if (\n      !ignoreFallback &&\n      fallbackSource &&\n      fallbackSource !== renderedSource\n    ) {\n      setSource(fallbackSource);\n    } else {\n      setAlternate(true);\n    }\n  };\n\n  if (!alt) {\n    console.warn('Please pass alt prop to Image component');\n  }\n\n  if (alternate) {\n    return <Text {..._alt}>{alt}</Text>;\n  }\n  return (\n    <StyledImage\n      source={renderedSource}\n      accessibilityLabel={alt}\n      alt={alt}\n      {...newProps}\n      onError={props.onError ? props.onError : onImageLoadError}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Image));\nexport type { IImageProps };\n"]}