{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","ref","icon","children","wrapperRef","props","formControlContext","checkboxGroupContext","React","useContext","CheckboxGroupContext","_interactionBox","_iterationBoxPressed","_pressed","_checkbox","_checboxChecked","_checked","_checkboxDisabled","_disabled","_checkboxInvalid","_invalid","_icon","isInvalid","themedProps","state","defaultSelected","defaultIsChecked","isSelected","isChecked","groupState","value","inputProps","checked","disabled","sizedIcon","cloneElement","isPressed"],"mappings":"wbAAA,qDACA,uCACA,2DACA,+CACA,yDACA,mDACA,uCAEA,6CACA,8CACA,sDACA,oC,uIAEA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAEfC,GAFe,CAGZ,IAFDC,CAAAA,IAEC,MAFDA,IAEC,CAFKC,QAEL,MAFKA,QAEL,CAFeC,UAEf,MAFeA,UAEf,CAF8BC,KAE9B,8EACH,GAAMC,CAAAA,kBAAkB,CAAG,wCAA3B,CAEA,GAAMC,CAAAA,oBAAoB,CAAGC,eAAMC,UAAN,CAAiBC,mCAAjB,CAA7B,CAHG,wBAeC,sCAAmB,UAAnB,0BACCH,oBADD,CAECD,kBAFD,CAGCD,KAHD,EAfD,2CAKDM,eALC,CAK4BC,oBAL5B,uBAKkBC,QALlB,CAKqDF,eALrD,sHAMDG,SANC,CAOWC,eAPX,wBAOCC,QAPD,CAQYC,iBARZ,wBAQCC,SARD,CASWC,gBATX,wBASCC,QATD,CAUIN,SAVJ,mGAYDO,KAZC,qBAYDA,KAZC,CAaDC,SAbC,qBAaDA,SAbC,CAcEC,WAdF,gHAqBH,GAAMC,CAAAA,KAAK,CAAG,oDACTnB,KADS,EAEZoB,eAAe,CAAEpB,KAAK,CAACqB,gBAFX,CAGZC,UAAU,CAAEtB,KAAK,CAACuB,SAHN,GAAd,CAKA,GAAMC,CAAAA,UAAU,CAAG,sBAAWnB,mCAAX,CAAnB,CA1BG,UA+BoBmB,UAAU,CAE7B,6DAEON,WAFP,EAGIO,KAAK,CAAEP,WAAW,CAACO,KAHvB,GAKED,UAAU,CAACL,KALb,CAMEvB,GANF,CAF6B,CAW7B,2BAAYsB,WAAZ,CAAyBC,KAAzB,CAAgCvB,GAAhC,CA1CD,CA+BK8B,UA/BL,OA+BKA,UA/BL,IA4CKC,CAAAA,OA5CL,CA4C2BD,UA5C3B,CA4CKC,OA5CL,CA4CcC,QA5Cd,CA4C2BF,UA5C3B,CA4CcE,QA5Cd,CA8CH,GAAMC,CAAAA,SAAS,CAAGhC,IAAI,CAClB,iBACEM,gBAAM2B,YAAN,CACEjC,IADF,0BAGOmB,KAHP,EAKEnB,IAAI,CAACG,KAAL,CAAWF,QALb,CADF,EADkB,CASlB,IATJ,CAUA,MACE,8BAAC,oBAAD,0BACO4B,UADP,EAEE,GAAG,CAAE,qBAAU,CAAC9B,GAAD,CAAMG,UAAN,CAAV,CAFP,CAGE,iBAAiB,CAAC,UAHpB,8EAKG,eAAwB,IAArBgC,CAAAA,SAAqB,OAArBA,SAAqB,CACvB,MACE,8BAAC,cAAD,wBACE,aAAa,CAAC,KADhB,CAEE,cAAc,CAAC,SAFjB,CAGE,UAAU,CAAC,QAHb,CAIE,YAAY,CAAC,MAJf,EAKMb,WALN,gFAOE,6BAAC,cAAD,+EAEE,6BAAC,YAAD,0BACMZ,eADN,CAEOyB,SAAS,EAAIxB,oBAFpB,EAGE,CAAC,CAAE,CAHL,CAIE,CAAC,CAAC,MAJJ,CAKE,MAAM,CAAC,MALT,CAME,MAAM,CAAE,CAAC,CANX,+EAFF,CAWE,6BAAC,cAAD,0BACME,SADN,CAEOkB,OAAO,EAAIjB,eAFlB,CAGOkB,QAAQ,EAAIhB,iBAHnB,CAIOK,SAAS,EAAIH,gBAJpB,gFAMGjB,IAAI,EAAIgC,SAAR,EAAqBF,OAArB,CACCE,SAAS,EADV,CAGC,6BAAC,gBAAD,0BAAeb,KAAf,EAAsB,OAAO,CAAEW,OAAO,CAAG,CAAH,CAAO,CAA7C,gFATJ,CAXF,CAPF,CAgCG7B,QAhCH,CADF,CAoCD,CA1CH,CADF,CA8CD,CAzGD,C,aA2Ge,gBAAK,sBAAWH,QAAX,CAAL,C","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { mergeRefs } from './../../../utils';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { CheckIcon } from '../Icon/Icons';\n\nconst Checkbox = (\n  { icon, children, wrapperRef, ...props }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const {\n    _interactionBox: { _pressed: _iterationBoxPressed, ..._interactionBox },\n    _checkbox: {\n      _checked: _checboxChecked,\n      _disabled: _checkboxDisabled,\n      _invalid: _checkboxInvalid,\n      ..._checkbox\n    },\n    _icon,\n    isInvalid,\n    ...themedProps\n  } = usePropsResolution('Checkbox', {\n    ...checkboxGroupContext,\n    ...formControlContext,\n    ...props,\n  });\n\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n  const groupState = useContext(CheckboxGroupContext);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps } = groupState\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...themedProps,\n          value: themedProps.value,\n        },\n        groupState.state,\n        ref\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(themedProps, state, ref);\n\n  const { checked, disabled } = inputProps;\n\n  const sizedIcon = icon\n    ? () =>\n        React.cloneElement(\n          icon,\n          {\n            ..._icon,\n          },\n          icon.props.children\n        )\n    : null;\n  return (\n    <Pressable\n      {...(inputProps as IPressableProps)}\n      ref={mergeRefs([ref, wrapperRef])}\n      accessibilityRole=\"checkbox\"\n    >\n      {({ isPressed }: any) => {\n        return (\n          <Center\n            flexDirection=\"row\"\n            justifyContent=\"center \"\n            alignItems=\"center\"\n            borderRadius=\"full\"\n            {...themedProps}\n          >\n            <Center>\n              {/* Interaction Wrapper */}\n              <Box\n                {..._interactionBox}\n                {...(isPressed && _iterationBoxPressed)}\n                p={5}\n                w=\"100%\"\n                height=\"100%\"\n                zIndex={-1}\n              />\n              {/* Checkbox */}\n              <Center\n                {..._checkbox}\n                {...(checked && _checboxChecked)}\n                {...(disabled && _checkboxDisabled)}\n                {...(isInvalid && _checkboxInvalid)}\n              >\n                {icon && sizedIcon && checked ? (\n                  sizedIcon()\n                ) : (\n                  <CheckIcon {..._icon} opacity={checked ? 1 : 0} />\n                )}\n              </Center>\n            </Center>\n            {/* Label */}\n            {children}\n          </Center>\n        );\n      }}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Checkbox));\n"]}