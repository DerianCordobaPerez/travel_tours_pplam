{"version":3,"sources":["Pressable.tsx"],"names":["useHover","React","useState","isHovered","setHovered","pressableProps","onHoverIn","onHoverOut","useFocus","isFocused","setFocused","focusProps","onFocus","onBlur","useIsPressed","isPressed","setIsPressed","onPressIn","onPressOut","StyledPressable","RNPressable","color","space","layout","flexbox","border","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","Pressable","ref","children","props","isPressedProps","_hover","_pressed","_focus","_focusVisible","_disabled","themeProps","isFocusVisible","focusRingProps","disabled"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport styled from 'styled-components/native';\nimport { composeEventHandlers } from '../../../utils';\nimport { border, color, flexbox, layout, position, space } from 'styled-system';\nimport type { IPressableProps } from './types';\nimport {\n  customBackground,\n  customBorder,\n  customExtra,\n  customLayout,\n  customOutline,\n  customPosition,\n  customShadow,\n} from '../../../utils/customProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    pressableProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false),\n    },\n    isHovered,\n  };\n};\n\nconst useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n    isFocused,\n  };\n};\n\nconst useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false),\n    },\n    isPressed,\n  };\n};\n\nconst StyledPressable = styled(RNPressable)<IPressableProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\n\nconst Pressable = (\n  {\n    children,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...props\n  }: IPressableProps,\n  ref: any\n) => {\n  const { pressableProps, isHovered } = useHover();\n  const { pressableProps: isPressedProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const {\n    _hover,\n    _pressed,\n    _focus,\n    _focusVisible,\n    _disabled,\n    ...themeProps\n  } = usePropsResolution('Pressable', props);\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n  // TODO : Replace Render props with Context Hook\n  return (\n    <StyledPressable\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, isPressedProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, isPressedProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, pressableProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, pressableProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...themeProps}\n      {...(isHovered && _hover)}\n      {...(isFocused && _focus)}\n      {...(isFocusVisible && _focusVisible)}\n      {...(isPressed && _pressed)}\n      {...(props.disabled && _disabled)}\n    >\n      {typeof children !== 'function'\n        ? children\n        : children({\n            isPressed,\n            isHovered,\n            isFocused,\n          })}\n    </StyledPressable>\n  );\n};\n\nexport default memo(forwardRef(Pressable));\n"]}