{"version":3,"sources":["Select.tsx"],"names":["unstyledSelecWebtStyles","width","height","appearance","WebkitAppearance","MozAppearance","SelectContext","React","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","ref","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","size","wrapperRef","props","selectProps","isDisabled","nativeID","disabled","_ref","useRef","themeProps","useState","isOpen","setIsOpen","focusProps","isFocusVisible","hoverProps","isHovered","value","onChange","newValue","setValue","itemsList","Children","map","child","label","selectedItemArray","filter","item","selectedItem","length","variant","customDropdownIconProps","_actionSheetContent","newProps","stylingProps","border","borderProps","remainingProps","margin","layout","flexbox","position","background","layoutProps","nonLayoutProps","rightIcon","commonInput","_hover","handleClose","borderRadius","_focus","Platform","OS","e","target"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, View, Pressable } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\n\nconst unstyledSelecWebtStyles = {\n  width: '100%',\n  height: '100%',\n  appearance: 'none',\n  WebkitAppearance: 'none',\n  MozAppearance: 'none',\n};\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    size,\n    _item,\n    _selectedItem,\n    wrapperRef,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n\n  const isDisabled = selectProps.disabled;\n\n  const _ref = React.useRef(null);\n  const themeProps = usePropsResolution('Input', { ...props, size });\n  let [isOpen, setIsOpen] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  let itemsList: Array<{ label: string; value: string }> = React.Children.map(\n    children,\n    (child: any) => {\n      return {\n        label: child.props.label,\n        value: child.props.value,\n      };\n    }\n  );\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item.value === value\n  );\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const {\n    variant,\n    customDropdownIconProps,\n    _actionSheetContent,\n    ...newProps\n  } = usePropsResolution('Select', props);\n  const [borderProps, remainingProps] = extractInObject(newProps, [\n    ...stylingProps.border,\n  ]);\n  const [layoutProps, nonLayoutProps] = extractInObject(remainingProps, [\n    ...stylingProps.margin,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n  ]);\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {...customDropdownIconProps} />\n    );\n\n  const commonInput = (\n    <Input\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem?.label}\n      placeholder={placeholder}\n      editable={false}\n      focusable={false}\n      size={size}\n      variant={variant}\n      InputRightElement={rightIcon}\n      {...(isHovered ? themeProps._hover : {})}\n      {...nonLayoutProps}\n      {...borderProps}\n    />\n  );\n\n  const handleClose = () => setIsOpen(false);\n\n  return (\n    <Box\n      borderWidth={1}\n      borderColor=\"transparent\"\n      {...layoutProps}\n      borderRadius={themeProps.borderRadius}\n      {...(isFocusVisible ? themeProps._focus : {})}\n      ref={wrapperRef}\n    >\n      {Platform.OS === 'web' ? (\n        <>\n          <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}>\n            <select\n              {...selectProps}\n              disabled={isDisabled}\n              {...focusProps}\n              {...hoverProps}\n              ref={mergeRefs([ref, _ref])}\n              //@ts-ignore\n              style={unstyledSelecWebtStyles}\n              onChange={(e) => {\n                setValue(e.target.value);\n              }}\n              value={value}\n              aria-label={placeholder}\n            >\n              {children}\n            </select>\n          </Box>\n          {commonInput}\n        </>\n      ) : (\n        <>\n          <Pressable\n            onPress={() => setIsOpen(true)}\n            disabled={isDisabled}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"button\"\n            ref={mergeRefs([ref, _ref])}\n          >\n            <View pointerEvents=\"none\">{commonInput}</View>\n          </Pressable>\n          <Actionsheet isOpen={isOpen} onClose={handleClose}>\n            <Actionsheet.Content {..._actionSheetContent}>\n              <ScrollView width=\"100%\">\n                <SelectContext.Provider\n                  value={{\n                    onValueChange: setValue,\n                    selectedValue: value,\n                    _selectedItem: _selectedItem ?? {},\n                    _item: _item ?? {},\n                  }}\n                >\n                  {children}\n                </SelectContext.Provider>\n              </ScrollView>\n            </Actionsheet.Content>\n          </Actionsheet>\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]}