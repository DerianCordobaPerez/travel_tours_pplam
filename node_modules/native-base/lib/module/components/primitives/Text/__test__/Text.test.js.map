{"version":3,"sources":["Text.test.tsx"],"names":["jest","useFakeTimers","theme","defaultTheme","fontConfig","Roboto","normal","italic","fonts","heading","body","Provider","props","frame","x","y","width","height","insets","top","left","right","bottom","describe","it","getByTestId","text","expect","fontFamily","toBe","newTheme","JSON","parse","stringify","undefined","fontWeight","fontStyle"],"mappings":"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","sourcesContent":["//@ts-nocheck\nimport React from 'react';\nimport { render } from '@testing-library/react-native';\nimport Text from '../../Text';\nimport { NativeBaseProvider } from '../../../../core/NativeBaseProvider';\nimport { theme as defaultTheme } from '../../../../theme';\n\njest.useFakeTimers();\n\nconst theme = {\n  ...defaultTheme,\n  fontConfig: {\n    Roboto: {\n      100: 'Roboto-Light',\n      200: 'Roboto-Light',\n      300: 'Roboto-Light',\n      400: {\n        normal: 'Roboto-Regular',\n        italic: 'Roboto-Italic',\n      },\n      500: 'Roboto-Medium',\n      600: 'Roboto-Medium',\n      700: {\n        normal: 'Roboto-Bold',\n        italic: 'Roboto-BoldItalic',\n      },\n      800: 'Roboto-Bold',\n      900: 'Roboto-Black',\n    },\n  },\n  fonts: {\n    ...defaultTheme.fonts,\n    heading: 'Roboto',\n    body: 'Roboto',\n  },\n};\n\nconst Provider = (props: any) => {\n  return (\n    <NativeBaseProvider\n      theme={theme}\n      {...props}\n      initialWindowMetrics={{\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }}\n    />\n  );\n};\n\ndescribe('Text component', () => {\n  it('resolves default custom fonts', () => {\n    let { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\">hello world</Text>\n      </Provider>\n    );\n    let text = getByTestId('my-text');\n    expect(text.props.fontFamily).toBe('Roboto-Regular');\n  });\n\n  it('resolves custom font variants', () => {\n    let { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontStyle=\"italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    let text = getByTestId('my-text');\n    expect(text.props.fontFamily).toBe('Roboto-Italic');\n  });\n\n  it('resolves to bold italic font', () => {\n    let { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight=\"bold\" fontStyle=\"italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    let text = getByTestId('my-text');\n    expect(text.props.fontFamily).toBe('Roboto-BoldItalic');\n  });\n\n  it('resolves to medium font when fontWeight is 500', () => {\n    let { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={500}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    let text = getByTestId('my-text');\n    expect(text.props.fontFamily).toBe('Roboto-Medium');\n  });\n\n  it('resolves to medium font when fontWeight is medium', () => {\n    let { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={'medium'}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    let text = getByTestId('my-text');\n    expect(text.props.fontFamily).toBe('Roboto-Medium');\n  });\n\n  it('respects fontFamily property', () => {\n    let { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontFamily=\"Merriweather-Italic\">\n          hello world\n        </Text>\n      </Provider>\n    );\n    let text = getByTestId('my-text');\n    expect(text.props.fontFamily).toBe('Merriweather-Italic');\n  });\n\n  it(\"doesn't break if custom font is not specified\", () => {\n    let newTheme = JSON.parse(JSON.stringify(defaultTheme));\n    delete newTheme.fontConfig;\n    let { getByTestId } = render(\n      <Provider theme={newTheme}>\n        <Text testID=\"my-text\" fontWeight={400}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    let text = getByTestId('my-text');\n    expect(text.props.fontFamily).toBe(undefined);\n  });\n\n  it(\"doesn't pass fontWeight and fontStyle if a custom fontFamily is resolved\", () => {\n    let newTheme = JSON.parse(JSON.stringify(defaultTheme));\n    delete newTheme.fontConfig;\n    let { getByTestId } = render(\n      <Provider>\n        <Text testID=\"my-text\" fontWeight={400}>\n          hello world\n        </Text>\n      </Provider>\n    );\n    let text = getByTestId('my-text');\n    expect(text.props.fontWeight).toBe(undefined);\n    expect(text.props.fontStyle).toBe(undefined);\n    expect(text.props.fontFamily).toBe('Roboto-Regular');\n  });\n});\n"]}