{"version":3,"sources":["index.tsx"],"names":["StyledNBSwitch","RNSwitch","color","space","layout","flexbox","border","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","Switch","ref","style","onToggle","isDisabled","isInvalid","isChecked","defaultIsChecked","accessibilityLabel","accessibilityHint","props","state","defaultSelected","_onTrackColor","onTrackColor","_offTrackColor","offTrackColor","_onThumbColor","onThumbColor","_offThumbColor","offThumbColor","themeStyle","_hover","newProps","borderColorInvalid","checked","isSelected","inValidPropFactors","borderWidth","borderRadius","borderColor","computedStyle","StyleSheet","flatten","_ref","React","useRef","isHovered","false","true","toggle"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { StyleSheet, ViewStyle, Switch as RNSwitch } from 'react-native';\nimport styled from 'styled-components/native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { border, color, flexbox, layout, space, position } from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customPosition,\n} from '../../../utils/customProps';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\n\nconst StyledNBSwitch = styled(RNSwitch)<ISwitchProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\n\nconst Switch = (\n  {\n    style,\n    onToggle,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    style: themeStyle,\n    _hover,\n    ...newProps\n  } = usePropsResolution('Switch', props);\n  const borderColorInvalid = useToken('colors', 'danger.600');\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n  const inValidPropFactors = {\n    borderWidth: 1,\n    borderRadius: 16,\n    borderColor: borderColorInvalid,\n  };\n\n  let computedStyle: ViewStyle = StyleSheet.flatten([\n    themeStyle,\n    style,\n    isInvalid ? inValidPropFactors : {},\n  ]);\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...(isHovered && _hover)}\n      {...newProps}\n      disabled={isDisabled}\n      onValueChange={onToggle ? onToggle : state.toggle}\n      value={checked}\n      style={computedStyle}\n      ref={mergeRefs([ref, _ref])}\n      opacity={isDisabled ? 0.4 : 1}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n"]}