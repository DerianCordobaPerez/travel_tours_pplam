{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["defaultInitialWindowMetricsBasedOnPlatform","Platform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","props","colorModeManager","config","children","theme","propsTheme","defaultTheme","initialWindowMetrics"],"mappings":"8KAAA,oDACA,gDACA,0EAKA,+CACA,iCAEA,uFACA,qDACA,qDACA,sDAIA,yC,uHAKA,GAAMA,CAAAA,0CAA0D,CAAGC,sBAASC,MAAT,CACjE,CACEC,GAAG,CAAE,CACHC,KAAK,CAAE,CAAEC,CAAC,CAAE,CAAL,CAAQC,CAAC,CAAE,CAAX,CAAcC,KAAK,CAAE,CAArB,CAAwBC,MAAM,CAAE,CAAhC,CADJ,CAEHC,MAAM,CAAE,CAAEC,GAAG,CAAE,CAAP,CAAUC,IAAI,CAAE,CAAhB,CAAmBC,KAAK,CAAE,CAA1B,CAA6BC,MAAM,CAAE,CAArC,CAFL,CADP,CAKEC,OAAO,CAAEC,gDALX,CADiE,CAAnE,CAmBA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAoC,sBAE3DC,CAAAA,gBAF2D,CAOzDD,KAPyD,CAE3DC,gBAF2D,eAOzDD,KAPyD,CAG3DE,MAH2D,CAG3DA,MAH2D,wBAGlD,EAHkD,eAI3DC,QAJ2D,CAOzDH,KAPyD,CAI3DG,QAJ2D,cAOzDH,KAPyD,CAK3DI,KAL2D,CAKpDC,UALoD,uBAKvCC,YALuC,cAM3DC,oBAN2D,CAOzDP,KAPyD,CAM3DO,oBAN2D,CAQ7D,GAAMH,CAAAA,KAAK,gBAAGF,MAAM,CAACE,KAAV,sBAAmBC,UAA9B,CAEA,MACE,8BAAC,qBAAD,EAAe,KAAK,CAAED,KAAtB,6EACE,6BAAC,2CAAD,EAA0B,MAAM,CAAEF,MAAlC,6EACE,6BAAC,4CAAD,EACE,cAAc,CACZK,oBADY,OACZA,oBADY,CACYxB,0CAF5B,6EAKE,6BAAC,uBAAD,EACE,gBAAgB,CAAEkB,gBADpB,CAEE,OAAO,CAAEG,KAAK,CAACF,MAFjB,8EAIE,6BAAC,yBAAD,+EACE,6BAAC,oBAAD,+EACE,6BAAC,kBAAD,+EAAcC,QAAd,CADF,CADF,CAJF,CALF,CADF,CADF,CADF,CAsBD,CAhCD,C","sourcesContent":["import React from 'react';\nimport { ThemeProvider } from 'styled-components/native';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider } from '../components/composites/Toast';\nimport {\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { Platform } from 'react-native';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = {},\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <NativeBaseConfigProvider config={config}>\n        <SafeAreaProvider\n          initialMetrics={\n            initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n          }\n        >\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </SafeAreaProvider>\n      </NativeBaseConfigProvider>\n    </ThemeProvider>\n  );\n};\n\nexport { NativeBaseProvider };\n"]}