{"version":3,"sources":["colors.ts"],"names":["mode","light","dark","props","colorMode","transparentize","color","opacity","theme","raw","getColor","setAlpha","toRgbString","fallback","hex","isValid","tone","isDark","isLight","randomColor","opts","Color","random","toHexString","string","colors","randomColorFromList","randomColorFromString","randomFromList","list","Math","floor","length","str","index","i","charCodeAt","hash","toString","j","value","substr"],"mappings":"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","sourcesContent":["import get from 'lodash.get';\nimport isEmpty from 'lodash.isempty';\nimport Color from 'tinycolor2';\nimport type { Dict } from './utils';\n\nexport function mode(light: any, dark: any) {\n  return (props: any) => (props.colorMode === 'dark' ? dark : light);\n}\n\nexport const transparentize = (color: string, opacity: number) => (\n  theme: Dict\n) => {\n  const raw = getColor(theme, color);\n  return Color(raw).setAlpha(opacity).toRgbString();\n};\n\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color);\n  const isValid = Color(hex).isValid();\n  return isValid ? hex : fallback;\n};\n\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color);\n  const isDark = Color(hex).isDark();\n  return isDark ? 'dark' : 'light';\n};\n\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === 'dark';\n\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === 'light';\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string;\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[];\n}\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = Color.random().toHexString();\n\n  if (!opts || isEmpty(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0;\n  if (str.length === 0) return list[0];\n  for (let i = 0; i < str.length; i++) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n  index = ((index % list.length) + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n  let color = '#';\n  for (let j = 0; j < 3; j++) {\n    const value = (hash >> (j * 8)) & 255;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n  return color;\n}\n"]}