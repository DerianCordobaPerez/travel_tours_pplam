{"version":3,"sources":["useScreenReaderEnabled.ts"],"names":["useScreenReaderEnabled","React","useState","enabled","setEnabled","mountedRef","useRef","handleSetEnabled","value","current","useEffect","setInitialValue","AccessibilityInfo","isScreenReaderEnabled","res","handler","addEventListener","event","removeEventListener"],"mappings":"6WAAA,oDACA,yCAEO,QAASA,CAAAA,sBAAT,EAAkC,qBACTC,eAAMC,QAAN,CAAe,KAAf,CADS,iEAChCC,OADgC,qBACvBC,UADuB,qBAEvC,GAAMC,CAAAA,UAAU,CAAGJ,eAAMK,MAAN,CAAa,KAAb,CAAnB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAoB,CAC3C,GAAIH,UAAU,CAACI,OAAf,CAAwB,CACtBL,UAAU,CAACI,KAAD,CAAV,CACD,CACF,CAJD,CAMAP,eAAMS,SAAN,CAAgB,UAAM,CACpBL,UAAU,CAACI,OAAX,CAAqB,IAArB,CACA,QAAeE,CAAAA,eAAf,uLACoBC,+BAAkBC,qBAAlB,EADpB,SACQC,GADR,eAEEP,gBAAgB,CAACO,GAAD,CAAhB,CAFF,qEAKA,GAAIC,CAAAA,OAAY,CAAGH,+BAAkBI,gBAAlB,CACjB,qBADiB,CAEjB,SAACC,KAAD,CAAgB,CACdV,gBAAgB,CAACU,KAAD,CAAhB,CACD,CAJgB,CAAnB,CAOAN,eAAe,GACf,MAAO,WAAM,CACXN,UAAU,CAACI,OAAX,CAAqB,KAArB,CACAG,+BAAkBM,mBAAlB,CAAsC,qBAAtC,CAA6DH,OAA7D,EACD,CAHD,CAID,CAnBD,EAqBA,MAAOZ,CAAAA,OAAP,CACD","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]}