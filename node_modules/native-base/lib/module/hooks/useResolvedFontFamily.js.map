{"version":3,"sources":["useResolvedFontFamily.ts"],"names":["useResolvedFontFamily","props","fontFamily","fontStyle","fontWeight","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","fontToken","undefined","fontWeightNumber","fontVariant"],"mappings":"6GAAA,qCAWO,QAASA,CAAAA,qBAAT,CAA+BC,KAA/B,CAIJ,IACOC,CAAAA,UADP,CAC8DD,KAD9D,CACOC,UADP,kBAC8DD,KAD9D,CACmBE,SADnB,CACmBA,SADnB,2BAC+B,QAD/B,oCAC8DF,KAD9D,CACyCG,UADzC,CACyCA,UADzC,4BACsD,GADtD,mBAED,GAAIC,CAAAA,aAAa,CAAGH,UAApB,CACA,GAAII,CAAAA,YAAY,CAAGH,SAAnB,CACA,GAAII,CAAAA,aAAa,CAAGH,UAApB,CAJC,cAM0C,yBAN1C,CAMOI,UANP,WAMOA,UANP,CAMmBC,WANnB,WAMmBA,WANnB,CAMgCC,KANhC,WAMgCA,KANhC,CAOD,GAAIR,UAAU,EAAIA,UAAU,GAAIQ,CAAAA,KAAhC,CAAuC,CACrC,GAAMC,CAAAA,SAAS,CAAGD,KAAK,CAACR,UAAD,CAAvB,CAEA,GAAIM,UAAU,EAAIA,UAAU,CAACG,SAAD,CAA5B,CAAyC,CAKvCJ,aAAa,CAAGK,SAAhB,CAEAN,YAAY,CAAGM,SAAf,CAEA,GAAIC,CAAAA,gBAAgB,CAClBT,UAAU,GAAIK,CAAAA,WAAd,CAA4BA,WAAW,CAACL,UAAD,CAAvC,CAAsDA,UADxD,CAEA,GAAIU,CAAAA,WAAW,CAAGN,UAAU,CAACG,SAAD,CAAV,CAAsBE,gBAAtB,CAAlB,CAEA,GAAI,MAAOC,CAAAA,WAAP,GAAuB,QAA3B,CAAqC,CACnC,GAAIA,WAAW,CAACX,SAAD,CAAf,CAA4BE,aAAa,CAAGS,WAAW,CAACX,SAAD,CAA3B,CAC7B,CAFD,IAEO,CACLE,aAAa,CAAGS,WAAhB,CACD,CACF,CAlBD,IAkBO,CACLT,aAAa,CAAGK,KAAK,CAACR,UAAD,CAArB,CACD,CACF,CAED,MAAO,CACLA,UAAU,CAAEG,aADP,CAELD,UAAU,CAAEG,aAFP,CAGLJ,SAAS,CAAEG,YAHN,CAAP,CAKD","sourcesContent":["import { useTheme } from './useTheme';\n\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: string;\n  fontStyle?: string;\n  fontWeight?: string | number;\n}) {\n  const { fontFamily, fontStyle = 'normal', fontWeight = 400 } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontFamily && fontFamily in fonts) {\n    const fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"]}