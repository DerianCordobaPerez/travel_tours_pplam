{"version":3,"sources":["useContrastText.ts"],"names":["useContrastText","bg","color","contrastThreshold","trueDarkText","trueLightText","trueBg","trueColor","suppressColorAccessibilityWarning","config","accessibleColors","split","bgThemeColorVariant","bgShade","textColor","themeColorsThresholdShades","getContrastThemeColor","getAccessibleContrastColor","shadeThreshold","trueContrastColor","contrastColorToken","darkTextConstrast","getContrastRatio","lightTextConstrast","process","env","NODE_ENV","contrast","console","warn","join","foreground","background","lumA","getLuminance","lumB","Math","max","min","rose","pink","fuchsia","purple","violet","indigo","blue","lightBlue","cyan","teal","emerald","green","lime","yellow","amber","orange","red","warmGray","trueGray","gray","coolGray","blueGray","dark","danger","error","success","warning","muted","primary","info","secondary","light"],"mappings":"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","sourcesContent":["import Color from 'tinycolor2';\nimport { useToken } from './useToken';\nimport { useAccessibleColors } from '../core/color-mode/hooks';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\n\nexport function useContrastText(bg: string, color?: string) {\n  let [\n    contrastThreshold,\n    trueDarkText,\n    trueLightText,\n    trueBg,\n    trueColor,\n  ] = useToken('colors', [\n    'contrastThreshold',\n    'darkText',\n    'lightText',\n    bg,\n    color ?? '',\n  ]);\n\n  let suppressColorAccessibilityWarning = useNativeBaseConfig(\n    'NativeBaseConfigProvider'\n  ).config.suppressColorAccessibilityWarning;\n\n  let [accessibleColors] = useAccessibleColors();\n\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  const [bgThemeColorVariant, bgShade] = bg.split('.');\n\n  const textColor =\n    !accessibleColors &&\n    bgThemeColorVariant &&\n    themeColorsThresholdShades[bgThemeColorVariant]\n      ? getContrastThemeColor(bgThemeColorVariant, bgShade)\n      : getAccessibleContrastColor(\n          contrastThreshold,\n          trueDarkText,\n          trueLightText,\n          trueBg,\n          trueColor,\n          bg,\n          color,\n          suppressColorAccessibilityWarning\n        );\n\n  return textColor;\n}\n\nfunction getContrastThemeColor(bgThemeColorVariant: string, bgShade: string) {\n  let shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n  if (\n    bgShade &&\n    shadeThreshold &&\n    ((bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark') ||\n      (bgThemeColorVariant === 'dark' && bgShade < shadeThreshold))\n  ) {\n    return 'lightText';\n  }\n  return 'darkText';\n}\nfunction getAccessibleContrastColor(\n  contrastThreshold: number,\n  trueDarkText: string,\n  trueLightText: string,\n  trueBg: string,\n  trueColor: string,\n  bg: string,\n  color?: string,\n  suppressColorAccessibilityWarning?: boolean\n) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n  let trueContrastColor;\n  let contrastColorToken;\n  let darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  let lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (\n    darkTextConstrast >= contrastThreshold ||\n    darkTextConstrast > lightTextConstrast\n  ) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const contrast = getContrastRatio(\n      trueBg,\n      trueColor ? trueColor : trueContrastColor\n    );\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn(\n        [\n          `NativeBase: The contrast ratio of ${contrast}:1 for ${\n            color ? color : contrastColorToken\n          } on ${bg}`,\n          'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.',\n          'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast',\n        ].join('\\n')\n      );\n    }\n  }\n  return contrastColorToken;\n}\nfunction getContrastRatio(foreground: string, background: string) {\n  const lumA = Color(foreground).getLuminance();\n  const lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nconst themeColorsThresholdShades: any = {\n  rose: 900,\n  pink: 900,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 900,\n  orange: 900,\n  red: 900,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 900,\n  error: 900,\n  success: 400,\n  warning: 900,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500,\n};\n"]}