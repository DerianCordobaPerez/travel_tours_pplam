{"version":3,"sources":["useControllableProp.ts"],"names":["useControllableProp","prop","state","React","useRef","undefined","isControlled","current","value","useControllableState","props","valueProp","defaultValue","onChange","useState","valueState","setValue","updateValue","useCallback","next","nextValue"],"mappings":"0UAAA,oDAEO,QAASA,CAAAA,mBAAT,CAAgCC,IAAhC,CAAqDC,KAArD,CAA+D,mBAClCC,eAAMC,MAAN,CAAaH,IAAI,GAAKI,SAAtB,CADkC,CACnDC,YADmD,eAC5DC,OAD4D,CAEpE,GAAMC,CAAAA,KAAK,CAAGF,YAAY,EAAI,MAAOL,CAAAA,IAAP,GAAgB,WAAhC,CAA8CA,IAA9C,CAAqDC,KAAnE,CACA,MAAO,CAACI,YAAD,CAAeE,KAAf,CAAP,CACD,CAyBM,QAASC,CAAAA,oBAAT,CAAiCC,KAAjC,CAAsE,IAC5DC,CAAAA,SAD4D,CACtBD,KADsB,CACnEF,KADmE,CACjDI,YADiD,CACtBF,KADsB,CACjDE,YADiD,CACnCC,QADmC,CACtBH,KADsB,CACnCG,QADmC,qBAG5CV,eAAMW,QAAN,CAAeF,YAAf,CAH4C,iEAGpEG,UAHoE,qBAGxDC,QAHwD,qBAI3E,GAAMV,CAAAA,YAAY,CAAGK,SAAS,GAAKN,SAAnC,CAEA,GAAMG,CAAAA,KAAK,CAAGF,YAAY,CAAIK,SAAJ,CAAsBI,UAAhD,CAEA,GAAME,CAAAA,WAAW,CAAGd,eAAMe,WAAN,CAClB,SAACC,IAAD,CAAe,CACb,GAAMC,CAAAA,SAAS,CAAG,MAAOD,CAAAA,IAAP,GAAgB,UAAhB,CAA6BA,IAAI,CAACX,KAAD,CAAjC,CAA2CW,IAA7D,CACA,GAAI,CAACb,YAAL,CAAmB,CACjBU,QAAQ,CAACI,SAAD,CAAR,CACD,CACDP,QAAQ,EAAIA,QAAQ,CAACO,SAAD,CAApB,CACD,CAPiB,CAQlB,CAACd,YAAD,CAAeO,QAAf,CAAyBL,KAAzB,CARkB,CAApB,CAWA,MAAO,CAACA,KAAD,CAAQS,WAAR,CAAP,CACD","sourcesContent":["import React from 'react';\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined);\n  const value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value] as const;\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T;\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T);\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void;\n  /**\n   * The component name (for warnings)\n   */\n  name?: string;\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props;\n\n  const [valueState, setValue] = React.useState(defaultValue as T);\n  const isControlled = valueProp !== undefined;\n\n  const value = isControlled ? (valueProp as T) : valueState;\n\n  const updateValue = React.useCallback(\n    (next: any) => {\n      const nextValue = typeof next === 'function' ? next(value) : next;\n      if (!isControlled) {\n        setValue(nextValue);\n      }\n      onChange && onChange(nextValue);\n    },\n    [isControlled, onChange, value]\n  );\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n"]}