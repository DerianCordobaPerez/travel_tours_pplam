{"version":3,"sources":["useProps.tsx"],"names":["filterAndCalculateProps","theme","colorModeProps","componentTheme","propsReceived","windowWidth","ignoredProps","props","newProps","mergedProps","Platform","OS","useThemeProps","component","width"],"mappings":"4XAAA,0DACA,4DACA,yCACA,kDACA,2CACA,kEACA,8BAEA,GAAMA,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAC9BC,KAD8B,CAE9BC,cAF8B,CAG9BC,cAH8B,CAI9BC,aAJ8B,CAK9BC,WAL8B,CAM3B,sBAIyB,2BAAgBD,aAAhB,CAA+B,CACzD,UADyD,CAEzD,OAFyD,CAGzD,SAHyD,CAIzD,MAJyD,CAKzD,QALyD,CAMzD,SANyD,CAA/B,CAJzB,mEAIEE,YAJF,sBAIgBC,KAJhB,sBAYH,GAAIC,CAAAA,QAAQ,CAAG,0BACbP,KADa,CAEbC,cAFa,CAGbC,cAHa,CAIbI,KAJa,CAKbF,WALa,CAAf,CAOA,GAAII,CAAAA,WAAW,CAAG,yCAAkBD,QAAlB,CAA4BF,YAA5B,CAA0CI,sBAASC,EAAnD,CAAlB,CACA,MAAO,yBAAcF,WAAd,CAAP,CACD,CA3BD,CA6BO,QAASG,CAAAA,aAAT,CAAuBC,SAAvB,CAA0CT,aAA1C,CAA8D,6CAC9B,mCAD8B,CAC3DH,KAD2D,gBAC3DA,KAD2D,CACjDC,cADiD,iEAInE,GAAMC,CAAAA,cAAc,CAAG,oBAAIF,KAAJ,eAAyBY,SAAzB,CAAvB,CAEA,GAAMR,CAAAA,WAAW,uBAAG,sCAAH,eAAG,qBAAuBS,KAA3C,CAGA,MAAOd,CAAAA,uBAAuB,CAC5B,qBAAKC,KAAL,CAAY,CAAC,YAAD,CAAZ,CAD4B,CAE5BC,cAF4B,CAG5BC,cAH4B,CAI5BC,aAJ4B,CAK5BC,WAL4B,CAA9B,CAOD","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  propsReceived: any,\n  windowWidth: any\n) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, [\n    'children',\n    'style',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  let newProps = calculateProps(\n    theme,\n    colorModeProps,\n    componentTheme,\n    props,\n    windowWidth\n  );\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component: string, propsReceived: any) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, `components.${component}`);\n  // console.log('COMPONENT THEME = ', componentTheme);\n  const windowWidth = useWindowDimensions()?.width;\n\n  // To pass the component theme props and component props seperately\n  return filterAndCalculateProps(\n    omit(theme, ['components']),\n    colorModeProps,\n    componentTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]}