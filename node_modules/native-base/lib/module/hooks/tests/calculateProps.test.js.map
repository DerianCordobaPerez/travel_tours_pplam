{"version":3,"sources":["calculateProps.test.tsx"],"names":["describe","wrapper","children","frame","x","y","width","height","insets","top","left","right","bottom","colorModeProps","colorMode","toggleColorMode","setColorMode","test","theme","result","expect","current","toEqual","componentTheme","components","Badge","_text","color","fontSize","fontWeight","textTransform","px","py","borderRadius","bg","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { calculateProps } from '../useThemeProps/utils';\nimport { NativeBaseProvider } from '../../core/NativeBaseProvider';\nimport { theme } from '../../theme';\nimport { renderHook } from '@testing-library/react-hooks';\n\ndescribe('useCalculateProps', () => {\n  const wrapper = ({ children }: any) => (\n    <NativeBaseProvider\n      initialWindowMetrics={{\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }}\n    >\n      {children}\n    </NativeBaseProvider>\n  );\n  const colorModeProps = {\n    colorMode: 'light',\n    toggleColorMode: () => {},\n    setColorMode: () => {},\n  };\n  test('No component theme + no props', () => {\n    const { result } = renderHook(\n      () => calculateProps(theme, colorModeProps, {}, {}, 750),\n      { wrapper }\n    );\n    expect(result.current).toEqual({});\n  });\n\n  test('Only component theme(Badge) + no props', () => {\n    const componentTheme = (theme as any).components.Badge;\n    const { result } = renderHook(\n      () => calculateProps(theme, colorModeProps, componentTheme, {}, 750),\n      { wrapper }\n    );\n    expect(result.current).toEqual({\n      _text: {\n        color: 'gray.900',\n        fontSize: 'xs',\n        fontWeight: 'bold',\n        textTransform: 'uppercase',\n      },\n      px: 1,\n      py: 1,\n      borderRadius: 'lg',\n      bg: 'gray.100',\n      borderWidth: 1,\n      borderColor: 'transparent',\n    });\n  });\n\n  test('Component theme(Badge) + some props', () => {\n    const componentTheme = (theme as any).components.Badge;\n    const { result } = renderHook(\n      () =>\n        calculateProps(theme, colorModeProps, componentTheme, { py: 3 }, 750),\n      { wrapper }\n    );\n    expect(result.current).toEqual({\n      _text: {\n        color: 'gray.900',\n        fontSize: 'xs',\n        fontWeight: 'bold',\n        textTransform: 'uppercase',\n      },\n      px: 1,\n      py: 3,\n      borderRadius: 'lg',\n      bg: 'gray.100',\n      borderWidth: 1,\n      borderColor: 'transparent',\n    });\n  });\n});\n"]}