{"version":3,"sources":["getSpacedChildren.tsx"],"names":["children","space","axis","reverse","divider","childrenArray","React","Children","toArray","orientation","spacingProp","mx","my","cloneElement","map","child","index","key","length","width","height"],"mappings":"uVAAA,oDACA,yE,oIAae,kBACbA,QADa,CAEbC,KAFa,CAGbC,IAHa,CAIbC,OAJa,CAKbC,OALa,CAML,CACR,GAAIC,CAAAA,aAAa,CAAGC,eAAMC,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,CAApB,CACAK,aAAa,CACXF,OAAO,GAAK,SAAZ,CAAwB,gCAAIE,aAAJ,EAAmBF,OAAnB,EAAxB,CAAuDE,aADzD,CAGA,GAAMI,CAAAA,WAAW,CAAGP,IAAI,GAAK,GAAT,CAAe,UAAf,CAA4B,YAAhD,CAGA,GAAIE,OAAJ,CAAa,CACX,GAAMM,CAAAA,WAAmB,0BACnBR,IAAI,GAAK,GAAT,CAAe,CAAES,EAAE,CAAEV,KAAN,CAAf,CAA+B,CAAEW,EAAE,CAAEX,KAAN,CADZ,CAAzB,CAIAG,OAAO,CAAGE,eAAMO,YAAN,CAAmBT,OAAnB,wBACRK,WAAW,CAAXA,WADQ,EAELC,WAFK,EAAV,CAKAL,aAAa,CAAGA,aAAa,CAACS,GAAd,CAAkB,SAACC,KAAD,CAAaC,KAAb,CAA+B,gBAC/D,MACE,8BAAC,cAAD,CAAO,QAAP,EAAgB,GAAG,aAAED,KAAK,CAACE,GAAR,mCAA+BD,KAAlD,6EACGD,KADH,CAEGC,KAAK,CAAGX,aAAa,CAACa,MAAd,CAAuB,CAA/B,EAAoCd,OAFvC,CADF,CAMD,CAPe,CAAhB,CAQD,CAlBD,IAkBO,CACL,GAAMM,CAAAA,YAAmB,0BACnBR,IAAI,GAAK,GAAT,CAAe,CAAEiB,KAAK,CAAElB,KAAT,CAAf,CAAkC,CAAEmB,MAAM,CAAEnB,KAAV,CADf,CAAzB,CAGAI,aAAa,CAAGA,aAAa,CAACS,GAAd,CAAkB,SAACC,KAAD,CAAaC,KAAb,CAA+B,iBAC/D,MACE,8BAAC,cAAD,CAAO,QAAP,EAAgB,GAAG,cAAED,KAAK,CAACE,GAAR,oCAA+BD,KAAlD,6EACGD,KADH,CAEGC,KAAK,CAAGX,aAAa,CAACa,MAAd,CAAuB,CAA/B,EAAoC,6BAAC,YAAD,0BAASR,YAAT,gFAFvC,CADF,CAMD,CAPe,CAAhB,CAQD,CAED,MAAOL,CAAAA,aAAP,CACD,C","sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | number;\n\nexport default (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(children);\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && <Box {...spacingProp} />}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n"]}