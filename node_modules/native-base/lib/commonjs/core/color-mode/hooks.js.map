{"version":3,"sources":["hooks.tsx"],"names":["useColorMode","React","useContext","HybridContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","useModeManager","initialColorMode","colorModeManager","setRawMode","setColorMode","val","set","getMode","get","value","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"mappings":"0iBAAA,qDAMA,oDAGO,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAA8B,uBAKpDC,eAAMC,UAAN,CAAsCC,sBAAtC,CALoD,CAE3CC,gBAF2C,mBAEtDC,SAFsD,CAMxD,GAAID,gBAAgB,GAAKE,SAAzB,CAAoC,CAClC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,uDAAV,CAAN,CACD,CACD,MAAOH,CAAAA,gBAAP,CACD,CAVM,C,kCAYA,QAASI,CAAAA,iBAAT,CAA2BC,KAA3B,CAAuCC,IAAvC,CAAkD,mBACjCV,YAAY,EADqB,CAC/CK,SAD+C,eAC/CA,SAD+C,CAEvD,MAAOA,CAAAA,SAAS,GAAK,MAAd,CAAuBK,IAAvB,CAA8BD,KAArC,CACD,CAEM,QAASE,CAAAA,cAAT,CACLC,gBADK,CAELC,gBAFK,CAGL,eACgC,oBAAoBD,gBAApB,CADhC,qDACOP,SADP,eACkBS,UADlB,eAEA,QAAeC,CAAAA,YAAf,CAA4BC,GAA5B,6HACMH,gBADN,2EAEUA,gBAAgB,CAACI,GAAjB,CAAqBD,GAArB,CAFV,SAIEF,UAAU,CAACE,GAAD,CAAV,CAJF,qEAOA,qBAAU,UAAM,CACd,GAAIH,gBAAJ,CAAsB,CACpB,CAAC,QAAeK,CAAAA,OAAf,qLACmBL,gBAAgB,CAACM,GAAjB,CAAqBP,gBAArB,CADnB,SACKQ,KADL,gBAEC,GAAIA,KAAK,EAAIA,KAAK,GAAKf,SAAvB,CAAkC,CAChCS,UAAU,CAACM,KAAD,CAAV,CACD,CAJF,sEAAD,IAMD,CACF,CATD,CASG,CAACf,SAAD,CAAYO,gBAAZ,CAA8BC,gBAA9B,CATH,EAWA,MAAO,CAAER,SAAS,CAATA,SAAF,CAAaU,YAAY,CAAZA,YAAb,CAAP,CACD,CAEM,QAASM,CAAAA,mBAAT,EAIL,wBAKIpB,eAAMC,UAAN,CAAsCC,sBAAtC,CALJ,CAEaC,gBAFb,oBAEEC,SAFF,CAMA,GAAMiB,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,SAC7BlB,CAAAA,gBAAgB,CAACmB,mBAAjB,CAAqC,CAACnB,gBAAgB,CAACoB,gBAAvD,CAD6B,EAA/B,CAEA,MAAO,CACLpB,gBAAgB,CAACoB,gBADZ,CAELpB,gBAAgB,CAACmB,mBAFZ,CAGLD,sBAHK,CAAP,CAKD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  colorModeManager?: StorageManager\n) {\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  async function setColorMode(val: ColorMode) {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n    setRawMode(val);\n  }\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]}