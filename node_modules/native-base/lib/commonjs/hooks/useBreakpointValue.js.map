{"version":3,"sources":["useBreakpointValue.ts"],"names":["useBreakpointValue","values","windowWidth","width","theme","currentBreakpoint","breakpoints"],"mappings":"uGAAA,yCACA,qCAKA,6CAEO,QAASA,CAAAA,kBAAT,CAA4BC,MAA5B,CAAyC,0BAC9C,GAAIC,CAAAA,WAAW,uBAAG,sCAAH,eAAG,qBAAuBC,KAAzC,CACA,GAAMC,CAAAA,KAAK,CAAG,wBAAd,CACA,GAAI,oCAAyBH,MAAzB,CAAJ,CAAsC,CACpC,GAAII,CAAAA,iBAAiB,CAAG,gCACtBD,KAAK,CAACE,WADgB,CAEtBJ,WAFsB,CAAxB,CAIA,MAAO,mCAAwBD,MAAxB,CAAgCI,iBAAhC,CAAP,CACD,CAND,IAMO,CACL,MAAOJ,CAAAA,MAAP,CACD,CACF","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  hasValidBreakpointFormat,\n  findLastValidBreakpoint,\n} from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\n\nexport function useBreakpointValue(values: any) {\n  let windowWidth = useWindowDimensions()?.width;\n  const theme = useTheme();\n  if (hasValidBreakpointFormat(values)) {\n    let currentBreakpoint = getClosestBreakpoint(\n      theme.breakpoints,\n      windowWidth\n    );\n    return findLastValidBreakpoint(values, currentBreakpoint);\n  } else {\n    return values;\n  }\n}\n"]}