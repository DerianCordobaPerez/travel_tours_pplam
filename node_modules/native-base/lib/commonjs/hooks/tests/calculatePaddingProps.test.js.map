{"version":3,"sources":["calculatePaddingProps.test.tsx"],"names":["describe","test","expect","safeArea","top","left","right","bottom","toEqual","pt","pb","pl","pr","safeAreaTop","safeAreaBottom","py","safeAreaLeft","safeAreaRight","safeAreaX","px","safeAreaY","p"],"mappings":"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","sourcesContent":["import { calculatePaddingProps } from './../useSafeArea/utils';\n\ndescribe('calculatePaddingProps(useSafeArea)', () => {\n  test('Generic inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: true },\n        {},\n        { top: 0, left: 0, right: 0, bottom: 0 },\n        {}\n      )\n    ).toEqual({});\n  });\n  test('Generic inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: 2 },\n        {},\n        { top: 0, left: 0, right: 0, bottom: 0 },\n        { 2: '2' }\n      )\n    ).toEqual({ pt: '2px', pb: '2px', pl: '2px', pr: '2px' });\n  });\n  test('Top inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaTop: true },\n        {},\n        { top: 10, left: 0, right: 0, bottom: 0 },\n        {}\n      )\n    ).toEqual({ pt: '10px' });\n  });\n  test('Top inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaTop: 2 },\n        {},\n        { top: 0, left: 0, right: 0, bottom: 0 },\n        { 2: '2' }\n      )\n    ).toEqual({ pt: '2px' });\n  });\n  test('Top inset(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaTop: true },\n        { pt: 10 },\n        { top: 10, left: 0, right: 0, bottom: 0 },\n        { 10: '10' }\n      )\n    ).toEqual({ pt: '20px' });\n  });\n  test('Top inset(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaTop: 2 },\n        { pt: 10 },\n        { top: 10, left: 0, right: 0, bottom: 0 },\n        { 2: '2', 10: '10' }\n      )\n    ).toEqual({ pt: '12px' });\n  });\n  test('Bottom inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaBottom: true },\n        {},\n        { top: 10, left: 0, right: 0, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pb: '20px' });\n  });\n  test('Bottom inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaBottom: 2 },\n        {},\n        { top: 10, left: 0, right: 0, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pb: '2px' });\n  });\n  test('Bottom inset(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaBottom: true },\n        { py: 10 },\n        { top: 10, left: 0, right: 0, bottom: 20 },\n        { 2: '2', 10: '20' }\n      )\n    ).toEqual({ pb: '40px' });\n  });\n  test('Bottom inset(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaBottom: 2 },\n        { py: 10 },\n        { top: 10, left: 0, right: 0, bottom: 20 },\n        { 2: '2', 10: '20' }\n      )\n    ).toEqual({ pb: '22px' });\n  });\n  test('Left inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaLeft: true },\n        {},\n        { top: 10, left: 20, right: 0, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pl: '20px' });\n  });\n  test('Left inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaLeft: 2 },\n        {},\n        { top: 10, left: 20, right: 0, bottom: 20 },\n        { 2: '2', 10: '20' }\n      )\n    ).toEqual({ pl: '2px' });\n  });\n  test('Left inset(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaLeft: true },\n        { py: 10, pl: 20 },\n        { top: 10, left: 20, right: 0, bottom: 20 },\n        { 20: '20' }\n      )\n    ).toEqual({ pl: '40px' });\n  });\n  test('Left inset(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaLeft: 2 },\n        { py: 10, pl: 20 },\n        { top: 10, left: 20, right: 0, bottom: 20 },\n        { 2: '2', 20: '20' }\n      )\n    ).toEqual({ pl: '22px' });\n  });\n  test('Right inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaRight: true },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pr: '20px' });\n  });\n  test('Right inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaRight: 2 },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pr: '2px' });\n  });\n  test('Right inset(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaRight: true },\n        { pr: 20 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 20: '20' }\n      )\n    ).toEqual({ pr: '40px' });\n  });\n  test('Right inset(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaRight: 2 },\n        { pr: 20 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2', 20: '20' }\n      )\n    ).toEqual({ pr: '22px' });\n  });\n  test('X inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaX: true },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pl: '20px', pr: '20px' });\n  });\n  test('X inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaX: 2 },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pl: '2px', pr: '2px' });\n  });\n  test('X insets(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaX: true },\n        { px: 20 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 20: '20' }\n      )\n    ).toEqual({ pl: '40px', pr: '40px' });\n  });\n  test('X insets(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaX: 2 },\n        { px: 20 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2', 20: '20' }\n      )\n    ).toEqual({ pl: '22px', pr: '22px' });\n  });\n  test('Y inset(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaY: true },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pt: '10px', pb: '20px' });\n  });\n  test('Y inset(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaY: 2 },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pt: '2px', pb: '2px' });\n  });\n  test('Y insets(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaY: true },\n        { p: 10 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 10: '10' }\n      )\n    ).toEqual({ pt: '20px', pb: '30px' });\n  });\n  test('Y insets(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeAreaY: 2 },\n        { p: 10 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2', 10: '10' }\n      )\n    ).toEqual({ pt: '12px', pb: '12px' });\n  });\n  test('All insets(boolean)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: true },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        {}\n      )\n    ).toEqual({ pt: '10px', pb: '20px', pl: '20px', pr: '20px' });\n  });\n  test('All insets(number)', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: 2 },\n        {},\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2' }\n      )\n    ).toEqual({ pt: '2px', pb: '2px', pl: '2px', pr: '2px' });\n  });\n  test('All insets(boolean) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: true },\n        { pt: 10 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 10: '10' }\n      )\n    ).toEqual({ pt: '20px', pb: '20px', pl: '20px', pr: '20px' });\n  });\n  test('All insets(number) with padding', () => {\n    expect(\n      calculatePaddingProps(\n        { safeArea: 2 },\n        { pt: 10 },\n        { top: 10, left: 20, right: 20, bottom: 20 },\n        { 2: '2', 10: '10' }\n      )\n    ).toEqual({ pt: '12px', pb: '2px', pl: '2px', pr: '2px' });\n  });\n});\n"]}