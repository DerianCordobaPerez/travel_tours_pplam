{"version":3,"sources":["useKeyboardDismissable.ts"],"names":["keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","filter","h","length","pop","useKeyboardDismissable","enabled","callback","React","useEffect","cleanupFn","useBackHandler","backHandler","BackHandler","addEventListener","removeEventListener"],"mappings":"gQAAA,qDAEA,yCAOA,GAAIA,CAAAA,uBAAyC,CAAG,EAAhD,CACO,GAAMC,CAAAA,6BAA6B,CAAG,CAC3CC,IAAI,CAAE,cAACC,OAAD,CAAwB,CAC5BH,uBAAuB,CAACE,IAAxB,CAA6BC,OAA7B,EACA,MAAO,WAAM,CACXH,uBAAuB,CAAGA,uBAAuB,CAACI,MAAxB,CACxB,SAACC,CAAD,QAAOA,CAAAA,CAAC,GAAKF,OAAb,EADwB,CAA1B,CAGD,CAJD,CAKD,CAR0C,CAS3CG,MAAM,CAAE,wBAAMN,CAAAA,uBAAuB,CAACM,MAA9B,EATmC,CAU3CC,GAAG,CAAE,cAAM,CACT,MAAOP,CAAAA,uBAAuB,CAACO,GAAxB,EAAP,CACD,CAZ0C,CAAtC,C,oEAkBA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,MAAoC,IAAjCC,CAAAA,OAAiC,MAAjCA,OAAiC,CAAxBC,QAAwB,MAAxBA,QAAwB,CACxEC,eAAMC,SAAN,CAAgB,UAAM,CACpB,GAAIC,CAAAA,SAAS,CAAG,oBAAM,CAAE,CAAxB,CACA,GAAIJ,OAAJ,CAAa,CACXI,SAAS,CAAGZ,6BAA6B,CAACC,IAA9B,CAAmCQ,QAAnC,CAAZ,CACD,CAFD,IAEO,CACLG,SAAS,GACV,CACD,MAAO,WAAM,CACXA,SAAS,GACV,CAFD,CAGD,CAVD,CAUG,CAACJ,OAAD,CAAUC,QAAV,CAVH,EAYAI,cAAc,CAAC,CAAEL,OAAO,CAAPA,OAAF,CAAWC,QAAQ,CAARA,QAAX,CAAD,CAAd,CACD,CAdM,C,sDAgBA,QAASI,CAAAA,cAAT,OAAwD,IAA9BL,CAAAA,OAA8B,OAA9BA,OAA8B,CAArBC,QAAqB,OAArBA,QAAqB,CAC7D,qBAAU,UAAM,CACd,GAAIK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtBL,QAAQ,GACR,MAAO,KAAP,CACD,CAHD,CAIA,GAAID,OAAJ,CAAa,CACXO,yBAAYC,gBAAZ,CAA6B,mBAA7B,CAAkDF,WAAlD,EACD,CAFD,IAEO,CACLC,yBAAYE,mBAAZ,CAAgC,mBAAhC,CAAqDH,WAArD,EACD,CACD,MAAO,kBACLC,0BAAYE,mBAAZ,CAAgC,mBAAhC,CAAqDH,WAArD,CADK,EAAP,CAED,CAZD,CAYG,CAACN,OAAD,CAAUC,QAAV,CAZH,EAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]}