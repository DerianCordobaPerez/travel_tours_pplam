var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports,"__esModule",{value:true});exports.useBackHandler=useBackHandler;exports.useKeyboardDismissable=exports.keyboardDismissHandlerManager=void 0;var _react=_interopRequireWildcard(require("react"));var _reactNative=require("react-native");var keyboardDismissHandlers=[];var keyboardDismissHandlerManager={push:function push(handler){keyboardDismissHandlers.push(handler);return function(){keyboardDismissHandlers=keyboardDismissHandlers.filter(function(h){return h!==handler;});};},length:function length(){return keyboardDismissHandlers.length;},pop:function pop(){return keyboardDismissHandlers.pop();}};exports.keyboardDismissHandlerManager=keyboardDismissHandlerManager;var useKeyboardDismissable=function useKeyboardDismissable(_ref){var enabled=_ref.enabled,callback=_ref.callback;_react.default.useEffect(function(){var cleanupFn=function cleanupFn(){};if(enabled){cleanupFn=keyboardDismissHandlerManager.push(callback);}else{cleanupFn();}return function(){cleanupFn();};},[enabled,callback]);useBackHandler({enabled:enabled,callback:callback});};exports.useKeyboardDismissable=useKeyboardDismissable;function useBackHandler(_ref2){var enabled=_ref2.enabled,callback=_ref2.callback;(0,_react.useEffect)(function(){var backHandler=function backHandler(){callback();return true;};if(enabled){_reactNative.BackHandler.addEventListener('hardwareBackPress',backHandler);}else{_reactNative.BackHandler.removeEventListener('hardwareBackPress',backHandler);}return function(){return _reactNative.BackHandler.removeEventListener('hardwareBackPress',backHandler);};},[enabled,callback]);}
//# sourceMappingURL=useKeyboardDismissable.js.map