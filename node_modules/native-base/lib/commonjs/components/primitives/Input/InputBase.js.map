{"version":3,"sources":["InputBase.tsx"],"names":["StyledInput","TextInput","flex","color","space","layout","flexbox","border","typography","customBorder","customBackground","customOutline","customShadow","customExtra","customTypography","customLayout","InputBase","ref","onKeyPress","onFocus","onBlur","disableFocusHandling","inputProps","wrapperRef","props","React","useState","isFocused","setIsFocused","handleFocus","focusState","callback","inputThemeProps","isDisabled","disabled","isInvalid","accessibilityInvalid","isReadOnly","accessibilityReadOnly","isRequired","required","isFullWidth","ariaLabel","accessibilityLabel","placeholderTextColor","selectionColor","underlineColorAndroid","type","_hover","_focus","_disabled","_invalid","fontFamily","fontWeight","fontStyle","themedProps","_ref","useRef","isHovered","resolvedFontFamily","undefined","e","persist","Platform","OS","cursor"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { TextInput, Platform } from 'react-native';\nimport styled from 'styled-components/native';\nimport {\n  border,\n  flex,\n  space,\n  color,\n  flexbox,\n  layout,\n  typography,\n} from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n} from '../../../utils/customProps';\nimport type { IInputProps } from './types';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = styled(TextInput)<IInputProps>(\n  flex,\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customTypography,\n  customLayout\n);\n\nconst InputBase = (\n  {\n    onKeyPress,\n    onFocus,\n    onBlur,\n    disableFocusHandling,\n    inputProps,\n    wrapperRef,\n    ...props\n  }: IInputProps & {\n    disableFocusHandling?: boolean;\n    inputProps: any;\n  },\n  ref: any\n) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    !disableFocusHandling && setIsFocused(focusState);\n    callback();\n  };\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    isFullWidth,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    ariaLabel,\n    accessibilityLabel,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    type,\n    _hover,\n    _focus,\n    _disabled,\n    _invalid,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    ...themedProps\n  } = usePropsResolution('Input', {\n    ...inputThemeProps,\n    ...props,\n  });\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight,\n    fontStyle,\n  });\n\n  return (\n    <StyledInput\n      {...inputProps}\n      {...resolvedFontFamily}\n      secureTextEntry={type === 'password'}\n      accessible\n      accessibilityLabel={ariaLabel || accessibilityLabel}\n      editable={isDisabled || isReadOnly ? false : true}\n      w={isFullWidth ? '100%' : undefined}\n      {...themedProps}\n      {...(isHovered && _hover)}\n      {...(isFocused && _focus)}\n      {...(isDisabled && _disabled)}\n      {...(isInvalid && _invalid)}\n      placeholderTextColor={useToken('colors', placeholderTextColor)}\n      selectionColor={useToken('colors', selectionColor)}\n      underlineColorAndroid={useToken('colors', underlineColorAndroid)}\n      onKeyPress={(e: any) => {\n        e.persist();\n        onKeyPress && onKeyPress(e);\n      }}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: isDisabled,\n            cursor: isDisabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n      ref={mergeRefs([ref, _ref, wrapperRef])}\n    />\n  );\n};\n\nexport default memo(forwardRef(InputBase));\n"]}