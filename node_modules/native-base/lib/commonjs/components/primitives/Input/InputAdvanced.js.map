{"version":3,"sources":["InputAdvanced.tsx"],"names":["InputAdvance","ref","InputLeftElement","InputRightElement","onFocus","onBlur","inputProps","wrapperRef","props","inputThemeProps","isDisabled","disabled","isInvalid","accessibilityInvalid","isReadOnly","accessibilityReadOnly","isRequired","required","_hover","_disabled","_invalid","_focus","themedProps","React","useState","isFocused","setIsFocused","handleFocus","focusState","callback","stylingProps","margin","border","layout","flexbox","position","background","layoutProps","nonLayoutProps","baseInputProps","_ref","useRef","isHovered","e"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport InputBase from './InputBase';\nimport Box from '../Box';\nimport type { IInputProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\n\nconst InputAdvance = (\n  {\n    InputLeftElement,\n    InputRightElement,\n    onFocus,\n    onBlur,\n    inputProps,\n    wrapperRef,\n    ...props\n  }: IInputProps & {\n    inputProps: any;\n  },\n  ref: any\n) => {\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    isInvalid,\n    isDisabled,\n    _hover,\n    _disabled,\n    _invalid,\n    _focus,\n    ...themedProps\n  } = usePropsResolution('Input', {\n    ...inputThemeProps,\n    ...props,\n  });\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const [layoutProps, nonLayoutProps] = extractInObject(themedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n  ]);\n\n  // Extracting baseInputProps from remaining props\n  const [, baseInputProps] = extractInObject(nonLayoutProps, ['variant']);\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      overflow=\"hidden\"\n      {...layoutProps}\n      {...(isHovered && _hover)}\n      {...(isFocused && _focus)}\n      {...(isDisabled && _disabled)}\n      {...(isInvalid && _invalid)}\n      ref={mergeRefs([_ref, wrapperRef])}\n    >\n      {InputLeftElement ? InputLeftElement : null}\n      <InputBase\n        inputProps={inputProps}\n        {...baseInputProps}\n        flex={1}\n        disableFocusHandling\n        ref={ref}\n        variant=\"unstyled\"\n        onFocus={(e) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n      />\n      {InputRightElement ? InputRightElement : null}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(InputAdvance));\n"]}