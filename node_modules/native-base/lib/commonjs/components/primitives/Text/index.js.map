{"version":3,"sources":["index.tsx"],"names":["StyledText","NativeText","color","space","position","layout","flexbox","border","typography","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","customTypography","Text","ref","children","props","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","propFontFamily","fontFamily","propFontWeight","fontWeight","propFontStyle","fontStyle","_hover","fontSize","numberOfLines","reslovedProps","_ref","isHovered","resolvedFontFamily","undefined","bg","textDecorationLine"],"mappings":"wbAAA,qDACA,yCACA,wEACA,2CASA,2DACA,uDAWA,6DACA,mDACA,2E,gIAEA,GAAMA,CAAAA,UAAU,CAAG,oBAAOC,iBAAP,EACjBC,mBADiB,CAEjBC,mBAFiB,CAGjBC,sBAHiB,CAIjBC,oBAJiB,CAKjBC,qBALiB,CAMjBC,oBANiB,CAOjBC,wBAPiB,CAQjBJ,sBARiB,CASjBK,2BATiB,CAUjBC,yBAViB,CAWjBC,6BAXiB,CAYjBC,0BAZiB,CAajBC,yBAbiB,CAcjBC,wBAdiB,CAejBC,yBAfiB,CAgBjBC,6BAhBiB,CAAnB,CAmBA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,OAAqCC,GAArC,CAAkD,IAA/CC,CAAAA,QAA+C,OAA/CA,QAA+C,CAAlCC,KAAkC,mFAiBzD,sCAAmB,MAAnB,CAA2BA,KAA3B,CAjByD,CAE3DC,WAF2D,qBAE3DA,WAF2D,CAG3DC,SAH2D,qBAG3DA,SAH2D,CAI3DC,IAJ2D,qBAI3DA,IAJ2D,CAK3DC,MAL2D,qBAK3DA,MAL2D,CAM3DC,GAN2D,qBAM3DA,GAN2D,CAO3DC,SAP2D,qBAO3DA,SAP2D,CAQ3DC,SAR2D,qBAQ3DA,SAR2D,CAS3DC,aAT2D,qBAS3DA,aAT2D,CAU/CC,cAV+C,qBAU3DC,UAV2D,CAW/CC,cAX+C,qBAW3DC,UAX2D,CAYhDC,aAZgD,qBAY3DC,SAZ2D,CAa3DC,MAb2D,qBAa3DA,MAb2D,2CAc3DC,QAd2D,CAc3DA,QAd2D,gCAchD,IAdgD,uBAe3DC,aAf2D,qBAe3DA,aAf2D,CAgBxDC,aAhBwD,gOAmB7D,GAAMC,CAAAA,IAAI,CAAG,kBAAO,IAAP,CAAb,CAnB6D,cAqBvC,2BAAS,EAAT,CAAaJ,MAAM,CAAGI,IAAH,CAAU,IAA7B,CArBuC,CAqBrDC,SArBqD,WAqBrDA,SArBqD,CAuB7D,GAAIV,CAAAA,UAAU,CAAGD,cAAjB,CACA,GAAIK,CAAAA,SAAS,CAAGV,MAAM,CAAG,QAAH,CAAcS,aAApC,CACA,GAAID,CAAAA,UAAU,CAAGT,IAAI,CAAG,MAAH,CAAYQ,cAAjC,CAEA,GAAMU,CAAAA,kBAAkB,CAAG,iDAAsB,CAC/CX,UAAU,CAAVA,UAD+C,CAE/CE,UAAU,CAAVA,UAF+C,CAG/CE,SAAS,CAATA,SAH+C,CAAtB,CAA3B,CAMA,MACE,8BAAC,UAAD,0BACMI,aADN,EAEE,aAAa,CACXD,aAAa,EAAIf,SAAjB,CACIe,aAAa,EAAIf,SADrB,CAEID,WAAW,CACX,CADW,CAEXqB,SAPR,EASMD,kBATN,EAUE,EAAE,CAAEf,SAAS,CAAG,aAAH,CAAmBY,aAAa,CAACK,EAVhD,CAWE,kBAAkB,CAChBhB,SAAS,EAAIC,aAAb,CACI,wBADJ,CAEID,SAAS,CACT,WADS,CAETC,aAAa,CACb,cADa,CAEbU,aAAa,CAACM,kBAlBtB,CAoBE,QAAQ,CAAEnB,GAAG,CAAG,EAAH,CAAQW,QApBvB,CAqBE,GAAG,CAAE,yBAAU,CAAClB,GAAD,CAAMqB,IAAN,CAAV,CArBP,EAsBOC,SAAS,EAAIL,MAtBpB,+EAwBGhB,QAxBH,CADF,CA4BD,CA7DD,C,aA+De,gBAAK,sBAAWF,IAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { Text as NativeText } from 'react-native';\nimport styled from 'styled-components/native';\nimport {\n  color,\n  position,\n  space,\n  typography,\n  layout,\n  flexbox,\n  border,\n} from 'styled-system';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n  customPosition,\n} from '../../../utils/customProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledText = styled(NativeText)<ITextProps>(\n  color,\n  space,\n  position,\n  layout,\n  flexbox,\n  border,\n  typography,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout,\n  customTypography\n);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize = 'md',\n    numberOfLines,\n    ...reslovedProps\n  } = usePropsResolution('Text', props);\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  let fontStyle = italic ? 'italic' : propFontStyle;\n  let fontWeight = bold ? 'bold' : propFontWeight;\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight,\n    fontStyle,\n  });\n\n  return (\n    <StyledText\n      {...reslovedProps}\n      numberOfLines={\n        numberOfLines || noOfLines\n          ? numberOfLines || noOfLines\n          : isTruncated\n          ? 1\n          : undefined\n      }\n      {...resolvedFontFamily}\n      bg={highlight ? 'warning.200' : reslovedProps.bg}\n      textDecorationLine={\n        underline && strikeThrough\n          ? 'underline line-through'\n          : underline\n          ? 'underline'\n          : strikeThrough\n          ? 'line-through'\n          : reslovedProps.textDecorationLine\n      }\n      fontSize={sub ? 10 : fontSize}\n      ref={mergeRefs([ref, _ref])}\n      {...(isHovered && _hover)}\n    >\n      {children}\n    </StyledText>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]}