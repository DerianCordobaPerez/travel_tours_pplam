{"version":3,"sources":["Button.tsx"],"names":["Button","ref","children","isLoadingText","startIcon","endIcon","spinner","props","_text","_disabled","_focus","_hover","_pressed","_focusVisible","_stack","resolvedProps","pressableProps","isDisabled","isLoading","React","isValidElement","Children","map","child","index","cloneElement","key","accessibilityRole","isPressed","isHovered","isFocused","focusTextProps","hoverTextProps","pressedTextProps","disabledTextProps","focusVisibleTextProps","boxChildren","color"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\n\nconst Button = (\n  {\n    children,\n    isLoadingText,\n    startIcon,\n    endIcon,\n    spinner,\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const {\n    _text,\n    _disabled,\n    _focus,\n    _hover,\n    _pressed,\n    _focusVisible,\n    _stack,\n    ...resolvedProps\n  } = usePropsResolution('Button', props);\n\n  const pressableProps = {\n    ...resolvedProps,\n    _hover,\n    _pressed,\n    _focus,\n    _disabled,\n    _focusVisible,\n  };\n\n  const { isDisabled, isLoading } = props;\n\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      {...pressableProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      {/* TODO: Replace Render props with Context Hook */}\n      {/* TODO: Can look for a simpler wat to do this */}\n      {({ isPressed, isHovered, isFocused }) => {\n        const focusTextProps = isFocused &&\n          _focus?._text && { ..._focus._text };\n        const hoverTextProps = isHovered &&\n          _hover?._text && { ..._hover._text };\n        const pressedTextProps = isPressed &&\n          _pressed?._text && { ..._pressed._text };\n        const disabledTextProps = isDisabled &&\n          _disabled?._text && { ..._disabled._text };\n        const focusVisibleTextProps = isFocused &&\n          _focusVisible?._text && { ..._focusVisible._text };\n\n        const boxChildren =\n          isLoading && isLoadingText ? isLoadingText : children;\n\n        return (\n          <HStack {..._stack}>\n            {startIcon && !isLoading ? startIcon : null}\n            {isLoading ? (\n              spinner ? (\n                spinner\n              ) : (\n                <Spinner color={_text?.color} size=\"sm\" />\n              )\n            ) : null}\n            {boxChildren ? (\n              <Box\n                _text={{\n                  ..._text,\n                  ...hoverTextProps,\n                  ...focusTextProps,\n                  ...focusVisibleTextProps,\n                  ...pressedTextProps,\n                  ...disabledTextProps,\n                }}\n              >\n                {isLoading && isLoadingText ? isLoadingText : children}\n              </Box>\n            ) : null}\n            {endIcon && !isLoading ? endIcon : null}\n          </HStack>\n        );\n      }}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n"]}