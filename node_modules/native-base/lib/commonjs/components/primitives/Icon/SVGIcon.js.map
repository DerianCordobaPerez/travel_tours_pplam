{"version":3,"sources":["SVGIcon.tsx"],"names":["SVG","Svg","color","space","layout","flexbox","border","typography","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","customTypography","SVGIcon","ref","children","props","focusable","stroke","size","resolvedProps","strokeHex","colorHex","React","Children","count","map","child","i","key","questionOutlineIconPath","ChildPath","element","fill","pathStroke","pathStrokeColor","fillColor","cloneElement"],"mappings":"wbAAA,qDACA,qCACA,wEACA,2CASA,uDAUA,8BAEA,0D,kIAEA,GAAMA,CAAAA,GAAG,CAAG,oBAAOC,UAAP,EACVC,mBADU,CAEVC,mBAFU,CAGVC,oBAHU,CAIVC,qBAJU,CAKVC,oBALU,CAMVC,wBANU,CAOVC,sBAPU,CAQVC,2BARU,CASVC,yBATU,CAUVC,6BAVU,CAWVC,0BAXU,CAYVC,yBAZU,CAaVC,wBAbU,CAcVC,yBAdU,CAeVC,6BAfU,CAAZ,CAkBA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAqCC,GAArC,CAAkD,IAA/CC,CAAAA,QAA+C,MAA/CA,QAA+C,CAAlCC,KAAkC,kFAO5D,8BAAmB,MAAnB,CAA2BA,KAA3B,CAP4D,CAE9DC,SAF8D,qBAE9DA,SAF8D,CAG9DC,MAH8D,qBAG9DA,MAH8D,CAI9DpB,KAJ8D,qBAI9DA,KAJ8D,CAK9DqB,IAL8D,qBAK9DA,IAL8D,CAM3DC,aAN2D,kGAQhE,GAAMC,CAAAA,SAAS,CAAG,oBAAS,QAAT,CAAmBH,MAAM,EAAI,EAA7B,CAAlB,CACA,GAAMI,CAAAA,QAAQ,CAAG,oBAAS,QAAT,CAAmBxB,KAAK,EAAI,EAA5B,CAAjB,CAEA,MACE,8BAAC,GAAD,0BACMsB,aADN,EAYE,IAAI,CAAED,IAZR,CAaE,KAAK,CAAEG,QAbT,CAcE,MAAM,CAAED,SAdV,CAeE,SAAS,CAAEJ,SAfb,CAgBE,iBAAiB,CAAC,OAhBpB,CAkBE,GAAG,CAAEH,GAlBP,8EAoBGS,eAAMC,QAAN,CAAeC,KAAf,CAAqBV,QAArB,EAAiC,CAAjC,CACC,6BAAC,QAAD,8EACGQ,eAAMC,QAAN,CAAeE,GAAf,CAAmBX,QAAnB,CAA6B,SAACY,KAAD,CAAQC,CAAR,uBAC5B,8BAAC,SAAD,wBACE,GAAG,aAAED,KAAF,cAAEA,KAAK,CAAEE,GAAT,mBAAgBD,CADrB,CAEE,OAAO,CAAED,KAFX,EAGMA,KAHN,cAGMA,KAAK,CAAEX,KAHb,gFAD4B,EAA7B,CADH,CADD,CAWCc,yCA/BJ,CADF,CAoCD,CA/CD,CAgDA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,OAAgD,IAA7CC,CAAAA,OAA6C,OAA7CA,OAA6C,CAApCC,IAAoC,OAApCA,IAAoC,CAAtBC,UAAsB,OAA9BhB,MAA8B,CAChE,GAAMiB,CAAAA,eAAe,CAAG,oBAAS,QAAT,CAAmBD,UAAU,EAAI,EAAjC,CAAxB,CACA,GAAME,CAAAA,SAAS,CAAG,oBAAS,QAAT,CAAmBH,IAAI,EAAI,EAA3B,CAAlB,CAEA,GAAI,CAACD,OAAL,CAAc,CACZ,MAAO,KAAP,CACD,CAED,MAAOT,gBAAMc,YAAN,CAAmBL,OAAnB,CAA4B,CACjCC,IAAI,CAAEG,SAAS,CAAGA,SAAH,CAAe,cADG,CAEjClB,MAAM,CAAEiB,eAFyB,CAA5B,CAAP,CAID,CAZD,C,aAae,gBAAK,sBAAWtB,OAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport styled from 'styled-components/native';\nimport {\n  border,\n  color,\n  flexbox,\n  layout,\n  space,\n  typography,\n  position,\n} from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n  customPosition,\n} from '../../../utils/customProps';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\n\nconst SVG = styled(Svg)<IIconProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout,\n  customTypography\n);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]}