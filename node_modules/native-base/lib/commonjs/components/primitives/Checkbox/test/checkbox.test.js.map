{"version":3,"sources":["checkbox.test.tsx"],"names":["CheckBoxGroup","React","useState","groupValue","setGroupValue","values","CheckBox","group","groupValues","setGroupValues","describe","it","frame","x","y","width","height","insets","top","left","right","bottom","getAllByRole","checkbox","expect","length","toBe","props","accessibilityState","checked","fireEvent","press","disabled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { fireEvent, render } from '@testing-library/react-native';\nimport { NativeBaseProvider } from '../../../../core/NativeBaseProvider';\nimport { Checkbox } from '..';\nimport { Text } from '../..';\n\nfunction CheckBoxGroup() {\n  const [groupValue, setGroupValue] = React.useState(['Item 1 ', 'Item 3 ']);\n  return (\n    <Checkbox.Group\n      colorScheme=\"green\"\n      defaultValue={groupValue}\n      onChange={(values) => {\n        setGroupValue(values || []);\n      }}\n    >\n      <Checkbox value=\"Item 1 \">\n        <Text mx={2}>Item 1</Text>\n      </Checkbox>\n      <Checkbox value=\"Item 2 \">\n        <Text mx={2}>Item 2</Text>\n      </Checkbox>\n      <Checkbox value=\"Item 3 \">\n        <Text mx={2}>Item 3</Text>\n      </Checkbox>\n      <Checkbox colorScheme=\"orange\" value=\"Indeterminate Item \">\n        <Text mx={2}>Indeterminate Item</Text>\n      </Checkbox>\n    </Checkbox.Group>\n  );\n}\n\nfunction CheckBox(group: any) {\n  const [groupValues, setGroupValues] = React.useState<Array<any>>([]);\n  return group ? (\n    <Checkbox.Group onChange={setGroupValues} value={groupValues}>\n      <Checkbox value=\"one\">\n        <Text>One</Text>\n      </Checkbox>\n      <Checkbox\n        value=\"two\"\n        isIndeterminate\n        onChange={() => setGroupValues([...groupValues, 'two'])}\n      >\n        <Text>Two</Text>\n      </Checkbox>\n    </Checkbox.Group>\n  ) : (\n    <>\n      <Checkbox\n        value=\"one\"\n        onChange={() => {\n          setGroupValues([...groupValues, 'one']);\n        }}\n      >\n        <Text>One</Text>\n      </Checkbox>\n      <Checkbox\n        value=\"two\"\n        isIndeterminate\n        onChange={() => setGroupValues([...groupValues, 'two'])}\n      >\n        <Text>Two</Text>\n      </Checkbox>\n    </>\n  );\n}\n\ndescribe('CheckBoxGroup', () => {\n  it('handles defaults and onChange on checkBoxGroup', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <CheckBoxGroup />\n      </NativeBaseProvider>\n    );\n    let checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(4);\n    expect(checkbox[0].props.accessibilityState.checked).toBe(true);\n    expect(checkbox[1].props.accessibilityState.checked).toBe(false);\n    expect(checkbox[2].props.accessibilityState.checked).toBe(true);\n    expect(checkbox[3].props.accessibilityState.checked).toBe(false);\n    fireEvent.press(checkbox[1]);\n    expect(checkbox[1].props.accessibilityState.checked).toBe(true);\n  });\n  it('can be disabled on checkBox', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <Checkbox value=\"Item 1 \">\n          <Text mx={2}>Item 1</Text>\n        </Checkbox>\n        <Checkbox value=\"Item 2 \" isDisabled>\n          <Text mx={2}>Item 2</Text>\n        </Checkbox>\n        <Checkbox value=\"Item 3 \">\n          <Text mx={2}>Item 3</Text>\n        </Checkbox>\n        <Checkbox colorScheme=\"orange\" value=\"Indeterminate Item \">\n          <Text mx={2}>Indeterminate Item</Text>\n        </Checkbox>\n      </NativeBaseProvider>\n    );\n    let checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(4);\n    expect(checkbox[1].props.accessibilityState.disabled).toBe(true);\n  });\n  it('is checked on checkBox', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <Checkbox value=\"Item 1 \" isChecked>\n          <Text mx={2}>Item 1</Text>\n        </Checkbox>\n        <Checkbox value=\"Item 2 \" isDisabled>\n          <Text mx={2}>Item 2</Text>\n        </Checkbox>\n        <Checkbox value=\"Item 3 \">\n          <Text mx={2}>Item 3</Text>\n        </Checkbox>\n        <Checkbox colorScheme=\"orange\" value=\"Indeterminate Item \">\n          <Text mx={2}>Indeterminate Item</Text>\n        </Checkbox>\n      </NativeBaseProvider>\n    );\n    let checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(4);\n    expect(checkbox[0].props.accessibilityState.checked).toBe(true);\n  });\n\n  it('inDeterminant on checkBoxGroup', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <CheckBox group={true} />\n      </NativeBaseProvider>\n    );\n    let checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(2);\n    expect(checkbox[1].props.accessibilityState.checked).toBe('mixed');\n  });\n\n  it('inDeterminant on checkBox', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <CheckBox group={false} />\n      </NativeBaseProvider>\n    );\n    let checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(2);\n    fireEvent.press(checkbox[1]);\n    expect(checkbox[1].props.accessibilityState.checked).toBe('mixed');\n  });\n\n  it('onChange on checkBox', () => {\n    let { getAllByRole } = render(\n      <NativeBaseProvider\n        initialWindowMetrics={{\n          frame: { x: 0, y: 0, width: 0, height: 0 },\n          insets: { top: 0, left: 0, right: 0, bottom: 0 },\n        }}\n      >\n        <CheckBox />\n      </NativeBaseProvider>\n    );\n    let checkbox = getAllByRole('checkbox');\n    expect(checkbox.length).toBe(2);\n    fireEvent.press(checkbox[0]);\n    expect(checkbox[0].props.accessibilityState.checked).toBe(true);\n  });\n});\n"]}