{"version":3,"sources":["Stack.tsx"],"names":["Stack","ref","space","props","children","divider","reversed","remainingProps","size","direction","newProps"],"mappings":"wbAAA,qDACA,mDACA,qCACA,2D,iIA0BA,GAAMA,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAmCC,GAAnC,CAAiD,IAA9CC,CAAAA,KAA8C,MAA9CA,KAA8C,CAApCC,KAAoC,0DACrDC,CAAAA,QADqD,CACFD,KADE,CACrDC,QADqD,CAC3CC,OAD2C,CACFF,KADE,CAC3CE,OAD2C,CAClCC,QADkC,CACFH,KADE,CAClCG,QADkC,CACrBC,cADqB,uCACFJ,KADE,4DAEf,sCAAmB,OAAnB,0BACzCI,cADyC,EAE5CC,IAAI,CAAEN,KAFsC,GAFe,CAErDM,IAFqD,qBAErDA,IAFqD,CAE/CC,SAF+C,qBAE/CA,SAF+C,CAEjCC,QAFiC,iFAO7D,MACE,8BAAC,YAAD,wBAAK,aAAa,CAAED,SAApB,EAAmCC,QAAnC,EAA6C,GAAG,CAAET,GAAlD,8EACG,6BACCG,QADD,CAECI,IAFD,CAGCC,SAAS,GAAK,KAAd,CAAsB,GAAtB,CAA4B,GAH7B,CAICH,QAAQ,CAAG,SAAH,CAAe,QAJxB,CAKCD,OALD,CADH,CADF,CAWD,CAlBD,C,aAoBe,gBAAK,sBAAWL,KAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IBoxProps } from '../Box';\nimport type { ResponsiveValue } from '../../types';\n\nexport interface IStackProps extends IBoxProps {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | number\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<'column' | 'row'>;\n}\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const { children, divider, reversed, ...remainingProps } = props;\n  const { size, direction, ...newProps }: any = usePropsResolution('Stack', {\n    ...remainingProps,\n    size: space, // Passing space as size of spacer elements.\n  });\n\n  return (\n    <Box flexDirection={direction} {...newProps} ref={ref}>\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]}