{"version":3,"sources":["SliderTrack.tsx"],"names":["SliderTrack","ref","children","props","React","useContext","SliderContext","orientation","trackProps","onTrackLayout","colorScheme","sliderSize","themeProps","size","isVertical","trackStyle","useMemo","height","width","undefined","forwardRef"],"mappings":"mWAAA,oDACA,2DACA,uCACA,mDACA,kC,wIAGA,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAuCC,GAAvC,CAAqD,IAAlDC,CAAAA,QAAkD,MAAlDA,QAAkD,CAArCC,KAAqC,gFAOnEC,eAAMC,UAAN,CAAiBC,sBAAjB,CAPmE,CAErEC,WAFqE,mBAErEA,WAFqE,CAGrEC,UAHqE,mBAGrEA,UAHqE,CAIrEC,aAJqE,mBAIrEA,aAJqE,CAKrEC,WALqE,mBAKrEA,WALqE,CAMrEC,UANqE,mBAMrEA,UANqE,CASvE,GAAMC,CAAAA,UAAU,CAAG,sCAAmB,aAAnB,wBACjBC,IAAI,CAAEF,UADW,CAEjBD,WAAW,CAAXA,WAFiB,EAGdP,KAHc,EAAnB,CAMA,GAAMW,CAAAA,UAAU,CAAGP,WAAW,GAAK,UAAnC,CAEA,GAAMQ,CAAAA,UAAU,CAAGX,eAAMY,OAAN,CACjB,iBAAO,CACLC,MAAM,CAAEH,UAAU,CAAG,MAAH,CAAYF,UAAU,CAACC,IADpC,CAELK,KAAK,CAAE,CAACJ,UAAD,CAAc,MAAd,CAAuBF,UAAU,CAACC,IAFpC,CAAP,EADiB,CAKjB,CAACC,UAAD,CAAaF,UAAU,CAACC,IAAxB,CALiB,CAAnB,CAQA,MACE,8BAAC,oBAAD,wBACE,QAAQ,CAAEJ,aADZ,CAEE,GAAG,CAAER,GAFP,EAGMO,UAHN,CAIMO,UAJN,EAKE,QAAQ,CAAE,CAACD,UAAD,CAAc,MAAd,CAAuBK,SALnC,CAME,QAAQ,CAAEL,UAAU,CAAG,MAAH,CAAYK,SANlC,CAOE,cAAc,CAAC,QAPjB,CAQE,UAAU,CAAC,QARb,8EAUE,6BAAC,YAAD,0BAASP,UAAT,EAAqB,KAAK,CAAEG,UAA5B,8EACGb,QADH,CAVF,CADF,CAgBD,CAzCD,C,aA2CeE,eAAMgB,UAAN,CAAiBpB,WAAjB,C","sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../Pressable';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport type { ISliderProps } from './types';\n\nconst SliderTrack = ({ children, ...props }: ISliderProps, ref?: any) => {\n  const {\n    orientation,\n    trackProps,\n    onTrackLayout,\n    colorScheme,\n    sliderSize,\n  } = React.useContext(SliderContext);\n\n  const themeProps = usePropsResolution('SliderTrack', {\n    size: sliderSize,\n    colorScheme,\n    ...props,\n  });\n\n  const isVertical = orientation === 'vertical';\n\n  const trackStyle = React.useMemo(\n    () => ({\n      height: isVertical ? '100%' : themeProps.size,\n      width: !isVertical ? '100%' : themeProps.size,\n    }),\n    [isVertical, themeProps.size]\n  );\n\n  return (\n    <Pressable\n      onLayout={onTrackLayout}\n      ref={ref}\n      {...trackProps}\n      {...trackStyle}\n      paddingY={!isVertical ? '12px' : undefined}\n      paddingX={isVertical ? '12px' : undefined}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Box {...themeProps} style={trackStyle}>\n        {children}\n      </Box>\n    </Pressable>\n  );\n};\n\nexport default React.forwardRef(SliderTrack);\n"]}