{"version":3,"sources":["useFormControl.tsx"],"names":["FormControlContext","React","createContext","useFormControlProvider","props","idProp","nativeID","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","id","labelId","feedbackId","helpTextId","useState","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","context","useFormControl","field","useFormControlContext","describedBy","push","ariaDescribedBy","join","cleanProps","disabled","readOnly","required","accessibilityInvalid","accessibilityRequired","accessibilityReadOnly","accessibilityDescribedBy","undefined","useContext"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useId } from '@react-native-aria/utils';\nimport omit from 'lodash.omit';\nimport type { IFormControlProps } from './types';\nimport { ariaAttr } from '../../../utils';\n\nexport type IFormControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  'htmlProps'\n>;\n\nexport const FormControlContext = React.createContext({});\n\nexport function useFormControlProvider(props: IFormControlProps) {\n  const {\n    nativeID: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n\n  const id = useId();\n  // Generate all the required ids\n  const nativeID = idProp || `field-${id}`;\n\n  const labelId = `${nativeID}-label`;\n  const feedbackId = `${nativeID}-feedback`;\n  const helpTextId = `${nativeID}-helptext`;\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false);\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    nativeID,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  };\n\n  return context;\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl(props: IFormControlProps) {\n  const field = useFormControlContext();\n  const describedBy: any[] = [];\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field?.feedbackId);\n  if (field?.hasHelpText) describedBy.push(field?.helpTextId);\n  const ariaDescribedBy = describedBy.join(' ');\n\n  const cleanProps = omit(props, [\n    'isInvalid',\n    'isDisabled',\n    'isReadOnly',\n    'isRequired',\n  ]);\n\n  return {\n    ...cleanProps,\n    nativeID: props.nativeID ?? field?.nativeID,\n    disabled: props.isDisabled || field?.isDisabled,\n    readOnly: props.isReadOnly || field?.isReadOnly,\n    required: props.isRequired || field?.isRequired,\n    accessibilityInvalid: ariaAttr(props.isInvalid || field?.isInvalid),\n    accessibilityRequired: ariaAttr(props.isRequired || field?.isRequired),\n    accessibilityReadOnly: ariaAttr(props.isReadOnly || field?.isReadOnly),\n    accessibilityDescribedBy: ariaDescribedBy || undefined,\n  };\n}\n\nexport const useFormControlContext = () => {\n  return (React.useContext(\n    FormControlContext\n  ) as unknown) as IFormControlContext;\n};\n"]}