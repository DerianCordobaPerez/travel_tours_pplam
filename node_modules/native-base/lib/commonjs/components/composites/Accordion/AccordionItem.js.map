{"version":3,"sources":["AccordionItem.tsx"],"names":["AccordionItem","ref","children","index","pIndex","isDisabled","props","React","useContext","AccordionContext","cIndex","changeHandler","newProps","isOpen","includes","onClose","cb","onOpen","childSetter","isExpanded","memo","forwardRef"],"mappings":"mWAAA,oDACA,iEACA,kCAEA,qC,6IAEA,GAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAEpBC,GAFoB,CAGjB,IAFDC,CAAAA,QAEC,MAFDA,QAEC,iBAFSC,KAET,CAFgBC,MAEhB,qBAFyB,CAEzB,YAF4BC,UAE5B,MAF4BA,UAE5B,CAF2CC,KAE3C,qGAIyBC,eAAMC,UAAN,CAAiBC,yBAAjB,CAJzB,CAEMC,MAFN,mBAEDP,KAFC,CAGDQ,aAHC,mBAGDA,aAHC,oBAKqB,yBAAc,eAAd,CAA+BL,KAA/B,CALrB,CAKQM,QALR,0CAOH,GAAMC,CAAAA,MAAM,CAAGH,MAAH,cAAGA,MAAM,CAAEI,QAAR,CAAiBV,MAAjB,CAAf,CACA,GAAMW,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,EAAD,CAAqB,CACnCL,aAAa,EAAIA,aAAa,CAAC,KAAD,CAAQP,MAAR,CAA9B,CACAY,EAAE,EAAIA,EAAE,EAAR,CACD,CAHD,CAIA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACD,EAAD,CAAqB,CAClCL,aAAa,EAAIA,aAAa,CAAC,IAAD,CAAOP,MAAP,CAA9B,CACAY,EAAE,EAAIA,EAAE,EAAR,CACD,CAHD,CAIA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAI,MAAOhB,CAAAA,QAAP,GAAoB,UAAxB,CACE,MAAOA,CAAAA,QAAQ,CAAC,CAAEiB,UAAU,CAAEN,MAAd,CAAsBR,UAAU,CAAVA,UAAtB,CAAD,CAAf,CACF,MAAOH,CAAAA,QAAP,CACD,CAJD,CAKA,MACE,8BAAC,6BAAD,CAAsB,QAAtB,EACE,KAAK,CAAE,CACLC,KAAK,CAAEC,MADF,CAELS,MAAM,CAANA,MAFK,CAGLR,UAAU,CAAVA,UAHK,CAILU,OAAO,CAAPA,OAJK,CAKLE,MAAM,CAANA,MALK,CADT,6EASE,6BAAC,YAAD,0BAASL,QAAT,EAAmB,GAAG,CAAEX,GAAxB,8EACGiB,WAAW,EADd,CATF,CADF,CAeD,CAvCD,C,aAyCeX,eAAMa,IAAN,CAAWb,eAAMc,UAAN,CAAiBrB,aAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { AccordionContext, AccordionItemContext } from './Context';\nimport type { IAccordionItemProps, IAccordionContextProps } from './types';\nimport { useThemeProps } from '../../../hooks';\n\nconst AccordionItem = (\n  { children, index: pIndex = 0, isDisabled, ...props }: IAccordionItemProps,\n  ref?: any\n) => {\n  const {\n    index: cIndex,\n    changeHandler,\n  }: IAccordionContextProps = React.useContext(AccordionContext);\n  const { ...newProps } = useThemeProps('AccordionItem', props);\n\n  const isOpen = cIndex?.includes(pIndex);\n  const onClose = (cb?: () => void) => {\n    changeHandler && changeHandler(false, pIndex);\n    cb && cb();\n  };\n  const onOpen = (cb?: () => void) => {\n    changeHandler && changeHandler(true, pIndex);\n    cb && cb();\n  };\n  const childSetter = () => {\n    if (typeof children === 'function')\n      return children({ isExpanded: isOpen, isDisabled });\n    return children;\n  };\n  return (\n    <AccordionItemContext.Provider\n      value={{\n        index: pIndex,\n        isOpen,\n        isDisabled,\n        onClose,\n        onOpen,\n      }}\n    >\n      <Box {...newProps} ref={ref}>\n        {childSetter()}\n      </Box>\n    </AccordionItemContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionItem));\n"]}