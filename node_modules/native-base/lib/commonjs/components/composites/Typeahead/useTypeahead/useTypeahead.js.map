{"version":3,"sources":["useTypeahead.ts"],"names":["isControlledProp","props","key","undefined","useTypeahead","defaultValues","dropdownDefaultStateValues","isOpen","React","useReducer","useTypeaheadReducer","state","dispatch","dispatchWithProps","object","inputValue","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","type","stateChangeTypes","ControlledPropUpdatedSelectedItem","onChangeText","text","InputChange","handleItemSelect","item","index","ItemClick","Keyboard","dismiss","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","length","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","propOnchangeText","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"+aAAA,kCACA,qDACA,iEAEA,yCACA,8BAEA,QAASA,CAAAA,gBAAT,CAA0BC,KAA1B,CAAsCC,GAAtC,CAAmD,CACjD,MAAOD,CAAAA,KAAK,CAACC,GAAD,CAAL,GAAeC,SAAtB,CACD,CAIM,QAASC,CAAAA,YAAT,CAAsBH,KAAtB,CAAiD,CACtD,GAAII,CAAAA,aAAa,0BAAQC,iCAAR,CAAjB,CACAD,aAAa,CAACE,MAAd,CAAuB,2BAAgBN,KAAhB,CAAuB,QAAvB,CAAvB,CAFsD,sBAI5BO,eAAMC,UAAN,CACxBC,4BADwB,CAExBL,aAFwB,CAJ4B,qEAI/CM,KAJ+C,uBAIxCC,QAJwC,uBAStD,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAAiB,CACzCF,QAAQ,0BAAME,MAAN,EAAcb,KAAK,CAALA,KAAd,GAAR,CACD,CAFD,CATsD,GAa9Cc,CAAAA,UAb8C,CAavBJ,KAbuB,CAa9CI,UAb8C,CAalCR,MAbkC,CAavBI,KAbuB,CAalCJ,MAbkC,IAgBpDS,CAAAA,KAhBoD,CAqBlDf,KArBkD,CAgBpDe,KAhBoD,CAiBpDC,kBAjBoD,CAqBlDhB,KArBkD,CAiBpDgB,kBAjBoD,CAkBpDC,oBAlBoD,CAqBlDjB,KArBkD,CAkBpDiB,oBAlBoD,CAmBpDC,YAnBoD,CAqBlDlB,KArBkD,CAmBpDkB,YAnBoD,CAoBpDC,YApBoD,CAqBlDnB,KArBkD,CAoBpDmB,YApBoD,CAuBtD,GAAMC,CAAAA,YAAY,CAAGrB,gBAAgB,CAACC,KAAD,CAAQ,cAAR,CAArC,CAEA,qBAAU,UAAM,CACd,GAAIoB,YAAJ,CAAkB,CAChBT,QAAQ,CAAC,CACPU,IAAI,CAAEC,gBAAgB,CAACC,iCADhB,CAEPT,UAAU,CAAEK,YAAY,CAACD,YAAD,CAFjB,CAAD,CAAR,CAID,CACF,CAPD,CAOG,CAACA,YAAD,CAAeE,YAAf,CAA6BD,YAA7B,CAPH,EASA,GAAMK,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,IAAD,CAAkB,CACrCT,kBAAkB,MAAlB,QAAAA,kBAAkB,CAAG,CAAEF,UAAU,CAAEW,IAAd,CAAH,CAAlB,CACAb,iBAAiB,CAAC,CAAES,IAAI,CAAEC,gBAAgB,CAACI,WAAzB,CAAsCZ,UAAU,CAAEW,IAAlD,CAAD,CAAjB,CACD,CAHD,CAKA,GAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,IAAD,CAAYC,KAAZ,CAA8B,CACrDZ,oBAAoB,MAApB,QAAAA,oBAAoB,CAAGW,IAAH,CAApB,CACAhB,iBAAiB,CAAC,CAAES,IAAI,CAAEC,gBAAgB,CAACQ,SAAzB,CAAoCD,KAAK,CAALA,KAApC,CAAD,CAAjB,CACAE,sBAASC,OAAT,GACD,CAJD,CAMA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACL,IAAD,CAAYC,KAAZ,CAA8B,CACrD,MAAO,CACLK,OAAO,CAAE,yBAAMP,CAAAA,gBAAgB,CAACC,IAAD,CAAOC,KAAP,CAAtB,EADJ,CAELM,UAAU,CAAE,IAFP,CAGLC,gBAAgB,CAAE,UAHb,CAAP,CAKD,CAND,CAQA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,MAAO,CACLF,UAAU,CAAE,IADP,CAELG,iBAAiB,CAAE,MAFd,CAGLC,iBAAiB,YAAaxB,KAAK,CAACyB,MAAnB,WAHZ,CAAP,CAKD,CAND,CAQA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACjC,MAAO,CACLP,OAAO,CAAE,kBAAM,CACbtB,iBAAiB,CAAC,CAAES,IAAI,CAAEC,gBAAgB,CAACoB,iBAAzB,CAAD,CAAjB,CACD,CAHI,CAAP,CAKD,CAND,CAQA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,YAAD,CAAqBC,gBAArB,CAAgD,CACpE,MAAO,CACLrB,YAAY,CAAEoB,YAAY,CAAGC,gBAAH,CAAsBrB,YAD3C,CAELsB,KAAK,CAAEF,YAAY,CAAGA,YAAH,CAAkB9B,UAFhC,CAGLwB,iBAAiB,CAAE,UAHd,CAILS,kBAAkB,CAAE,iBAJf,CAKLC,kBAAkB,CAAE,CAClBC,QAAQ,CAAE3C,MADQ,CALf,CAAP,CASD,CAVD,CAYA,MAAO,CACLqC,aAAa,CAAbA,aADK,CAELV,gBAAgB,CAAhBA,gBAFK,CAGLI,YAAY,CAAZA,YAHK,CAILI,oBAAoB,CAApBA,oBAJK,CAKLnC,MAAM,CAANA,MALK,CAAP,CAOD","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]}