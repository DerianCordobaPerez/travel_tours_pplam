{"version":3,"sources":["Menu.tsx"],"names":["Menu","ref","trigger","closeOnSelect","children","onOpen","onClose","isOpenProp","isOpen","defaultIsOpen","placement","restProps","triggerRef","React","useRef","value","defaultValue","onChange","setIsOpen","transition","newProps","handleOpen","useCallback","handleClose","triggerProps","updatedTrigger","onPress","open","useEffect","AccessibilityInfo","announceForAccessibility","MenuContent","menuRef","menuProps","typeaheadProps"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IMenuProps } from './types';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Popper } from '../Popper';\nimport { AccessibilityInfo, ScrollView } from 'react-native';\nimport { useControllableState } from '../../../hooks';\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from './useMenu';\nimport Backdrop from '../Backdrop';\nimport { PresenceTransition } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from './MenuContext';\nimport { Overlay } from '../../primitives/Overlay';\n\nconst Menu = (\n  {\n    trigger,\n    closeOnSelect = true,\n    children,\n    onOpen,\n    onClose,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    placement = 'bottom left',\n    ...restProps\n  }: IMenuProps,\n  ref?: any\n) => {\n  const triggerRef = React.useRef(null);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const { transition, ...newProps } = usePropsResolution('Menu', restProps);\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const triggerProps = useMenuTrigger({\n    handleOpen,\n    isOpen,\n  });\n\n  let updatedTrigger = () => {\n    return trigger(\n      {\n        ...triggerProps,\n        ref: triggerRef,\n        onPress: handleOpen,\n      },\n      { open: isOpen }\n    );\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]);\n\n  return (\n    <>\n      {updatedTrigger()}\n      <Overlay isOpen={isOpen} onRequestClose={handleClose} useRNModalOnAndroid>\n        <PresenceTransition visible={isOpen} {...transition}>\n          <Popper\n            triggerRef={triggerRef}\n            onClose={handleClose}\n            placement={placement}\n            {...restProps}\n          >\n            <Backdrop bg=\"transparent\" onPress={handleClose} />\n            <Popper.Content>\n              <MenuContext.Provider\n                value={{ closeOnSelect, onClose: handleClose }}\n              >\n                <FocusScope contain restoreFocus autoFocus>\n                  <MenuContent menuRef={ref} {...newProps}>\n                    {children}\n                  </MenuContent>\n                </FocusScope>\n              </MenuContext.Provider>\n            </Popper.Content>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </>\n  );\n};\n\nconst MenuContent = ({\n  menuRef,\n  ...restProps\n}: Omit<IMenuProps, 'trigger'> & { menuRef: any }) => {\n  const menuProps = useMenu();\n  const typeaheadProps = useMenuTypeahead(menuProps);\n\n  return (\n    <Box {...restProps} {...menuProps} {...typeaheadProps} ref={menuRef}>\n      <ScrollView>{restProps.children}</ScrollView>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Menu));\n"]}