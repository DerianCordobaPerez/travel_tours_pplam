{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","ref","children","onPress","style","textValue","props","React","useContext","MenuContext","closeOnSelect","onClose","menuItemRef","useRef","mergedRef","newProps","useState","textContent","setTextContent","useEffect","menuItem","current","trim","allProps","isDisabled","_disabled","_text","_pressed","_focus","touchProps","menuItemProps","disabled","e","Children","map","child","index"],"mappings":"ohBAAA,qDACA,mEACA,2DACA,qDAEA,0CACA,kCACA,qC,mIAEA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAEfC,GAFe,CAGZ,IAFDC,CAAAA,QAEC,MAFDA,QAEC,CAFSC,QAET,MAFSA,OAET,CAFkBC,KAElB,MAFkBA,KAElB,CAFyBC,SAEzB,MAFyBA,SAEzB,CAFuCC,KAEvC,8GACgCC,eAAMC,UAAN,CAAiBC,wBAAjB,CADhC,CACKC,aADL,mBACKA,aADL,CACoBC,OADpB,mBACoBA,OADpB,CAEH,GAAMC,CAAAA,WAAW,CAAGL,eAAMM,MAAN,CAAkB,IAAlB,CAApB,CACA,GAAMC,CAAAA,SAAS,CAAG,qBAAU,CAACF,WAAD,CAAcX,GAAd,CAAV,CAAlB,CACA,GAAMc,CAAAA,QAAQ,CAAG,sCAAmB,UAAnB,CAA+BT,KAA/B,CAAjB,CAJG,oBAKmCC,eAAMS,QAAN,CAAe,EAAf,CALnC,iEAKIC,WALJ,qBAKiBC,cALjB,qBAMHX,eAAMY,SAAN,CAAgB,UAAM,CACpB,GAAMC,CAAAA,QAAQ,CAAGR,WAAW,CAACS,OAA7B,CACA,GAAID,QAAJ,CAAc,2BACZF,cAAc,CAAC,wBAACE,QAAQ,CAACH,WAAV,8BAAyB,EAAzB,EAA6BK,IAA7B,EAAD,CAAd,CACD,CACF,CALD,CAKG,CAACpB,QAAD,CALH,EAOA,GAAIqB,CAAAA,QAAQ,0BACPR,QADO,CAENA,QAAQ,CAACS,UAAT,CAAsBT,QAAQ,CAACU,SAA/B,CAA2C,EAFrC,CAAZ,CAbG,GAiBKC,CAAAA,KAjBL,CAiBgDH,QAjBhD,CAiBKG,KAjBL,CAiBYC,QAjBZ,CAiBgDJ,QAjBhD,CAiBYI,QAjBZ,CAiBsBC,MAjBtB,CAiBgDL,QAjBhD,CAiBsBK,MAjBtB,CAiBiCC,UAjBjC,uCAiBgDN,QAjBhD,gCAmBH,GAAMO,CAAAA,aAAa,CAAG,yBAAY,CAChCzB,SAAS,CAAEA,SAAF,OAAEA,SAAF,CAAeY,WADQ,CAEhChB,GAAG,CAAEW,WAF2B,CAAZ,CAAtB,CAKA,MACE,8BAAC,oBAAD,wBACE,QAAQ,CAAEe,QADZ,CAEE,MAAM,CAAEC,MAFV,EAGME,aAHN,CAIMD,UAJN,EAKE,GAAG,CAAEf,SALP,CAME,KAAK,CAAEV,KANT,CAOE,QAAQ,CAAEE,KAAK,CAACkB,UAPlB,CASE,kBAAkB,CAAE,CAClBO,QAAQ,CAAEzB,KAAK,CAACkB,UADE,CATtB,CAYE,OAAO,CAAE,iBAACQ,CAAD,CAAY,CACnB,GAAI,CAAC1B,KAAK,CAACkB,UAAX,CAAuB,CACrBrB,QAAO,EAAIA,QAAO,CAAC6B,CAAD,CAAlB,CACA,GAAItB,aAAJ,CAAmB,CACjBC,OAAO,EAAIA,OAAO,EAAlB,CACD,CACF,CACF,CAnBH,8EAqBE,0DACGJ,eAAM0B,QAAN,CAAeC,GAAf,CAAmBhC,QAAnB,CAA6B,SAACiC,KAAD,CAAQC,KAAR,CAAuB,CACnD,GAAI,MAAOD,CAAAA,KAAP,GAAiB,QAArB,CAA+B,CAC7B,MACE,8BAAC,aAAD,0BAAUT,KAAV,EAAiB,GAAG,cAAeU,KAAnC,+EACGD,KADH,CADF,CAKD,CAND,IAMO,CACL,MAAOA,CAAAA,KAAP,CACD,CACF,CAVA,CADH,CArBF,CADF,CAqCD,CAhED,C,aAkEe,gBAAK,sBAAWnC,QAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IMenuItemProps } from './types';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\n\nconst MenuItem = (\n  { children, onPress, style, textValue, ...props }: IMenuItemProps,\n  ref: any\n) => {\n  const { closeOnSelect, onClose } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef<any>(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const newProps = usePropsResolution('MenuItem', props);\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      setTextContent((menuItem.textContent ?? '').trim());\n    }\n  }, [children]);\n\n  let allProps = {\n    ...newProps,\n    ...(newProps.isDisabled ? newProps._disabled : {}),\n  };\n  const { _text, _pressed, _focus, ...touchProps } = allProps;\n\n  const menuItemProps = useMenuItem({\n    textValue: textValue ?? textContent,\n    ref: menuItemRef,\n  });\n\n  return (\n    <Pressable\n      _pressed={_pressed}\n      _focus={_focus}\n      {...menuItemProps}\n      {...touchProps}\n      ref={mergedRef}\n      style={style}\n      disabled={props.isDisabled}\n      // TouchableHighlight doesn't announce disabled, even if disabled prop is set\n      accessibilityState={{\n        disabled: props.isDisabled,\n      }}\n      onPress={(e: any) => {\n        if (!props.isDisabled) {\n          onPress && onPress(e);\n          if (closeOnSelect) {\n            onClose && onClose();\n          }\n        }\n      }}\n    >\n      <>\n        {React.Children.map(children, (child, index: any) => {\n          if (typeof child === 'string') {\n            return (\n              <Text {..._text} key={`menu-item-${index}`}>\n                {child}\n              </Text>\n            );\n          } else {\n            return child;\n          }\n        })}\n      </>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(MenuItem));\n"]}