{"version":3,"sources":["useMenu.tsx"],"names":["useMenuTrigger","handleOpen","isOpen","menuTriggerId","event","includes","key","preventDefault","undefined","useMenu","focusManager","onKeyDown","e","focusNext","wrap","focusPrevious","accessibilityRole","useMenuItem","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","current","Platform","OS","focus","useMenuOptionItem","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","getAttribute","useMenuTypeahead","props","length","ctrlKey","altKey","metaKey","container","currentTarget","values","Array","from","querySelectorAll","map","searchKey","foundValue","find","value","toLowerCase","startsWith","newItem","querySelector","setTimeout"],"mappings":"8KAAA,wCACA,wCACA,yCAOO,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAA+C,IAA5CC,CAAAA,UAA4C,MAA5CA,UAA4C,CAAhCC,MAAgC,MAAhCA,MAAgC,CAC3E,GAAMC,CAAAA,aAAa,CAAG,kBAAtB,CACA,MAAO,CACL,mBAAoB,0BAACC,KAAD,CAA0B,CAC5C,GAAI,CAAC,GAAD,CAAM,OAAN,CAAe,SAAf,CAA0B,WAA1B,EAAuCC,QAAvC,CAAgDD,KAAK,CAACE,GAAtD,CAAJ,CAAgE,CAC9DF,KAAK,CAACG,cAAN,GACAN,UAAU,GACX,CACF,CANI,CAOL,gBAAiB,MAPZ,CAQL,gBAAiBC,MAAM,CAAG,IAAH,CAAUM,SAR5B,CASL,WAAYL,aATP,CAAP,CAWD,CAbM,C,sCAeA,GAAMM,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAC3B,GAAIC,CAAAA,YAAY,CAAG,4BAAnB,CACA,GAAIC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,CAAD,CAAsB,CACpC,OAAQA,CAAC,CAACN,GAAV,EACE,IAAK,WAAL,CAAkB,CAChBM,CAAC,CAACL,cAAF,GACAG,YAAY,CAACG,SAAb,CAAuB,CAAEC,IAAI,CAAE,IAAR,CAAvB,EACA,MACD,CACD,IAAK,SAAL,CAAgB,CACdF,CAAC,CAACL,cAAF,GACAG,YAAY,CAACK,aAAb,CAA2B,CAAED,IAAI,CAAE,IAAR,CAA3B,EACA,MACD,CAVH,CAYD,CAbD,CAeA,MAAO,CACLH,SAAS,CAATA,SADK,CAELK,iBAAiB,CAAE,MAFd,CAAP,CAID,CArBM,C,wBAuBA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,OAMrB,IALJC,CAAAA,SAKI,OALJA,SAKI,CAJJC,GAII,OAJJA,GAII,CACJ,MAAO,CACLH,iBAAiB,CAAE,UADd,CAELI,OAAO,CAAE,CACPC,kBAAkB,CAAEH,SADb,CAFJ,CAKLI,SAAS,CAAE,oBAAM,CACf,GAAIH,GAAG,CAACI,OAAJ,EAAeC,sBAASC,EAAT,GAAgB,KAAnC,CAA0CN,GAAG,CAACI,OAAJ,CAAYG,KAAZ,GAC3C,CAPI,CAAP,CASD,CAhBM,C,gCAkBA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,OAM3B,IALJC,CAAAA,SAKI,OALJA,SAKI,CAJJC,IAII,OAJJA,IAII,CACJ,MAAO,CACLb,iBAAiB,CAAG,YACjBQ,sBAASC,EAAT,GAAgB,KAAhB,CAAwBI,IAAxB,CAA+B,EADd,CADf,CAGLC,kBAAkB,CAAE,CAClBC,OAAO,CAAEH,SADS,CAHf,CAMLI,oBAAoB,CAAEJ,SANjB,CAAP,CAQD,CAfM,C,4CAiBP,GAAMK,CAAAA,SAAS,CAAG,2BAAlB,CACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,OAAD,yDAAsBA,OAAO,CAACC,YAAR,CAAqBH,SAArB,CAAtB,8BAAyD,EAAzD,EAAjB,CAEO,GAAMI,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,CAAqB,CACnD,MAAO,CACL3B,SADK,oBACKP,KADL,CAC2B,CAC9B,GAAIkC,KAAK,CAAC3B,SAAV,CAAqB,CACnB2B,KAAK,CAAC3B,SAAN,CAAgBP,KAAhB,EACD,CAED,GACEA,KAAK,CAACE,GAAN,CAAUiC,MAAV,GAAqB,CAArB,EACA,EAAEnC,KAAK,CAACoC,OAAN,EAAiBpC,KAAK,CAACqC,MAAvB,EAAiCrC,KAAK,CAACsC,OAAzC,CAFF,CAGE,CACA,GAAMC,CAAAA,SAAS,CAAGvC,KAAK,CAACwC,aAAxB,CACA,GAAMC,CAAAA,MAAM,CAAGC,KAAK,CAACC,IAAN,CACbJ,SAAS,CAACK,gBAAV,KAA+Bf,SAA/B,KADa,EAEbgB,GAFa,CAETf,QAFS,CAAf,CAIA,GAAMgB,CAAAA,SAAS,CAAG9C,KAAK,CAACE,GAAxB,CAEA,GAAM6C,CAAAA,UAAU,CAAGN,MAAM,CAACO,IAAP,CAAY,SAACC,KAAD,QAC7BA,CAAAA,KAAK,CAACC,WAAN,GAAoBC,UAApB,CAA+BL,SAA/B,CAD6B,EAAZ,CAAnB,CAGA,GAAMM,CAAAA,OAAO,CAAGb,SAAS,CAACc,aAAV,KACVxB,SADU,OACIkB,UADJ,OAAhB,CAIA,GAAIK,OAAJ,CAAa,CAKXE,UAAU,CAAC,iBAAOF,CAAAA,OAAD,CAAyB9B,KAAzB,EAAN,EAAD,CAAV,CACD,CACF,CACF,CAhCI,CAAP,CAkCD,CAnCM,C","sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  let focusManager = useFocusManager();\n  let onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"]}