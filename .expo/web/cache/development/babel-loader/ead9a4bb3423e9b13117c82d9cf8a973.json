{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLink = useLink;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar linkToHREF = function linkToHREF(URL) {\n  _reactNative.Linking.openURL(URL).catch(function (err) {\n    return console.error('An error occurred', err);\n  });\n};\n\nvar addOnPressFunctionality = function addOnPressFunctionality(href, callback) {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : function () {};\n};\n\nfunction useLink(props) {\n  var href = props.href,\n      isExternal = props.isExternal,\n      _onPress = props.onPress,\n      _ref = props._ref;\n  var platformLinkProps = {};\n\n  if (_reactNative.Platform.OS === 'web') {\n    platformLinkProps = {\n      href: href,\n      onClick: _onPress\n    };\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: function onPress() {\n        addOnPressFunctionality(href, _onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: (0, _extends2.default)({}, platformLinkProps, {\n      accessibilityRole: 'link',\n      accessible: true\n    })\n  };\n}","map":{"version":3,"sources":["useLink.ts"],"names":["linkToHREF","Linking","console","addOnPressFunctionality","href","callback","isExternal","onPress","_ref","props","platformLinkProps","Platform","onClick","linkProps","accessibilityRole","accessible"],"mappings":";;;;;;;+CAAA,gC;;;;AAIA,IAAMA,UAAU,GAAVA,SAAAA,UAAAA,CAAa,GAAbA,EAA8B;AAClCC,EAAAA,YAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,GAAAA,EAAAA,KAAAA,CAA2B,UAAA,GAAA,EAAA;AAAA,WAASC,OAAO,CAAPA,KAAAA,CAAAA,mBAAAA,EAAT,GAASA,CAAT;AAA3BD,GAAAA;AADF,CAAA;;AAIA,IAAME,uBAAuB,GAAvBA,SAAAA,uBAAAA,CAA0B,IAA1BA,EAA0B,QAA1BA,EAAiE;AACrEC,EAAAA,IAAI,GAAGJ,UAAU,CAAb,IAAa,CAAb,GAAJI,EAAAA;AACAC,EAAAA,QAAQ,GAAGA,QAAH,EAAA,GAAgB,YAAM,CAA9BA,CAAAA;AAFF,CAAA;;AAKO,SAAA,OAAA,CAAA,KAAA,EAAsC;AAAA,MACnCD,IADmC,GACCK,KADD,CAAA,IAAA;AAAA,MAC7BH,UAD6B,GACCG,KADD,CAAA,UAAA;AAAA,MACjBF,QADiB,GACCE,KADD,CAAA,OAAA;AAAA,MACRD,IADQ,GACCC,KADD,CAAA,IAAA;AAG3C,MAAIC,iBAAiB,GAArB,EAAA;;AAEA,MAAIC,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAJ,KAAA,EAA2B;AACzBD,IAAAA,iBAAiB,GAAG;AAClBN,MAAAA,IAAI,EADc,IAAA;AAElBQ,MAAAA,OAAO,EAFTF;AAAoB,KAApBA;;AAKA,QAAIJ,UAAU,IAAIE,IAAI,CAAtB,OAAA,EAAgC;AAC9BA,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,MAAAA,GAAAA,QAAAA;AAEH;AATD,GAAA,MASO;AACLE,IAAAA,iBAAiB,GAAG;AAClBH,MAAAA,OAAO,EAAE,SAAA,OAAA,GAAM;AACbJ,QAAAA,uBAAuB,CAAA,IAAA,EAAvBA,QAAuB,CAAvBA;AAFJO;AAAoB,KAApBA;AAOF;;AAAA,SAAO;AACLG,IAAAA,SAAS,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,iBAAA,EAAA;AAEPC,MAAAA,iBAAiB,EAFV,MAAA;AAGPC,MAAAA,UAAU,EAJd;AACW,KAAA;AADJ,GAAP;AAOD","sourcesContent":["import { Linking, Platform } from 'react-native';\nimport type { IUseLinkProp } from './types';\nimport type { AccessibilityRole } from 'react-native';\n\nconst linkToHREF = (URL: string) => {\n  Linking.openURL(URL).catch((err) => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href: string | any, callback: any) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props: IUseLinkProp) {\n  const { href, isExternal, onPress, _ref } = props;\n\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress,\n    };\n    // Adding target to a tag created by RN-Web\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      },\n    };\n  }\n\n  return {\n    linkProps: {\n      ...platformLinkProps,\n      accessibilityRole: 'link' as AccessibilityRole,\n      accessible: true,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}