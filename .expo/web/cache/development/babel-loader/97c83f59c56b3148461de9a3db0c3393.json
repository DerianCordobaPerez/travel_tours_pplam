{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMenuTypeahead = exports.useMenuOptionItem = exports.useMenuItem = exports.useMenu = exports.useMenuTrigger = void 0;\n\nvar _focus = require(\"@react-aria/focus\");\n\nvar _utils = require(\"@react-aria/utils\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useMenuTrigger = function useMenuTrigger(_ref) {\n  var handleOpen = _ref.handleOpen,\n      isOpen = _ref.isOpen;\n  var menuTriggerId = (0, _utils.useId)();\n  return {\n    'onKeyDownCapture': function onKeyDownCapture(event) {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\n\nexports.useMenuTrigger = useMenuTrigger;\n\nvar useMenu = function useMenu() {\n  var focusManager = (0, _focus.useFocusManager)();\n\n  var onKeyDown = function onKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown: onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\n\nexports.useMenu = useMenu;\n\nvar useMenuItem = function useMenuItem(_ref2) {\n  var textValue = _ref2.textValue,\n      ref = _ref2.ref;\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: function onHoverIn() {\n      if (ref.current && _reactNative.Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\n\nexports.useMenuItem = useMenuItem;\n\nvar useMenuOptionItem = function useMenuOptionItem(_ref3) {\n  var isChecked = _ref3.isChecked,\n      type = _ref3.type;\n  return {\n    accessibilityRole: 'menuitem' + (_reactNative.Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\n\nexports.useMenuOptionItem = useMenuOptionItem;\nvar ITEM_ATTR = 'data-nativebase-menu-item';\n\nvar getValue = function getValue(element) {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) != null ? _element$getAttribute : '';\n};\n\nvar useMenuTypeahead = function useMenuTypeahead(props) {\n  return {\n    onKeyDown: function onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        var container = event.currentTarget;\n        var values = Array.from(container.querySelectorAll(\"[\" + ITEM_ATTR + \"]\")).map(getValue);\n        var searchKey = event.key;\n        var foundValue = values.find(function (value) {\n          return value.toLowerCase().startsWith(searchKey);\n        });\n        var newItem = container.querySelector(\"[\" + ITEM_ATTR + \"=\\\"\" + foundValue + \"\\\"]\");\n\n        if (newItem) {\n          setTimeout(function () {\n            return newItem.focus();\n          });\n        }\n      }\n    }\n  };\n};\n\nexports.useMenuTypeahead = useMenuTypeahead;","map":{"version":3,"sources":["useMenu.tsx"],"names":["useMenuTrigger","handleOpen","isOpen","menuTriggerId","event","useMenu","focusManager","onKeyDown","e","wrap","accessibilityRole","useMenuItem","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","Platform","useMenuOptionItem","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","useMenuTypeahead","props","container","values","Array","searchKey","foundValue","value","newItem","setTimeout"],"mappings":"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","sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  let focusManager = useFocusManager();\n  let onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}