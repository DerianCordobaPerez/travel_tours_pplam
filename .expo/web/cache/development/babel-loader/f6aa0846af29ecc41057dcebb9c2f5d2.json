{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useThemeProps = useThemeProps;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.get\"));\n\nvar _lodash2 = _interopRequireDefault(require(\"lodash.omit\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _useNativeBase2 = require(\"./../useNativeBase\");\n\nvar _tools = require(\"./../../theme/tools/\");\n\nvar _filterShadowProps = require(\"./../../utils/filterShadowProps\");\n\nvar _utils = require(\"./utils\");\n\nvar filterAndCalculateProps = function filterAndCalculateProps(theme, colorModeProps, componentTheme, propsReceived, windowWidth) {\n  var _extractInObject = (0, _tools.extractInObject)(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']),\n      _extractInObject2 = (0, _slicedToArray2.default)(_extractInObject, 2),\n      ignoredProps = _extractInObject2[0],\n      props = _extractInObject2[1];\n\n  var newProps = (0, _utils.calculateProps)(theme, colorModeProps, componentTheme, props, windowWidth);\n  var mergedProps = (0, _filterShadowProps.filterShadowProps)(newProps, ignoredProps, _reactNative.Platform.OS);\n  return (0, _tools.omitUndefined)(mergedProps);\n};\n\nfunction useThemeProps(component, propsReceived) {\n  var _useWindowDimensions;\n\n  var _useNativeBase = (0, _useNativeBase2.useNativeBase)(),\n      theme = _useNativeBase.theme,\n      colorModeProps = (0, _objectWithoutProperties2.default)(_useNativeBase, [\"theme\"]);\n\n  var componentTheme = (0, _lodash.default)(theme, \"components.\" + component);\n  var windowWidth = (_useWindowDimensions = (0, _reactNative.useWindowDimensions)()) == null ? void 0 : _useWindowDimensions.width;\n  return filterAndCalculateProps((0, _lodash2.default)(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}","map":{"version":3,"sources":["useProps.tsx"],"names":["filterAndCalculateProps","ignoredProps","props","newProps","mergedProps","Platform","theme","colorModeProps","componentTheme","windowWidth"],"mappings":";;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;;;AAEA,IAAA,eAAA,GAAA,OAAA,sBAAA;;AACA,IAAA,MAAA,GAAA,OAAA,wBAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,mCAAA;;AACA,IAAA,MAAA,GAAA,OAAA,WAAA;;AAEA,IAAMA,uBAAuB,GAAvBA,SAAAA,uBAAAA,CAA0B,KAA1BA,EAA0B,cAA1BA,EAA0B,cAA1BA,EAA0B,aAA1BA,EAA0B,WAA1BA,EAMD;AAAA,MAAA,gBAAA,GAIyB,CAAA,GAAA,MAAA,CAAA,eAAA,EAAA,aAAA,EAA+B,CAAA,UAAA,EAAA,OAAA,EAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAJxD,SAIwD,CAA/B,CAJzB;AAAA,MAAA,iBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,gBAAA,EAAA,CAAA,CAAA;AAAA,MAIEC,YAJF,GAAA,iBAAA,CAAA,CAAA,CAAA;AAAA,MAIgBC,KAJhB,GAAA,iBAAA,CAAA,CAAA,CAAA;;AAYH,MAAIC,QAAQ,GAAG,CAAA,GAAA,MAAA,CAAA,cAAA,EAAA,KAAA,EAAA,cAAA,EAAA,cAAA,EAAA,KAAA,EAAf,WAAe,CAAf;AAOA,MAAIC,WAAW,GAAG,CAAA,GAAA,kBAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,YAAA,EAA0CC,YAAAA,CAAAA,QAAAA,CAA5D,EAAkB,CAAlB;AACA,SAAO,CAAA,GAAA,MAAA,CAAA,aAAA,EAAP,WAAO,CAAP;AA1BF,CAAA;;AA6BO,SAAA,aAAA,CAAA,SAAA,EAAA,aAAA,EAA8D;AAAA,MAAA,oBAAA;;AAAA,MAAA,cAAA,GAC9B,CAAA,GAAA,eAAA,CAD8B,aAC9B,GAD8B;AAAA,MAC3DC,KAD2D,GAAA,cAAA,CAAA,KAAA;AAAA,MACjDC,cADiD,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,cAAA,EAAA,CAAA,OAAA,CAAA,CAAA;;AAInE,MAAMC,cAAc,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAA,KAAA,EAAA,gBAAvB,SAAuB,CAAvB;AAEA,MAAMC,WAAW,GAAA,CAAA,oBAAA,GAAG,CAAA,GAAA,YAAA,CAAH,mBAAG,GAAH,KAAA,IAAA,GAAA,KAAA,CAAA,GAAG,oBAAA,CAApB,KAAA;AAGA,SAAOT,uBAAuB,CAC5B,CAAA,GAAA,QAAA,CAAA,OAAA,EAAA,KAAA,EAAY,CADgB,YAChB,CAAZ,CAD4B,EAAA,cAAA,EAAA,cAAA,EAAA,aAAA,EAA9B,WAA8B,CAA9B;AAOD","sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  propsReceived: any,\n  windowWidth: any\n) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, [\n    'children',\n    'style',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  let newProps = calculateProps(\n    theme,\n    colorModeProps,\n    componentTheme,\n    props,\n    windowWidth\n  );\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component: string, propsReceived: any) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, `components.${component}`);\n  // console.log('COMPONENT THEME = ', componentTheme);\n  const windowWidth = useWindowDimensions()?.width;\n\n  // To pass the component theme props and component props seperately\n  return filterAndCalculateProps(\n    omit(theme, ['components']),\n    colorModeProps,\n    componentTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]},"metadata":{},"sourceType":"script"}