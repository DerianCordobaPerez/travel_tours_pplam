{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _native = _interopRequireDefault(require(\"styled-components/native\"));\n\nvar _utils = require(\"../../../utils\");\n\nvar _styledSystem = require(\"styled-system\");\n\nvar _customProps = require(\"../../../utils/customProps\");\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _focus2 = require(\"@react-native-aria/focus\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Pressable/Pressable.tsx\";\n\nvar useHover = function useHover() {\n  var _React$useState = _react.default.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isHovered = _React$useState2[0],\n      setHovered = _React$useState2[1];\n\n  return {\n    pressableProps: {\n      onHoverIn: function onHoverIn() {\n        return setHovered(true);\n      },\n      onHoverOut: function onHoverOut() {\n        return setHovered(false);\n      }\n    },\n    isHovered: isHovered\n  };\n};\n\nvar useFocus = function useFocus() {\n  var _React$useState3 = _react.default.useState(false),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      isFocused = _React$useState4[0],\n      setFocused = _React$useState4[1];\n\n  return {\n    focusProps: {\n      onFocus: function onFocus() {\n        return setFocused(true);\n      },\n      onBlur: function onBlur() {\n        return setFocused(false);\n      }\n    },\n    isFocused: isFocused\n  };\n};\n\nvar useIsPressed = function useIsPressed() {\n  var _React$useState5 = _react.default.useState(false),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      isPressed = _React$useState6[0],\n      setIsPressed = _React$useState6[1];\n\n  return {\n    pressableProps: {\n      onPressIn: function onPressIn() {\n        return setIsPressed(true);\n      },\n      onPressOut: function onPressOut() {\n        return setIsPressed(false);\n      }\n    },\n    isPressed: isPressed\n  };\n};\n\nvar StyledPressable = (0, _native.default)(_reactNative.Pressable)(_styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.position, _customProps.customPosition, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customLayout);\n\nvar Pressable = function Pressable(_ref, ref) {\n  var children = _ref.children,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      onHoverIn = _ref.onHoverIn,\n      onHoverOut = _ref.onHoverOut,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"children\", \"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\"]);\n\n  var _useHover = useHover(),\n      pressableProps = _useHover.pressableProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      isPressedProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _usePropsResolution = (0, _useThemeProps.usePropsResolution)('Pressable', props),\n      _hover = _usePropsResolution._hover,\n      _pressed = _usePropsResolution._pressed,\n      _focus = _usePropsResolution._focus,\n      _focusVisible = _usePropsResolution._focusVisible,\n      _disabled = _usePropsResolution._disabled,\n      themeProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"_hover\", \"_pressed\", \"_focus\", \"_focusVisible\", \"_disabled\"]);\n\n  var _useFocusRing = (0, _focus2.useFocusRing)(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  return _react.default.createElement(StyledPressable, (0, _extends2.default)({\n    ref: ref,\n    onPressIn: (0, _utils.composeEventHandlers)(onPressIn, isPressedProps.onPressIn),\n    onPressOut: (0, _utils.composeEventHandlers)(onPressOut, isPressedProps.onPressOut),\n    onHoverIn: (0, _utils.composeEventHandlers)(onHoverIn, pressableProps.onHoverIn),\n    onHoverOut: (0, _utils.composeEventHandlers)(onHoverOut, pressableProps.onHoverOut),\n    onFocus: (0, _utils.composeEventHandlers)((0, _utils.composeEventHandlers)(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: (0, _utils.composeEventHandlers)((0, _utils.composeEventHandlers)(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, themeProps, isHovered && _hover, isFocused && _focus, isFocusVisible && _focusVisible, isPressed && _pressed, props.disabled && _disabled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }), typeof children !== 'function' ? children : children({\n    isPressed: isPressed,\n    isHovered: isHovered,\n    isFocused: isFocused\n  }));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(Pressable));\n\nexports.default = _default;","map":{"version":3,"sources":["Pressable.tsx"],"names":["useHover","isHovered","setHovered","React","pressableProps","onHoverIn","onHoverOut","useFocus","isFocused","setFocused","focusProps","onFocus","onBlur","useIsPressed","isPressed","setIsPressed","onPressIn","onPressOut","StyledPressable","RNPressable","color","space","layout","flexbox","border","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","Pressable","children","props","isPressedProps","_hover","_pressed","_focus","_focusVisible","_disabled","themeProps","isFocusVisible","focusRingProps"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAEA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,8BAAA;;AASA,IAAA,cAAA,GAAA,OAAA,gCAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;;;;AAEA,IAAMA,QAAQ,GAARA,SAAAA,QAAAA,GAAiB;AAAA,MAAA,eAAA,GACWG,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CADX,KACWA,CADX;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MACdF,SADc,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MACHC,UADG,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAErB,SAAO;AACLE,IAAAA,cAAc,EAAE;AACdC,MAAAA,SAAS,EAAE,SAAA,SAAA,GAAA;AAAA,eAAMH,UAAU,CAAhB,IAAgB,CAAhB;AADG,OAAA;AAEdI,MAAAA,UAAU,EAAE,SAAA,UAAA,GAAA;AAAA,eAAMJ,UAAU,CAAhB,KAAgB,CAAhB;AAHT;AACW,KADX;AAKLD,IAAAA,SAAS,EALX;AAAO,GAAP;AAFF,CAAA;;AAWA,IAAMM,QAAQ,GAARA,SAAAA,QAAAA,GAAiB;AAAA,MAAA,gBAAA,GACWJ,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CADX,KACWA,CADX;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,gBAAA,EAAA,CAAA,CAAA;AAAA,MACdK,SADc,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MACHC,UADG,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAErB,SAAO;AACLC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,eAAMF,UAAU,CAAhB,IAAgB,CAAhB;AADC,OAAA;AAEVG,MAAAA,MAAM,EAAE,SAAA,MAAA,GAAA;AAAA,eAAMH,UAAU,CAAhB,KAAgB,CAAhB;AAHL;AACO,KADP;AAKLD,IAAAA,SAAS,EALX;AAAO,GAAP;AAFF,CAAA;;AAWA,IAAMK,YAAY,GAAZA,SAAAA,YAAAA,GAAqB;AAAA,MAAA,gBAAA,GACSV,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CADT,KACSA,CADT;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,gBAAA,EAAA,CAAA,CAAA;AAAA,MAClBW,SADkB,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MACPC,YADO,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAEzB,SAAO;AACLX,IAAAA,cAAc,EAAE;AACdY,MAAAA,SAAS,EAAE,SAAA,SAAA,GAAA;AAAA,eAAMD,YAAY,CAAlB,IAAkB,CAAlB;AADG,OAAA;AAEdE,MAAAA,UAAU,EAAE,SAAA,UAAA,GAAA;AAAA,eAAMF,YAAY,CAAlB,KAAkB,CAAlB;AAHT;AACW,KADX;AAKLD,IAAAA,SAAS,EALX;AAAO,GAAP;AAFF,CAAA;;AAWA,IAAMI,eAAe,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAOC,YAAAA,CAAP,SAAA,EACtBC,aAAAA,CADsB,KAAA,EAEtBC,aAAAA,CAFsB,KAAA,EAGtBC,aAAAA,CAHsB,MAAA,EAItBC,aAAAA,CAJsB,OAAA,EAKtBC,aAAAA,CALsB,MAAA,EAMtBC,aAAAA,CANsB,QAAA,EAOtBC,YAAAA,CAPsB,cAAA,EAQtBC,YAAAA,CARsB,YAAA,EAStBC,YAAAA,CATsB,gBAAA,EAUtBC,YAAAA,CAVsB,aAAA,EAWtBC,YAAAA,CAXsB,YAAA,EAYtBC,YAAAA,CAZsB,WAAA,EAatBC,YAAAA,CAbF,YAAwB,CAAxB;;AAgBA,IAAMC,SAAS,GAATA,SAAAA,SAAAA,CAAY,IAAZA,EAAY,GAAZA,EAYD;AAVDC,MAAAA,QAUC,GAAA,IAAA,CAVDA,QAAAA;AAAAA,MACAlB,SASC,GAAA,IAAA,CATDA,SADAkB;AAAAA,MAEAjB,UAQC,GAAA,IAAA,CARDA,UAFAiB;AAAAA,MAGA7B,SAOC,GAAA,IAAA,CAPDA,SAHA6B;AAAAA,MAIA5B,UAMC,GAAA,IAAA,CANDA,UAJA4B;AAAAA,MAKAvB,OAKC,GAAA,IAAA,CALDA,OALAuB;AAAAA,MAMAtB,MAIC,GAAA,IAAA,CAJDA,MANAsB;AAAAA,MAOGC,KAGF,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,WAAA,EAAA,YAAA,EAAA,SAAA,EAAA,QAAA,CAAA,CAVDD;;AAUC,MAAA,SAAA,GACmClC,QADnC,EAAA;AAAA,MACKI,cADL,GAAA,SAAA,CAAA,cAAA;AAAA,MACqBH,SADrB,GAAA,SAAA,CAAA,SAAA;;AAAA,MAAA,aAAA,GAEmDY,YAFnD,EAAA;AAAA,MAEqBuB,cAFrB,GAAA,aAAA,CAAA,cAAA;AAAA,MAEqCtB,SAFrC,GAAA,aAAA,CAAA,SAAA;;AAAA,MAAA,SAAA,GAG+BP,QAH/B,EAAA;AAAA,MAGKG,UAHL,GAAA,SAAA,CAAA,UAAA;AAAA,MAGiBF,SAHjB,GAAA,SAAA,CAAA,SAAA;;AAAA,MAAA,mBAAA,GAWC,CAAA,GAAA,cAAA,CAAA,kBAAA,EAAA,WAAA,EAXD,KAWC,CAXD;AAAA,MAKD6B,MALC,GAAA,mBAAA,CAAA,MAAA;AAAA,MAMDC,QANC,GAAA,mBAAA,CAAA,QAAA;AAAA,MAODC,MAPC,GAAA,mBAAA,CAAA,MAAA;AAAA,MAQDC,aARC,GAAA,mBAAA,CAAA,aAAA;AAAA,MASDC,SATC,GAAA,mBAAA,CAAA,SAAA;AAAA,MAUEC,UAVF,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,CAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,eAAA,EAAA,WAAA,CAAA,CAAA;;AAAA,MAAA,aAAA,GAYyD,CAAA,GAAA,OAAA,CAZzD,YAYyD,GAZzD;AAAA,MAYKC,cAZL,GAAA,aAAA,CAAA,cAAA;AAAA,MAYiCC,cAZjC,GAAA,aAAA,CAAA,UAAA;;AAcH,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,eAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,SAAS,EAAE,CAAA,GAAA,MAAA,CAAA,oBAAA,EAAA,SAAA,EAAgCR,cAAc,CAF3D,SAEa,CAFb;AAGE,IAAA,UAAU,EAAE,CAAA,GAAA,MAAA,CAAA,oBAAA,EAAA,UAAA,EAAiCA,cAAc,CAH7D,UAGc,CAHd;AAKE,IAAA,SAAS,EAAE,CAAA,GAAA,MAAA,CAAA,oBAAA,EAAA,SAAA,EAAgChC,cAAc,CAL3D,SAKa,CALb;AAOE,IAAA,UAAU,EAAE,CAAA,GAAA,MAAA,CAAA,oBAAA,EAAA,UAAA,EAAiCA,cAAc,CAP7D,UAOc,CAPd;AASE,IAAA,OAAO,EAAE,CAAA,GAAA,MAAA,CAAA,oBAAA,EACP,CAAA,GAAA,MAAA,CAAA,oBAAA,EAAA,OAAA,EAA8BM,UAAU,CADjC,OACP,CADO,EAEPkC,cAAc,CAXlB,OASW,CATX;AAcE,IAAA,MAAM,EAAE,CAAA,GAAA,MAAA,CAAA,oBAAA,EACN,CAAA,GAAA,MAAA,CAAA,oBAAA,EAAA,MAAA,EAA6BlC,UAAU,CADjC,MACN,CADM,EAENkC,cAAc,CAhBlB,MAcU;AAdV,GAAA,EAAA,UAAA,EAmBO3C,SAAS,IAnBhB,MAAA,EAoBOO,SAAS,IApBhB,MAAA,EAqBOmC,cAAc,IArBrB,aAAA,EAsBO7B,SAAS,IAtBhB,QAAA,EAuBOqB,KAAK,CAALA,QAAAA,IAvBP,SAAA,EAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAyBG,OAAA,QAAA,KAAA,UAAA,GAAA,QAAA,GAEGD,QAAQ,CAAC;AACPpB,IAAAA,SAAS,EADF,SAAA;AAEPb,IAAAA,SAAS,EAFF,SAAA;AAGPO,IAAAA,SAAS,EA/BnB;AA4BiB,GAAD,CA3Bd,CADF;AA1BF,CAAA;;eA+De,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,CAAA,GAAA,MAAA,CAAA,UAAA,EAAL,SAAK,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport styled from 'styled-components/native';\nimport { composeEventHandlers } from '../../../utils';\nimport { border, color, flexbox, layout, position, space } from 'styled-system';\nimport type { IPressableProps } from './types';\nimport {\n  customBackground,\n  customBorder,\n  customExtra,\n  customLayout,\n  customOutline,\n  customPosition,\n  customShadow,\n} from '../../../utils/customProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    pressableProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false),\n    },\n    isHovered,\n  };\n};\n\nconst useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n    isFocused,\n  };\n};\n\nconst useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false),\n    },\n    isPressed,\n  };\n};\n\nconst StyledPressable = styled(RNPressable)<IPressableProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout\n);\n\nconst Pressable = (\n  {\n    children,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...props\n  }: IPressableProps,\n  ref: any\n) => {\n  const { pressableProps, isHovered } = useHover();\n  const { pressableProps: isPressedProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const {\n    _hover,\n    _pressed,\n    _focus,\n    _focusVisible,\n    _disabled,\n    ...themeProps\n  } = usePropsResolution('Pressable', props);\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n  // TODO : Replace Render props with Context Hook\n  return (\n    <StyledPressable\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, isPressedProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, isPressedProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, pressableProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, pressableProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...themeProps}\n      {...(isHovered && _hover)}\n      {...(isFocused && _focus)}\n      {...(isFocusVisible && _focusVisible)}\n      {...(isPressed && _pressed)}\n      {...(props.disabled && _disabled)}\n    >\n      {typeof children !== 'function'\n        ? children\n        : children({\n            isPressed,\n            isHovered,\n            isFocused,\n          })}\n    </StyledPressable>\n  );\n};\n\nexport default memo(forwardRef(Pressable));\n"]},"metadata":{},"sourceType":"script"}