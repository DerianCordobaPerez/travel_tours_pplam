{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useDisclose = useDisclose;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction useDisclose(initState) {\n  var _React$useState = _react.default.useState(initState || false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isOpen = _React$useState2[0],\n      setIsOpen = _React$useState2[1];\n\n  var onOpen = function onOpen() {\n    setIsOpen(true);\n  };\n\n  var onClose = function onClose() {\n    setIsOpen(false);\n  };\n\n  var onToggle = function onToggle() {\n    setIsOpen(!isOpen);\n  };\n\n  return {\n    isOpen: isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle\n  };\n}","map":{"version":3,"sources":["useDisclose.ts"],"names":["isOpen","setIsOpen","React","initState","onOpen","onClose","onToggle"],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEO,SAAA,WAAA,CAAA,SAAA,EAA0C;AAAA,MAAA,eAAA,GACnBE,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAeC,SAAS,IADL,KACnBD,CADmB;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MACxCF,MADwC,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAChCC,SADgC,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAE/C,MAAMG,MAAM,GAANA,SAAAA,MAAAA,GAAe;AACnBH,IAAAA,SAAS,CAATA,IAAS,CAATA;AADF,GAAA;;AAGA,MAAMI,OAAO,GAAPA,SAAAA,OAAAA,GAAgB;AACpBJ,IAAAA,SAAS,CAATA,KAAS,CAATA;AADF,GAAA;;AAGA,MAAMK,QAAQ,GAARA,SAAAA,QAAAA,GAAiB;AACrBL,IAAAA,SAAS,CAAC,CAAVA,MAAS,CAATA;AADF,GAAA;;AAGA,SAAO;AACLD,IAAAA,MAAM,EADD,MAAA;AAELI,IAAAA,MAAM,EAFD,MAAA;AAGLC,IAAAA,OAAO,EAHF,OAAA;AAILC,IAAAA,QAAQ,EAJV;AAAO,GAAP;AAMD","sourcesContent":["import React from 'react';\n\nexport function useDisclose(initState?: boolean) {\n  const [isOpen, setIsOpen] = React.useState(initState || false);\n  const onOpen = () => {\n    setIsOpen(true);\n  };\n  const onClose = () => {\n    setIsOpen(false);\n  };\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}