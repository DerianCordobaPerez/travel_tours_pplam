{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _Box = _interopRequireDefault(require(\"../../primitives/Box\"));\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Skeleton/Skeleton.tsx\";\n\nvar Skeleton = function Skeleton(allProps, ref) {\n  var _props$transform;\n\n  var isDomUsable = (0, _utils.canUseDom)();\n  var variant = allProps.variant,\n      children = allProps.children,\n      props = (0, _objectWithoutProperties2.default)(allProps, [\"variant\", \"children\"]);\n  var newProps = (0, _hooks.useThemeProps)('Skeleton', props);\n  var style = newProps.style,\n      skeletonColor = newProps.skeletonColor,\n      baseColor = newProps.baseColor;\n\n  var blinkAnim = _react.default.useRef(new _reactNative.Animated.Value(0)).current;\n\n  _react.default.useEffect(function () {\n    if (isDomUsable) {\n      var blink = _reactNative.Animated.sequence([_reactNative.Animated.timing(blinkAnim, {\n        toValue: 1,\n        duration: 1000,\n        useNativeDriver: _reactNative.Platform.OS !== 'web'\n      }), _reactNative.Animated.timing(blinkAnim, {\n        toValue: 0,\n        duration: 1000,\n        useNativeDriver: _reactNative.Platform.OS !== 'web'\n      })]);\n\n      _reactNative.Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable]);\n\n  var skeletonStyle = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      height: '100%',\n      width: '100%',\n      borderRadius: variant === 'circle' ? 999 : 3,\n      backgroundColor: skeletonColor,\n      opacity: blinkAnim\n    }\n  };\n  return _react.default.createElement(_Box.default, (0, _extends2.default)({\n    style: [style, {\n      transform: ((_props$transform = props.transform) != null ? _props$transform : variant === 'text') ? [{\n        scaleY: 0.6\n      }] : undefined\n    }],\n    borderRadius: variant === 'circle' ? 999 : 3,\n    bg: baseColor\n  }, props, {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }), _react.default.createElement(_reactNative.Animated.View, {\n    style: skeletonStyle.skeleton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), children ? _react.default.createElement(_reactNative.View, {\n    style: {\n      opacity: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }\n  }, children) : null);\n};\n\nvar _default = _react.default.memo(_react.default.forwardRef(Skeleton));\n\nexports.default = _default;","map":{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","isDomUsable","variant","children","props","allProps","newProps","style","skeletonColor","baseColor","blinkAnim","React","Animated","blink","toValue","duration","useNativeDriver","Platform","skeletonStyle","skeleton","position","top","bottom","height","width","borderRadius","backgroundColor","opacity","transform","scaleY"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, Platform, View } from 'react-native';\nimport { useThemeProps } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\n\nconst Skeleton = (allProps: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const { variant, children, ...props } = allProps;\n  const newProps = useThemeProps('Skeleton', props);\n  const { style, skeletonColor, baseColor } = newProps;\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration: 1000,\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration: 1000,\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      height: '100%',\n      width: '100%',\n      borderRadius: variant === 'circle' ? 999 : 3,\n      backgroundColor: skeletonColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  return (\n    <Box\n      style={[\n        style,\n        {\n          transform:\n            props.transform ?? variant === 'text'\n              ? [{ scaleY: 0.6 }]\n              : undefined,\n        },\n      ]}\n      borderRadius={variant === 'circle' ? 999 : 3}\n      bg={baseColor}\n      {...props}\n      ref={ref}\n    >\n      <Animated.View style={skeletonStyle.skeleton} />\n      {children ? <View style={{ opacity: 0 }}>{children}</View> : null}\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(Skeleton));\n"]},"metadata":{},"sourceType":"script"}