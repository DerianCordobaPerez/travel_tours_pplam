{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Overlay = Overlay;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _overlays = require(\"@react-native-aria/overlays\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _ExitAnimationContext = require(\"./ExitAnimationContext\");\n\nvar _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Overlay/Overlay.tsx\";\n\nfunction Overlay(_ref) {\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n      useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n      _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n      isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n      onRequestClose = _ref.onRequestClose;\n\n  var _React$useState = _react.default.useState(!isOpen),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      exited = _React$useState2[0],\n      setExited = _React$useState2[1];\n\n  (0, _hooks.useKeyboardDismissable)({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose\n  });\n\n  if (exited && !isOpen) {\n    return null;\n  }\n\n  if (_reactNative.Platform.OS === 'android' && useRNModalOnAndroid) {\n    return _react.default.createElement(_ExitAnimationContext.ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, _react.default.createElement(_reactNative.Modal, {\n      transparent: true,\n      visible: true,\n      onRequestClose: onRequestClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, children));\n  }\n\n  return _react.default.createElement(_overlays.OverlayContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_ExitAnimationContext.ExitAnimationContext.Provider, {\n    value: {\n      exited: exited,\n      setExited: setExited\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, children));\n}","map":{"version":3,"sources":["Overlay.tsx"],"names":["children","isOpen","useRNModalOnAndroid","isKeyboardDismissable","onRequestClose","exited","setExited","React","enabled","callback","Platform"],"mappings":"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","sourcesContent":["import { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport { Modal } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\ninterface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  onRequestClose?: any;\n  isKeyboardDismissable?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  onRequestClose,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose,\n  });\n\n  if (exited && !isOpen) {\n    return null;\n  }\n\n  // Android handles multiple Modal in RN and is better for accessibility as it shifts accessibility focus on mount, however it may not needed in case of tooltips, toast where one doesn't need to shift accessibility focus\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal transparent visible={true} onRequestClose={onRequestClose}>\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  // Since OverlayContainer mounts children in NativeBaseProvider  using Context, we need to pass the context by wrapping children\n  return (\n    <OverlayContainer>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}