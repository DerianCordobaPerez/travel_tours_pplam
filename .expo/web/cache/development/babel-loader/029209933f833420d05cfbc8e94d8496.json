{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useControllableProp = useControllableProp;\nexports.useControllableState = useControllableState;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nfunction useControllableProp(prop, state) {\n  var _React$useRef = _react.default.useRef(prop !== undefined),\n      isControlled = _React$useRef.current;\n\n  var value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value];\n}\n\nfunction useControllableState(props) {\n  var valueProp = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange;\n\n  var _React$useState = _react.default.useState(defaultValue),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      valueState = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var isControlled = valueProp !== undefined;\n  var value = isControlled ? valueProp : valueState;\n\n  var updateValue = _react.default.useCallback(function (next) {\n    var nextValue = typeof next === 'function' ? next(value) : next;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChange && onChange(nextValue);\n  }, [isControlled, onChange, value]);\n\n  return [value, updateValue];\n}","map":{"version":3,"sources":["useControllableProp.ts"],"names":["isControlled","React","prop","value","valueProp","defaultValue","onChange","props","valueState","setValue","updateValue","nextValue","next"],"mappings":";;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEO,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAA+D;AAAA,MAAA,aAAA,GAClCC,MAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAaC,IAAI,KADiB,SAClCD,CADkC;AAAA,MACnDD,YADmD,GAAA,aAAA,CAAA,OAAA;;AAEpE,MAAMG,KAAK,GAAGH,YAAY,IAAI,OAAA,IAAA,KAAhBA,WAAAA,GAAAA,IAAAA,GAAd,KAAA;AACA,SAAO,CAAA,YAAA,EAAP,KAAO,CAAP;AA0BK;;AAAA,SAAA,oBAAA,CAAA,KAAA,EAAsE;AAAA,MAC5DI,SAD4D,GACtBG,KADsB,CAAA,KAAA;AAAA,MACjDF,YADiD,GACtBE,KADsB,CAAA,YAAA;AAAA,MACnCD,QADmC,GACtBC,KADsB,CAAA,QAAA;;AAAA,MAAA,eAAA,GAG5CN,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAH4C,YAG5CA,CAH4C;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAGpEO,UAHoE,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAGxDC,QAHwD,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAI3E,MAAMT,YAAY,GAAGI,SAAS,KAA9B,SAAA;AAEA,MAAMD,KAAK,GAAGH,YAAY,GAAA,SAAA,GAA1B,UAAA;;AAEA,MAAMU,WAAW,GAAGT,MAAAA,CAAAA,OAAAA,CAAAA,WAAAA,CAClB,UAAA,IAAA,EAAe;AACb,QAAMU,SAAS,GAAG,OAAA,IAAA,KAAA,UAAA,GAA6BC,IAAI,CAAjC,KAAiC,CAAjC,GAAlB,IAAA;;AACA,QAAI,CAAJ,YAAA,EAAmB;AACjBH,MAAAA,QAAQ,CAARA,SAAQ,CAARA;AAEFH;;AAAAA,IAAAA,QAAQ,IAAIA,QAAQ,CAApBA,SAAoB,CAApBA;AANgBL,GAAAA,EAQlB,CAAA,YAAA,EAAA,QAAA,EARF,KAQE,CARkBA,CAApB;;AAWA,SAAO,CAAA,KAAA,EAAP,WAAO,CAAP;AACD","sourcesContent":["import React from 'react';\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined);\n  const value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value] as const;\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T;\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T);\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void;\n  /**\n   * The component name (for warnings)\n   */\n  name?: string;\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props;\n\n  const [valueState, setValue] = React.useState(defaultValue as T);\n  const isControlled = valueProp !== undefined;\n\n  const value = isControlled ? (valueProp as T) : valueState;\n\n  const updateValue = React.useCallback(\n    (next: any) => {\n      const nextValue = typeof next === 'function' ? next(value) : next;\n      if (!isControlled) {\n        setValue(nextValue);\n      }\n      onChange && onChange(nextValue);\n    },\n    [isControlled, onChange, value]\n  );\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n"]},"metadata":{},"sourceType":"script"}