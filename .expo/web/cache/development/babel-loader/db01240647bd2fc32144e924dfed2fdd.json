{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { useLocale, useCollator } from \"@react-aria/i18n\";\nimport { focusWithoutScrolling, isMac, mergeProps } from \"@react-aria/utils\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { useEffect, useRef, useMemo } from \"react\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nexport function useTypeSelect(options) {\n  var keyboardDelegate = options.keyboardDelegate,\n      selectionManager = options.selectionManager,\n      onTypeSelect = options.onTypeSelect;\n  var state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  var onKeyDown = function onKeyDown(e) {\n    var character = $c78d7fa5f7d5832f9b4f97b33a679865$var$getStringForKey(e.key);\n\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n    var key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function () {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction $c78d7fa5f7d5832f9b4f97b33a679865$var$getStringForKey(key) {\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n\nfunction $a9b9aa71af07c56ab1d89ca45381f4b$var$isCtrlKeyPressed(e) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n\nexport function useSelectableCollection(options) {\n  var manager = options.selectionManager,\n      delegate = options.keyboardDelegate,\n      ref = options.ref,\n      _options$autoFocus = options.autoFocus,\n      autoFocus = _options$autoFocus === void 0 ? false : _options$autoFocus,\n      _options$shouldFocusW = options.shouldFocusWrap,\n      shouldFocusWrap = _options$shouldFocusW === void 0 ? false : _options$shouldFocusW,\n      _options$disallowEmpt = options.disallowEmptySelection,\n      disallowEmptySelection = _options$disallowEmpt === void 0 ? false : _options$disallowEmpt,\n      _options$disallowSele = options.disallowSelectAll,\n      disallowSelectAll = _options$disallowSele === void 0 ? false : _options$disallowSele,\n      _options$selectOnFocu = options.selectOnFocus,\n      selectOnFocus = _options$selectOnFocu === void 0 ? false : _options$selectOnFocu,\n      _options$disallowType = options.disallowTypeAhead,\n      disallowTypeAhead = _options$disallowType === void 0 ? false : _options$disallowType,\n      shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n      _options$allowsTabNav = options.allowsTabNavigation,\n      allowsTabNavigation = _options$allowsTabNav === void 0 ? false : _options$allowsTabNav;\n\n  var _useLocale = useLocale(),\n      direction = _useLocale.direction;\n\n  var onKeyDown = function onKeyDown(e) {\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    if (e.altKey || !ref.current.contains(e.target)) {\n      return;\n    }\n\n    var navigateToKey = function navigateToKey(key, childFocus) {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          if (delegate.getKeyBelow) {\n            e.preventDefault();\n            var nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : delegate.getFirstKey == null ? void 0 : delegate.getFirstKey();\n\n            if (nextKey == null && shouldFocusWrap) {\n              nextKey = delegate.getFirstKey == null ? void 0 : delegate.getFirstKey(manager.focusedKey);\n            }\n\n            navigateToKey(nextKey);\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (delegate.getKeyAbove) {\n            e.preventDefault();\n\n            var _nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : delegate.getLastKey == null ? void 0 : delegate.getLastKey();\n\n            if (_nextKey == null && shouldFocusWrap) {\n              _nextKey = delegate.getLastKey == null ? void 0 : delegate.getLastKey(manager.focusedKey);\n            }\n\n            navigateToKey(_nextKey);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (delegate.getKeyLeftOf) {\n            e.preventDefault();\n\n            var _nextKey2 = delegate.getKeyLeftOf(manager.focusedKey);\n\n            navigateToKey(_nextKey2, direction === 'rtl' ? 'first' : 'last');\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (delegate.getKeyRightOf) {\n            e.preventDefault();\n\n            var _nextKey3 = delegate.getKeyRightOf(manager.focusedKey);\n\n            navigateToKey(_nextKey3, direction === 'rtl' ? 'last' : 'first');\n          }\n\n          break;\n        }\n\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          var firstKey = delegate.getFirstKey(manager.focusedKey, $a9b9aa71af07c56ab1d89ca45381f4b$var$isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n\n          if ($a9b9aa71af07c56ab1d89ca45381f4b$var$isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n\n        break;\n\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          var lastKey = delegate.getLastKey(manager.focusedKey, $a9b9aa71af07c56ab1d89ca45381f4b$var$isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n\n          if ($a9b9aa71af07c56ab1d89ca45381f4b$var$isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n\n        break;\n\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n\n          var _nextKey4 = delegate.getKeyPageBelow(manager.focusedKey);\n\n          navigateToKey(_nextKey4);\n        }\n\n        break;\n\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n\n          var _nextKey5 = delegate.getKeyPageAbove(manager.focusedKey);\n\n          navigateToKey(_nextKey5);\n        }\n\n        break;\n\n      case 'a':\n        if ($a9b9aa71af07c56ab1d89ca45381f4b$var$isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n\n        break;\n\n      case 'Escape':\n        e.preventDefault();\n\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n\n        break;\n\n      case 'Tab':\n        {\n          if (!allowsTabNavigation) {\n            if (e.shiftKey) {\n              ref.current.focus();\n            } else {\n              var walker = getFocusableTreeWalker(ref.current, {\n                tabbable: true\n              });\n              var next;\n              var last;\n\n              do {\n                last = walker.lastChild();\n\n                if (last) {\n                  next = last;\n                }\n              } while (last);\n\n              if (next && !next.contains(document.activeElement)) {\n                focusWithoutScrolling(next);\n              }\n            }\n\n            break;\n          }\n        }\n    }\n  };\n\n  var onFocus = function onFocus(e) {\n    if (manager.isFocused) {\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      var relatedTarget = e.relatedTarget;\n\n      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) {\n        var _manager$lastSelected;\n\n        manager.setFocusedKey((_manager$lastSelected = manager.lastSelectedKey) != null ? _manager$lastSelected : delegate.getLastKey());\n      } else {\n        var _manager$firstSelecte;\n\n        manager.setFocusedKey((_manager$firstSelecte = manager.firstSelectedKey) != null ? _manager$firstSelecte : delegate.getFirstKey());\n      }\n    }\n  };\n\n  var onBlur = function onBlur(e) {\n    if (!e.currentTarget.contains(e.relatedTarget)) {\n      manager.setFocused(false);\n    }\n  };\n\n  var autoFocusRef = useRef(autoFocus);\n  useEffect(function () {\n    if (autoFocusRef.current) {\n      var focusedKey = null;\n\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      }\n\n      if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      var selectedKeys = manager.selectedKeys;\n\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n\n    autoFocusRef.current = false;\n  }, []);\n  var handlers = {\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onMouseDown: function onMouseDown(e) {\n      if (e.currentTarget.contains(e.target)) {\n        e.preventDefault();\n      }\n    }\n  };\n\n  var _useTypeSelect = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  }),\n      typeSelectProps = _useTypeSelect.typeSelectProps;\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  var tabIndex;\n\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: _babelRuntimeHelpersEsmExtends({}, handlers, {\n      tabIndex: tabIndex\n    })\n  };\n}\nexport function useSelectableItem(options) {\n  var manager = options.selectionManager,\n      key = options.key,\n      ref = options.ref,\n      shouldSelectOnPressUp = options.shouldSelectOnPressUp,\n      isVirtualized = options.isVirtualized,\n      shouldUseVirtualFocus = options.shouldUseVirtualFocus,\n      focus = options.focus;\n\n  var onSelect = function onSelect(e) {\n    return manager.select(key, e);\n  };\n\n  var isFocused = key === manager.focusedKey;\n  useEffect(function () {\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  }, [ref, isFocused, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  var itemProps = {};\n\n  if (!shouldUseVirtualFocus) {\n    itemProps = {\n      tabIndex: isFocused ? 0 : -1,\n      onFocus: function onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  }\n\n  if (shouldSelectOnPressUp) {\n    itemProps.onPressStart = function (e) {\n      if (e.pointerType === 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    itemProps.onPressUp = function (e) {\n      if (e.pointerType !== 'keyboard') {\n        onSelect(e);\n      }\n    };\n  } else {\n    itemProps.onPressStart = function (e) {\n      if (e.pointerType !== 'touch') {\n        onSelect(e);\n      }\n    };\n\n    itemProps.onPress = function (e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  return {\n    itemProps: itemProps\n  };\n}\nexport var ListKeyboardDelegate = function () {\n  function ListKeyboardDelegate(collection, disabledKeys, ref, collator) {\n    _classCallCheck(this, ListKeyboardDelegate);\n\n    this.collection = void 0;\n    this.disabledKeys = void 0;\n    this.ref = void 0;\n    this.collator = void 0;\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  _createClass(ListKeyboardDelegate, [{\n    key: \"getKeyBelow\",\n    value: function getKeyBelow(key) {\n      key = this.collection.getKeyAfter(key);\n\n      while (key != null) {\n        var item = this.collection.getItem(key);\n\n        if (item.type === 'item' && !this.disabledKeys.has(key)) {\n          return key;\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    }\n  }, {\n    key: \"getKeyAbove\",\n    value: function getKeyAbove(key) {\n      key = this.collection.getKeyBefore(key);\n\n      while (key != null) {\n        var item = this.collection.getItem(key);\n\n        if (item.type === 'item' && !this.disabledKeys.has(key)) {\n          return key;\n        }\n\n        key = this.collection.getKeyBefore(key);\n      }\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var key = this.collection.getFirstKey();\n\n      while (key != null) {\n        var item = this.collection.getItem(key);\n\n        if (item.type === 'item' && !this.disabledKeys.has(key)) {\n          return key;\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var key = this.collection.getLastKey();\n\n      while (key != null) {\n        var item = this.collection.getItem(key);\n\n        if (item.type === 'item' && !this.disabledKeys.has(key)) {\n          return key;\n        }\n\n        key = this.collection.getKeyBefore(key);\n      }\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.ref.current.querySelector(\"[data-key=\\\"\" + key + \"\\\"]\");\n    }\n  }, {\n    key: \"getKeyPageAbove\",\n    value: function getKeyPageAbove(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n\n      if (!item) {\n        return null;\n      }\n\n      var pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n      while (item && item.offsetTop > pageY) {\n        key = this.getKeyAbove(key);\n        item = this.getItem(key);\n      }\n\n      return key;\n    }\n  }, {\n    key: \"getKeyPageBelow\",\n    value: function getKeyPageBelow(key) {\n      var menu = this.ref.current;\n      var item = this.getItem(key);\n\n      if (!item) {\n        return null;\n      }\n\n      var pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n      while (item && item.offsetTop < pageY) {\n        key = this.getKeyBelow(key);\n        item = this.getItem(key);\n      }\n\n      return key;\n    }\n  }, {\n    key: \"getKeyForSearch\",\n    value: function getKeyForSearch(search, fromKey) {\n      if (!this.collator) {\n        return null;\n      }\n\n      var collection = this.collection;\n      var key = fromKey || this.getFirstKey();\n\n      while (key != null) {\n        var item = collection.getItem(key);\n        var substring = item.textValue.slice(0, search.length);\n\n        if (item.textValue && this.collator.compare(substring, search) === 0) {\n          return key;\n        }\n\n        key = this.getKeyBelow(key);\n      }\n\n      return null;\n    }\n  }]);\n\n  return ListKeyboardDelegate;\n}();\nexport function useSelectableList(props) {\n  var selectionManager = props.selectionManager,\n      collection = props.collection,\n      disabledKeys = props.disabledKeys,\n      ref = props.ref,\n      keyboardDelegate = props.keyboardDelegate,\n      autoFocus = props.autoFocus,\n      shouldFocusWrap = props.shouldFocusWrap,\n      isVirtualized = props.isVirtualized,\n      disallowEmptySelection = props.disallowEmptySelection,\n      _props$selectOnFocus = props.selectOnFocus,\n      selectOnFocus = _props$selectOnFocus === void 0 ? false : _props$selectOnFocus,\n      disallowTypeAhead = props.disallowTypeAhead,\n      shouldUseVirtualFocus = props.shouldUseVirtualFocus,\n      allowsTabNavigation = props.allowsTabNavigation;\n  var collator = useCollator({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  var delegate = useMemo(function () {\n    return keyboardDelegate || new ListKeyboardDelegate(collection, disabledKeys, ref, collator);\n  }, [keyboardDelegate, collection, disabledKeys, ref, collator]);\n  useEffect(function () {\n    if (!isVirtualized && selectionManager.focusedKey && ref != null && ref.current) {\n      var element = ref.current.querySelector(\"[data-key=\\\"\" + selectionManager.focusedKey + \"\\\"]\");\n\n      if (element) {\n        $a09ba753e08b703267f2392f7fc8e96$var$scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n\n  var _useSelectableCollect = useSelectableCollection({\n    ref: ref,\n    selectionManager: selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus: autoFocus,\n    shouldFocusWrap: shouldFocusWrap,\n    disallowEmptySelection: disallowEmptySelection,\n    selectOnFocus: selectOnFocus,\n    disallowTypeAhead: disallowTypeAhead,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    allowsTabNavigation: allowsTabNavigation\n  }),\n      collectionProps = _useSelectableCollect.collectionProps;\n\n  return {\n    listProps: collectionProps\n  };\n}\n\nfunction $a09ba753e08b703267f2392f7fc8e96$var$scrollIntoView(scrollView, element) {\n  var offsetX = $a09ba753e08b703267f2392f7fc8e96$var$relativeOffset(scrollView, element, 'left');\n  var offsetY = $a09ba753e08b703267f2392f7fc8e96$var$relativeOffset(scrollView, element, 'top');\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n  var x = scrollView.scrollLeft;\n  var y = scrollView.scrollTop;\n  var maxX = x + scrollView.offsetWidth;\n  var maxY = y + scrollView.offsetHeight;\n\n  if (offsetX <= x) {\n    x = offsetX;\n  } else if (offsetX + width > maxX) {\n    x += offsetX + width - maxX;\n  }\n\n  if (offsetY <= y) {\n    y = offsetY;\n  } else if (offsetY + height > maxY) {\n    y += offsetY + height - maxY;\n  }\n\n  scrollView.scrollLeft = x;\n  scrollView.scrollTop = y;\n}\n\nfunction $a09ba753e08b703267f2392f7fc8e96$var$relativeOffset(ancestor, child, axis) {\n  var prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';\n  var sum = 0;\n\n  while (child.offsetParent) {\n    sum += child[prop];\n\n    if (child.offsetParent === ancestor) {\n      break;\n    } else if (child.offsetParent.contains(ancestor)) {\n      sum -= ancestor[prop];\n      break;\n    }\n\n    child = child.offsetParent;\n  }\n\n  return sum;\n}","map":{"version":3,"sources":["packages/@react-aria/selection/src/useTypeSelect.ts","packages/@react-aria/selection/src/useSelectableCollection.ts","packages/@react-aria/selection/src/useSelectableItem.ts","packages/@react-aria/selection/src/ListKeyboardDelegate.ts","packages/@react-aria/selection/src/useSelectableList.ts"],"names":["onTypeSelect","state","search","timeout","onKeyDown","e","character","getStringForKey","key","keyboardDelegate","selectionManager","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","isMac","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","disallowTypeAhead","allowsTabNavigation","direction","useLocale","ref","navigateToKey","manager","delegate","nextKey","firstKey","isCtrlKeyPressed","lastKey","walker","getFocusableTreeWalker","tabbable","last","next","document","focusWithoutScrolling","onFocus","relatedTarget","Node","onBlur","autoFocusRef","useRef","useEffect","focusedKey","selectedKeys","focusSafely","handlers","onMouseDown","mergeProps","tabIndex","collectionProps","focus","onSelect","isFocused","itemProps","collection","disabledKeys","collator","constructor","getKeyBelow","item","getKeyAbove","getFirstKey","getLastKey","getKeyPageAbove","menu","pageY","Math","getKeyPageBelow","getKeyForSearch","fromKey","substring","useCollator","usage","sensitivity","useMemo","element","scrollIntoView","shouldUseVirtualFocus","listProps","offsetX","relativeOffset","offsetY","width","height","x","scrollView","y","maxX","maxY","prop","axis","sum","child","ancestor"],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, KeyboardEvent, useRef} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\ninterface TypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\ninterface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: TypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent, HTMLAttributes, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {focusWithoutScrolling, isMac, mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\nfunction isCtrlKeyPressed(e: KeyboardEvent) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: SelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false\n  } = options;\n  let {direction} = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: HTMLElement;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        manager.setFocusedKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        manager.setFocusedKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (e.currentTarget.contains(e.target)) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, Key, RefObject, useEffect} from 'react';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressEvent} from '@react-types/shared';\nimport {PressProps} from '@react-aria/interactions';\n\ninterface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\ninterface SelectableItemAria {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: HTMLAttributes<HTMLElement> & PressProps\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus\n  } = options;\n\n  let onSelect = (e: PressEvent | PointerEvent) => manager.select(key, e);\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  let isFocused = key === manager.focusedKey;\n  useEffect(() => {\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  }, [ref, isFocused, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus) {\n    itemProps = {\n      tabIndex: isFocused ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  }\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  if (shouldSelectOnPressUp) {\n    itemProps.onPressStart = (e) => {\n      if (e.pointerType === 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    itemProps.onPressUp = (e) => {\n      if (e.pointerType !== 'keyboard') {\n        onSelect(e);\n      }\n    };\n  } else {\n    // On touch, it feels strange to select on touch down, so we special case this.\n    itemProps.onPressStart = (e) => {\n      if (e.pointerType !== 'touch') {\n        onSelect(e);\n      }\n    };\n\n    itemProps.onPress = (e) => {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  return {\n    itemProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {HTMLAttributes, Key, RefObject, useEffect, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: SelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(`[data-key=\"${selectionManager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n\n/**\n * Scrolls `scrollView` so that `element` is visible.\n * Similar to `element.scrollIntoView({block: 'nearest'})` (not supported in Edge),\n * but doesn't affect parents above `scrollView`.\n */\nfunction scrollIntoView(scrollView: HTMLElement, element: HTMLElement) {\n  let offsetX = relativeOffset(scrollView, element, 'left');\n  let offsetY = relativeOffset(scrollView, element, 'top');\n  let width = element.offsetWidth;\n  let height = element.offsetHeight;\n  let x = scrollView.scrollLeft;\n  let y = scrollView.scrollTop;\n  let maxX = x + scrollView.offsetWidth;\n  let maxY = y + scrollView.offsetHeight;\n\n  if (offsetX <= x) {\n    x = offsetX;\n  } else if (offsetX + width > maxX) {\n    x += offsetX + width - maxX;\n  }\n  if (offsetY <= y) {\n    y = offsetY;\n  } else if (offsetY + height > maxY) {\n    y += offsetY + height - maxY;\n  }\n\n  scrollView.scrollLeft = x;\n  scrollView.scrollTop = y;\n}\n\n/**\n * Computes the offset left or top from child to ancestor by accumulating\n * offsetLeft or offsetTop through intervening offsetParents.\n */\nfunction relativeOffset(ancestor: HTMLElement, child: HTMLElement, axis: 'left'|'top') {\n  const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';\n  let sum = 0;\n  while (child.offsetParent) {\n    sum += child[prop];\n    if (child.offsetParent === ancestor) {\n      // Stop once we have found the ancestor we are interested in.\n      break;\n    } else if (child.offsetParent.contains(ancestor)) {\n      // If the ancestor is not `position:relative`, then we stop at \n      // _its_ offset parent, and we subtract off _its_ offset, so that\n      // we end up with the proper offset from child to ancestor.\n      sum -= ancestor[prop];\n      break;\n    }\n    child = child.offsetParent as HTMLElement;\n  }\n  return sum;\n}\n"]},"metadata":{},"sourceType":"module"}