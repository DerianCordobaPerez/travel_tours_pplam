{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeBaseProvider = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _native = require(\"styled-components/native\");\n\nvar _reactNativeSafeAreaContext = require(\"react-native-safe-area-context\");\n\nvar _utils = require(\"@react-native-aria/utils\");\n\nvar _theme = require(\"./../theme\");\n\nvar _HybridProvider = _interopRequireDefault(require(\"./hybrid-overlay/HybridProvider\"));\n\nvar _overlays = require(\"@react-native-aria/overlays\");\n\nvar _Toast = require(\"../components/composites/Toast\");\n\nvar _NativeBaseContext = require(\"./NativeBaseContext\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/core/NativeBaseProvider.tsx\";\n\nvar defaultInitialWindowMetricsBasedOnPlatform = _reactNative.Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: _reactNativeSafeAreaContext.initialWindowMetrics\n});\n\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  var _config$theme;\n\n  var colorModeManager = props.colorModeManager,\n      _props$config = props.config,\n      config = _props$config === void 0 ? {} : _props$config,\n      children = props.children,\n      _props$theme = props.theme,\n      propsTheme = _props$theme === void 0 ? _theme.theme : _props$theme,\n      initialWindowMetrics = props.initialWindowMetrics;\n  var theme = (_config$theme = config.theme) != null ? _config$theme : propsTheme;\n  return _react.default.createElement(_native.ThemeProvider, {\n    theme: theme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_NativeBaseContext.NativeBaseConfigProvider, {\n    config: config,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics != null ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_HybridProvider.default, {\n    colorModeManager: colorModeManager,\n    options: theme.config,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, _react.default.createElement(_overlays.OverlayProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, _react.default.createElement(_Toast.ToastProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, _react.default.createElement(_utils.SSRProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, children)))))));\n};\n\nexports.NativeBaseProvider = NativeBaseProvider;","map":{"version":3,"sources":["NativeBaseProvider.tsx"],"names":["defaultInitialWindowMetricsBasedOnPlatform","Platform","web","frame","x","y","width","height","insets","top","left","right","bottom","default","defaultInitialWindowMetrics","NativeBaseProvider","colorModeManager","config","children","propsTheme","defaultTheme","initialWindowMetrics","props","theme"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ThemeProvider } from 'styled-components/native';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider } from '../components/composites/Toast';\nimport {\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { Platform } from 'react-native';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = {},\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <NativeBaseConfigProvider config={config}>\n        <SafeAreaProvider\n          initialMetrics={\n            initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n          }\n        >\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </SafeAreaProvider>\n      </NativeBaseConfigProvider>\n    </ThemeProvider>\n  );\n};\n\nexport { NativeBaseProvider };\n"]},"metadata":{},"sourceType":"script"}