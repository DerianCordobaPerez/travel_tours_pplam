{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PopoverContent = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Popper = require(\"../Popper\");\n\nvar _PopoverContext = require(\"./PopoverContext\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Popover/PopoverContent.tsx\";\n\nvar PopoverContent = _react.default.forwardRef(function (props, ref) {\n  var _ref, _ref2, _props$bgColor;\n\n  var _React$useContext = _react.default.useContext(_PopoverContext.PopoverContext),\n      onClose = _React$useContext.onClose,\n      initialFocusRef = _React$useContext.initialFocusRef,\n      finalFocusRef = _React$useContext.finalFocusRef,\n      popoverContentId = _React$useContext.popoverContentId,\n      headerMounted = _React$useContext.headerMounted,\n      bodyMounted = _React$useContext.bodyMounted,\n      bodyId = _React$useContext.bodyId,\n      headerId = _React$useContext.headerId;\n\n  var newProps = (0, _hooks.usePropsResolution)('PopoverContent', props);\n  var arrowDefaultColor = (_ref = (_ref2 = (_props$bgColor = props.bgColor) != null ? _props$bgColor : props.bg) != null ? _ref2 : props.backgroundColor) != null ? _ref : newProps.backgroundColor;\n  var color = (0, _hooks.useToken)('colors', arrowDefaultColor);\n\n  _react.default.useEffect(function () {\n    var finalFocusRefCurrentVal = finalFocusRef == null ? void 0 : finalFocusRef.current;\n\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n\n    return function () {\n      if (finalFocusRefCurrentVal) {\n        finalFocusRefCurrentVal.focus();\n      }\n    };\n  }, [finalFocusRef, initialFocusRef]);\n\n  (0, _hooks.useKeyboardDismissable)({\n    enabled: true,\n    callback: onClose\n  });\n  var arrowElement = null;\n  var restChildren = [];\n\n  _react.default.Children.forEach(props.children, function (child) {\n    if (child.type.displayName === 'PopperArrow') {\n      var _child$props$color;\n\n      arrowElement = _react.default.cloneElement(child, {\n        backgroundColor: (_child$props$color = child.props.color) != null ? _child$props$color : color\n      });\n    } else {\n      restChildren.push(child);\n    }\n  });\n\n  var accessibilityProps = _reactNative.Platform.OS === 'web' ? {\n    'accessibilityRole': 'dialog',\n    'aria-labelledby': headerMounted ? headerId : undefined,\n    'aria-describedby': bodyMounted ? bodyId : undefined\n  } : {};\n  return _react.default.createElement(_Popper.Popper.Content, (0, _extends2.default)({\n    nativeID: popoverContentId\n  }, accessibilityProps, newProps, props, {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), arrowElement, restChildren);\n});\n\nexports.PopoverContent = PopoverContent;\nPopoverContent.displayName = 'PopoverContent';","map":{"version":3,"sources":["PopoverContent.tsx"],"names":["PopoverContent","React","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","PopoverContext","newProps","arrowDefaultColor","props","color","finalFocusRefCurrentVal","enabled","callback","arrowElement","restChildren","child","backgroundColor","accessibilityProps","Platform"],"mappings":"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","sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n    } = React.useContext(PopoverContext);\n    let newProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      newProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      let finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    let restChildren: any = [];\n    React.Children.forEach(props.children, (child) => {\n      if (child.type.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...newProps}\n        {...props}\n        ref={ref}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]},"metadata":{},"sourceType":"script"}