{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useScreenReaderEnabled = useScreenReaderEnabled;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction useScreenReaderEnabled() {\n  var _React$useState = _react.default.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      enabled = _React$useState2[0],\n      setEnabled = _React$useState2[1];\n\n  var mountedRef = _react.default.useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  _react.default.useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      var res;\n      return _regenerator.default.async(function setInitialValue$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(_reactNative.AccessibilityInfo.isScreenReaderEnabled());\n\n            case 2:\n              res = _context.sent;\n              handleSetEnabled(res);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    var handler = _reactNative.AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n\n      _reactNative.AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}","map":{"version":3,"sources":["useScreenReaderEnabled.ts"],"names":["enabled","setEnabled","React","mountedRef","handleSetEnabled","res","AccessibilityInfo","handler","setInitialValue"],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAGO,SAAA,sBAAA,GAAkC;AAAA,MAAA,eAAA,GACTE,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CADS,KACTA,CADS;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MAChCF,OADgC,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MACvBC,UADuB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAEvC,MAAME,UAAU,GAAGD,MAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAnB,KAAmBA,CAAnB;;AAEA,MAAME,gBAAgB,GAAhBA,SAAAA,gBAAAA,CAAmB,KAAnBA,EAAuC;AAC3C,QAAID,UAAU,CAAd,OAAA,EAAwB;AACtBF,MAAAA,UAAU,CAAVA,KAAU,CAAVA;AAEH;AAJD,GAAA;;AAMAC,EAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAgB,YAAM;AACpBC,IAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;;AACA,aAAA,eAAA,GAAA;AAAA,UAAA,GAAA;AAAA,aAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,SAAA,gBAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CACoBG,YAAAA,CAAAA,iBAAAA,CADpB,qBACoBA,EADpB,CAAA;;AAAA,iBAAA,CAAA;AACQD,cAAAA,GADR,GAAA,QAAA,CAAA,IACQA;AACND,cAAAA,gBAAgB,CAAhBA,GAAgB,CAAhBA;;AAFF,iBAAA,CAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AAKA;;AAAA,QAAIG,OAAY,GAAGD,YAAAA,CAAAA,iBAAAA,CAAAA,gBAAAA,CAAAA,qBAAAA,EAEjB,UAAA,KAAA,EAAgB;AACdF,MAAAA,gBAAgB,CAAhBA,KAAgB,CAAhBA;AAHJ,KAAmBE,CAAnB;;AAOAE,IAAAA,eAAe;AACf,WAAO,YAAM;AACXL,MAAAA,UAAU,CAAVA,OAAAA,GAAAA,KAAAA;;AACAG,MAAAA,YAAAA,CAAAA,iBAAAA,CAAAA,mBAAAA,CAAAA,qBAAAA,EAAAA,OAAAA;AAFF,KAAA;AAfFJ,GAAAA;;AAqBA,SAAA,OAAA;AACD","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"script"}