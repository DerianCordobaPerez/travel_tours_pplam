{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResolvedFontFamily = useResolvedFontFamily;\n\nvar _useTheme2 = require(\"./useTheme\");\n\nfunction useResolvedFontFamily(props) {\n  var fontFamily = props.fontFamily,\n      _props$fontStyle = props.fontStyle,\n      fontStyle = _props$fontStyle === void 0 ? 'normal' : _props$fontStyle,\n      _props$fontWeight = props.fontWeight,\n      fontWeight = _props$fontWeight === void 0 ? 400 : _props$fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n\n  var _useTheme = (0, _useTheme2.useTheme)(),\n      fontConfig = _useTheme.fontConfig,\n      fontWeights = _useTheme.fontWeights,\n      fonts = _useTheme.fonts;\n\n  if (fontFamily && fontFamily in fonts) {\n    var fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      newFontWeight = undefined;\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}","map":{"version":3,"sources":["useResolvedFontFamily.ts"],"names":["fontFamily","fontStyle","fontWeight","props","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","fontToken","fontWeightNumber","fontVariant"],"mappings":";;;;;AAAA,IAAA,UAAA,GAAA,OAAA,cAAA;;AAWO,SAAA,qBAAA,CAAA,KAAA,EAIJ;AAAA,MACOA,UADP,GAC8DG,KAD9D,CAAA,UAAA;AAAA,MAAA,gBAAA,GAC8DA,KAD9D,CAAA,SAAA;AAAA,MACmBF,SADnB,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAAA,gBAAA;AAAA,MAAA,iBAAA,GAC8DE,KAD9D,CAAA,UAAA;AAAA,MACyCD,UADzC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAAA,GAAA,GAAA,iBAAA;AAED,MAAIE,aAAa,GAAjB,UAAA;AACA,MAAIC,YAAY,GAAhB,SAAA;AACA,MAAIC,aAAa,GAAjB,UAAA;;AAJC,MAAA,SAAA,GAM0C,CAAA,GAAA,UAAA,CAN1C,QAM0C,GAN1C;AAAA,MAMOC,UANP,GAAA,SAAA,CAAA,UAAA;AAAA,MAMmBC,WANnB,GAAA,SAAA,CAAA,WAAA;AAAA,MAMgCC,KANhC,GAAA,SAAA,CAAA,KAAA;;AAOD,MAAIT,UAAU,IAAIA,UAAU,IAA5B,KAAA,EAAuC;AACrC,QAAMU,SAAS,GAAGD,KAAK,CAAvB,UAAuB,CAAvB;;AAEA,QAAIF,UAAU,IAAIA,UAAU,CAA5B,SAA4B,CAA5B,EAAyC;AAKvCD,MAAAA,aAAa,GAAbA,SAAAA;AAEAD,MAAAA,YAAY,GAAZA,SAAAA;AAEA,UAAIM,gBAAgB,GAClBT,UAAU,IAAVA,WAAAA,GAA4BM,WAAW,CAAvCN,UAAuC,CAAvCA,GADF,UAAA;AAEA,UAAIU,WAAW,GAAGL,UAAU,CAAVA,SAAU,CAAVA,CAAlB,gBAAkBA,CAAlB;;AAEA,UAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;AACnC,YAAIK,WAAW,CAAf,SAAe,CAAf,EAA4BR,aAAa,GAAGQ,WAAW,CAA3BR,SAA2B,CAA3BA;AAD9B,OAAA,MAEO;AACLA,QAAAA,aAAa,GAAbA,WAAAA;AAEH;AAlBD,KAAA,MAkBO;AACLA,MAAAA,aAAa,GAAGK,KAAK,CAArBL,UAAqB,CAArBA;AAEH;AAED;;AAAA,SAAO;AACLJ,IAAAA,UAAU,EADL,aAAA;AAELE,IAAAA,UAAU,EAFL,aAAA;AAGLD,IAAAA,SAAS,EAHX;AAAO,GAAP;AAKD","sourcesContent":["import { useTheme } from './useTheme';\n\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props: {\n  fontFamily?: string;\n  fontStyle?: string;\n  fontWeight?: string | number;\n}) {\n  const { fontFamily, fontStyle = 'normal', fontWeight = 400 } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n\n  const { fontConfig, fontWeights, fonts } = useTheme();\n  if (fontFamily && fontFamily in fonts) {\n    const fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined;\n      //@ts-ignore\n      newFontStyle = undefined;\n\n      let fontWeightNumber =\n        fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}