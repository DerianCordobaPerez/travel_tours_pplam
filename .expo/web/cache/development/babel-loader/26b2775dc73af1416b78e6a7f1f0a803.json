{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useBackHandler = useBackHandler;\nexports.useKeyboardDismissable = exports.keyboardDismissHandlerManager = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar keyboardDismissHandlers = [];\nvar keyboardDismissHandlerManager = {\n  push: function push(handler) {\n    keyboardDismissHandlers.push(handler);\n    return function () {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(function (h) {\n        return h !== handler;\n      });\n    };\n  },\n  length: function length() {\n    return keyboardDismissHandlers.length;\n  },\n  pop: function pop() {\n    return keyboardDismissHandlers.pop();\n  }\n};\nexports.keyboardDismissHandlerManager = keyboardDismissHandlerManager;\n\nvar useKeyboardDismissable = function useKeyboardDismissable(_ref) {\n  var enabled = _ref.enabled,\n      callback = _ref.callback;\n\n  _react.default.useEffect(function () {\n    var cleanupFn = function cleanupFn() {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return function () {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({\n    enabled: enabled,\n    callback: callback\n  });\n};\n\nexports.useKeyboardDismissable = useKeyboardDismissable;\n\nfunction useBackHandler(_ref2) {\n  var enabled = _ref2.enabled,\n      callback = _ref2.callback;\n  (0, _react.useEffect)(function () {\n    var backHandler = function backHandler() {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      _reactNative.BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n\n    return function () {\n      return _reactNative.BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    };\n  }, [enabled, callback]);\n}","map":{"version":3,"sources":["useKeyboardDismissable.ts"],"names":["keyboardDismissHandlers","keyboardDismissHandlerManager","push","h","length","pop","useKeyboardDismissable","enabled","callback","React","cleanupFn","useBackHandler","backHandler","BackHandler"],"mappings":";;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AASA,IAAIA,uBAAyC,GAA7C,EAAA;AACO,IAAMC,6BAA6B,GAAG;AAC3CC,EAAAA,IAAI,EAAE,SAAA,IAAA,CAAA,OAAA,EAAwB;AAC5BF,IAAAA,uBAAuB,CAAvBA,IAAAA,CAAAA,OAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,uBAAuB,GAAGA,uBAAuB,CAAvBA,MAAAA,CACxB,UAAA,CAAA,EAAA;AAAA,eAAOG,CAAC,KAAR,OAAA;AADFH,OAA0BA,CAA1BA;AADF,KAAA;AAHyC,GAAA;AAS3CI,EAAAA,MAAM,EAAE,SAAA,MAAA,GAAA;AAAA,WAAMJ,uBAAuB,CAA7B,MAAA;AATmC,GAAA;AAU3CK,EAAAA,GAAG,EAAE,SAAA,GAAA,GAAM;AACT,WAAOL,uBAAuB,CAA9B,GAAOA,EAAP;AAXG;AAAsC,CAAtC;;;AAkBA,IAAMM,sBAAsB,GAAtBA,SAAAA,sBAAAA,CAAyB,IAAzBA,EAA6D;AAAjCC,MAAAA,OAAiC,GAAA,IAAA,CAAjCA,OAAAA;AAAAA,MAASC,QAAwB,GAAA,IAAA,CAAxBA,QAATD;;AACvCE,EAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAgB,YAAM;AACpB,QAAIC,SAAS,GAAG,SAAA,SAAA,GAAM,CAAtB,CAAA;;AACA,QAAA,OAAA,EAAa;AACXA,MAAAA,SAAS,GAAGT,6BAA6B,CAA7BA,IAAAA,CAAZS,QAAYT,CAAZS;AADF,KAAA,MAEO;AACLA,MAAAA,SAAS;AAEX;;AAAA,WAAO,YAAM;AACXA,MAAAA,SAAS;AADX,KAAA;AAPFD,GAAAA,EAUG,CAAA,OAAA,EAVHA,QAUG,CAVHA;;AAYAE,EAAAA,cAAc,CAAC;AAAEJ,IAAAA,OAAO,EAAT,OAAA;AAAWC,IAAAA,QAAQ,EAAlCG;AAAe,GAAD,CAAdA;AAbK,CAAA;;;;AAgBA,SAAA,cAAA,CAAA,KAAA,EAAwD;AAA9BJ,MAAAA,OAA8B,GAAA,KAAA,CAA9BA,OAAAA;AAAAA,MAASC,QAAqB,GAAA,KAAA,CAArBA,QAATD;AAC/B,GAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;AACd,QAAIK,WAAW,GAAXA,SAAAA,WAAAA,GAAoB;AACtBJ,MAAAA,QAAQ;AACR,aAAA,IAAA;AAFF,KAAA;;AAIA,QAAA,OAAA,EAAa;AACXK,MAAAA,YAAAA,CAAAA,WAAAA,CAAAA,gBAAAA,CAAAA,mBAAAA,EAAAA,WAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,YAAAA,CAAAA,WAAAA,CAAAA,mBAAAA,CAAAA,mBAAAA,EAAAA,WAAAA;AAEF;;AAAA,WAAO,YAAA;AAAA,aACLA,YAAAA,CAAAA,WAAAA,CAAAA,mBAAAA,CAAAA,mBAAAA,EADK,WACLA,CADK;AAAP,KAAA;AAVF,GAAA,EAYG,CAAA,OAAA,EAZH,QAYG,CAZH;AAaD","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]},"metadata":{},"sourceType":"script"}