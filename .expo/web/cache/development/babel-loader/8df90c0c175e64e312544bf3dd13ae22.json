{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Context = require(\"./Context\");\n\nvar _hooks = require(\"./../color-mode/hooks\");\n\nvar _hooks2 = require(\"../../hooks\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/core/hybrid-overlay/HybridProvider.tsx\";\n\nvar HybridProvider = function HybridProvider(_ref) {\n  var children = _ref.children,\n      _ref$options = _ref.options,\n      _ref$options$initialC = _ref$options.initialColorMode,\n      initialColorMode = _ref$options$initialC === void 0 ? 'light' : _ref$options$initialC,\n      _ref$options$accessib = _ref$options.accessibleColors,\n      isTextColorAccessible = _ref$options$accessib === void 0 ? false : _ref$options$accessib,\n      colorModeManager = _ref.colorModeManager;\n\n  var _useModeManager = (0, _hooks.useModeManager)(initialColorMode, colorModeManager),\n      colorMode = _useModeManager.colorMode,\n      setColorMode = _useModeManager.setColorMode;\n\n  var toggleColorMode = _react.default.useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  var _React$useState = _react.default.useState(isTextColorAccessible),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      accessibleColors = _React$useState2[0],\n      setAccessibleColors = _React$useState2[1];\n\n  _react.default.useEffect(function () {\n    var escapeKeyListener = null;\n\n    if (_reactNative.Platform.OS === 'web') {\n      escapeKeyListener = function escapeKeyListener(e) {\n        if (e.key === 'Escape') {\n          if (_hooks2.keyboardDismissHandlerManager.length() > 0) {\n            var lastHandler = _hooks2.keyboardDismissHandlerManager.pop();\n\n            lastHandler();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return function () {\n      if (_reactNative.Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return _react.default.createElement(_Context.HybridContext.Provider, {\n    value: {\n      colorMode: {\n        colorMode: colorMode,\n        toggleColorMode: toggleColorMode,\n        setColorMode: setColorMode,\n        accessibleColors: accessibleColors,\n        setAccessibleColors: setAccessibleColors\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nvar _default = HybridProvider;\nexports.default = _default;","map":{"version":3,"sources":["HybridProvider.tsx"],"names":["HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","colorModeManager","colorMode","setColorMode","toggleColorMode","React","setAccessibleColors","escapeKeyListener","Platform","e","keyboardDismissHandlerManager","lastHandler","document"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport type { IColorModeProviderProps } from './../color-mode';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n  },\n  colorModeManager,\n}: IColorModeProviderProps) => {\n  // Color-mode content\n  const { colorMode, setColorMode } = useModeManager(\n    initialColorMode,\n    colorModeManager\n  );\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  // Accessible color hook\n  const [accessibleColors, setAccessibleColors] = React.useState<boolean>(\n    isTextColorAccessible\n  );\n\n  React.useEffect(() => {\n    let escapeKeyListener: any = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler: any = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n\n  return (\n    <HybridContext.Provider\n      value={{\n        colorMode: {\n          colorMode,\n          toggleColorMode,\n          setColorMode,\n          accessibleColors,\n          setAccessibleColors,\n        },\n      }}\n    >\n      {children}\n    </HybridContext.Provider>\n  );\n};\n\nexport default HybridProvider;\n"]},"metadata":{},"sourceType":"script"}