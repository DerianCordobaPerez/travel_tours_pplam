{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFormControlProvider = useFormControlProvider;\nexports.useFormControl = useFormControl;\nexports.useFormControlContext = exports.FormControlContext = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _utils = require(\"@react-native-aria/utils\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash.omit\"));\n\nvar _utils2 = require(\"../../../utils\");\n\nvar FormControlContext = _react.default.createContext({});\n\nexports.FormControlContext = FormControlContext;\n\nfunction useFormControlProvider(props) {\n  var idProp = props.nativeID,\n      isRequired = props.isRequired,\n      isInvalid = props.isInvalid,\n      isDisabled = props.isDisabled,\n      isReadOnly = props.isReadOnly,\n      htmlProps = (0, _objectWithoutProperties2.default)(props, [\"nativeID\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isReadOnly\"]);\n  var id = (0, _utils.useId)();\n  var nativeID = idProp || \"field-\" + id;\n  var labelId = nativeID + \"-label\";\n  var feedbackId = nativeID + \"-feedback\";\n  var helpTextId = nativeID + \"-helptext\";\n\n  var _React$useState = _react.default.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      hasFeedbackText = _React$useState2[0],\n      setHasFeedbackText = _React$useState2[1];\n\n  var _React$useState3 = _react.default.useState(false),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      hasHelpText = _React$useState4[0],\n      setHasHelpText = _React$useState4[1];\n\n  var context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText: hasFeedbackText,\n    setHasFeedbackText: setHasFeedbackText,\n    hasHelpText: hasHelpText,\n    setHasHelpText: setHasHelpText,\n    nativeID: nativeID,\n    labelId: labelId,\n    feedbackId: feedbackId,\n    helpTextId: helpTextId,\n    htmlProps: htmlProps\n  };\n  return context;\n}\n\nfunction useFormControl(props) {\n  var _props$nativeID;\n\n  var field = useFormControlContext();\n  var describedBy = [];\n  if (field != null && field.hasFeedbackText) describedBy.push(field == null ? void 0 : field.feedbackId);\n  if (field != null && field.hasHelpText) describedBy.push(field == null ? void 0 : field.helpTextId);\n  var ariaDescribedBy = describedBy.join(' ');\n  var cleanProps = (0, _lodash.default)(props, ['isInvalid', 'isDisabled', 'isReadOnly', 'isRequired']);\n  return (0, _extends2.default)({}, cleanProps, {\n    nativeID: (_props$nativeID = props.nativeID) != null ? _props$nativeID : field == null ? void 0 : field.nativeID,\n    disabled: props.isDisabled || (field == null ? void 0 : field.isDisabled),\n    readOnly: props.isReadOnly || (field == null ? void 0 : field.isReadOnly),\n    required: props.isRequired || (field == null ? void 0 : field.isRequired),\n    accessibilityInvalid: (0, _utils2.ariaAttr)(props.isInvalid || (field == null ? void 0 : field.isInvalid)),\n    accessibilityRequired: (0, _utils2.ariaAttr)(props.isRequired || (field == null ? void 0 : field.isRequired)),\n    accessibilityReadOnly: (0, _utils2.ariaAttr)(props.isReadOnly || (field == null ? void 0 : field.isReadOnly)),\n    accessibilityDescribedBy: ariaDescribedBy || undefined\n  });\n}\n\nvar useFormControlContext = function useFormControlContext() {\n  return _react.default.useContext(FormControlContext);\n};\n\nexports.useFormControlContext = useFormControlContext;","map":{"version":3,"sources":["useFormControl.tsx"],"names":["FormControlContext","React","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","props","id","nativeID","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","context","field","useFormControlContext","describedBy","ariaDescribedBy","cleanProps","disabled","readOnly","required","accessibilityInvalid","accessibilityRequired","accessibilityReadOnly","accessibilityDescribedBy"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useId } from '@react-native-aria/utils';\nimport omit from 'lodash.omit';\nimport type { IFormControlProps } from './types';\nimport { ariaAttr } from '../../../utils';\n\nexport type IFormControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  'htmlProps'\n>;\n\nexport const FormControlContext = React.createContext({});\n\nexport function useFormControlProvider(props: IFormControlProps) {\n  const {\n    nativeID: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n\n  const id = useId();\n  // Generate all the required ids\n  const nativeID = idProp || `field-${id}`;\n\n  const labelId = `${nativeID}-label`;\n  const feedbackId = `${nativeID}-feedback`;\n  const helpTextId = `${nativeID}-helptext`;\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false);\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    nativeID,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  };\n\n  return context;\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl(props: IFormControlProps) {\n  const field = useFormControlContext();\n  const describedBy: any[] = [];\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field?.feedbackId);\n  if (field?.hasHelpText) describedBy.push(field?.helpTextId);\n  const ariaDescribedBy = describedBy.join(' ');\n\n  const cleanProps = omit(props, [\n    'isInvalid',\n    'isDisabled',\n    'isReadOnly',\n    'isRequired',\n  ]);\n\n  return {\n    ...cleanProps,\n    nativeID: props.nativeID ?? field?.nativeID,\n    disabled: props.isDisabled || field?.isDisabled,\n    readOnly: props.isReadOnly || field?.isReadOnly,\n    required: props.isRequired || field?.isRequired,\n    accessibilityInvalid: ariaAttr(props.isInvalid || field?.isInvalid),\n    accessibilityRequired: ariaAttr(props.isRequired || field?.isRequired),\n    accessibilityReadOnly: ariaAttr(props.isReadOnly || field?.isReadOnly),\n    accessibilityDescribedBy: ariaDescribedBy || undefined,\n  };\n}\n\nexport const useFormControlContext = () => {\n  return (React.useContext(\n    FormControlContext\n  ) as unknown) as IFormControlContext;\n};\n"]},"metadata":{},"sourceType":"script"}