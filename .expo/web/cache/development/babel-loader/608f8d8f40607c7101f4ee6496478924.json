{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBreadcrumbSeparator = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Text = _interopRequireDefault(require(\"../../primitives/Text\"));\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Breadcrumb/BreadcrumbSeparator.tsx\";\n\nvar getBreadcrumbSeparator = function getBreadcrumbSeparator(children, separator, props, spacing) {\n  var separatorProps = {\n    accessibilityRole: _reactNative.Platform.OS === 'web' ? 'presentation' : undefined\n  };\n\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n\n    var separatorElement = separator ? typeof separator === 'string' ? _react.default.createElement(_Text.default, (0, _extends2.default)({}, separatorProps, {\n      mx: spacing != null ? spacing : 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }), separator) : _react.default.cloneElement(separator, (0, _extends2.default)({\n      mx: spacing != null ? spacing : 2\n    }, separatorProps)) : _react.default.createElement(_Text.default, (0, _extends2.default)({\n      mx: spacing != null ? spacing : 2\n    }, separatorProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }), '/');\n    var result = [];\n\n    if (children && children.length > 1) {\n      result = children.reduce(function (r, a) {\n        return r.concat(a, separatorElement);\n      }, [separatorElement]);\n    }\n\n    result = result.slice(1, -1);\n    return result.map(function (child, index) {\n      return _react.default.cloneElement(child, (0, _extends2.default)({\n        _text: (0, _extends2.default)({}, props)\n      }, props, {\n        key: \"breadcrumb-separator-\" + index\n      }));\n    });\n  } else {\n    return children;\n  }\n};\n\nexports.getBreadcrumbSeparator = getBreadcrumbSeparator;","map":{"version":3,"sources":["BreadcrumbSeparator.tsx"],"names":["getBreadcrumbSeparator","separatorProps","accessibilityRole","Platform","Array","children","separatorElement","separator","spacing","React","mx","result","r","_text","key"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { AccessibilityRole, Platform } from 'react-native';\nimport Text from '../../primitives/Text';\n\nexport const getBreadcrumbSeparator = (\n  children: JSX.Element[] | JSX.Element | any,\n  separator: string | JSX.Element | JSX.Element[] | any,\n  props: any,\n  spacing: number | undefined\n) => {\n  let separatorProps = {\n    accessibilityRole: (Platform.OS === 'web'\n      ? 'presentation'\n      : undefined) as AccessibilityRole,\n  };\n\n  if (Array.isArray(children)) {\n    if (children.length === 1) {\n      return children;\n    }\n    const separatorElement = separator ? (\n      typeof separator === 'string' ? (\n        <Text {...separatorProps} mx={spacing ?? 2}>\n          {separator}\n        </Text>\n      ) : (\n        React.cloneElement(separator, {\n          mx: spacing ?? 2,\n          ...separatorProps,\n        })\n      )\n    ) : (\n      <Text mx={spacing ?? 2} {...separatorProps}>\n        {'/'}\n      </Text>\n    );\n    let result: any = [];\n    if (children && children.length > 1) {\n      result = children.reduce(\n        (r: any[], a: any) => r.concat(a, separatorElement),\n        [separatorElement]\n      );\n    }\n    result = result.slice(1, -1);\n    return result.map((child: any, index: number) => {\n      return React.cloneElement(child, {\n        _text: { ...props },\n        ...props,\n        key: `breadcrumb-separator-${index}`,\n      });\n    });\n  } else {\n    return children;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}