{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Stack = require(\"../../primitives/Stack\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _FormControl = require(\"../FormControl\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Context = require(\"./Context\");\n\nvar _theme = require(\"../../../theme\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/PinInput/PinInput.tsx\";\n\nvar PinInput = function PinInput(_ref, ref) {\n  var children = _ref.children,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"children\"]);\n\n  var _themeTools$extractIn = _theme.themeTools.extractInObject(props, ['p', 'px', 'py', 'pt', 'pb', 'pl', 'pr']),\n      _themeTools$extractIn2 = (0, _slicedToArray2.default)(_themeTools$extractIn, 2),\n      padding = _themeTools$extractIn2[0],\n      remProps = _themeTools$extractIn2[1];\n\n  var _useThemeProps = (0, _hooks.useThemeProps)('PinInput', remProps),\n      manageFocus = _useThemeProps.manageFocus,\n      defaultValue = _useThemeProps.defaultValue,\n      value = _useThemeProps.value,\n      space = _useThemeProps.space,\n      onChange = _useThemeProps.onChange,\n      newProps = (0, _objectWithoutProperties2.default)(_useThemeProps, [\"manageFocus\", \"defaultValue\", \"value\", \"space\", \"onChange\"]);\n\n  var formControlContext = (0, _FormControl.useFormControlContext)();\n  var RefList = [];\n\n  var setRefList = function setRefList(ref, index) {\n    RefList[index] = ref;\n  };\n\n  var _React$useState = _react.default.useState(value || defaultValue),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      pinInputValue = _React$useState2[0],\n      setPinInputValue = _React$useState2[1];\n\n  var handleChange = function handleChange(newValue, fieldIndex) {\n    var temp = pinInputValue && (0, _toConsumableArray2.default)(pinInputValue) || [];\n    temp[fieldIndex] = newValue;\n    value === undefined && setPinInputValue(temp.join(''));\n    onChange && onChange(temp.join(''));\n    if (newValue === '' && manageFocus && fieldIndex - 1 > -1) RefList[fieldIndex - 1].current.focus();else if (newValue && manageFocus && fieldIndex + 1 < RefList.length) RefList[fieldIndex + 1].current.focus();\n    return temp.join('');\n  };\n\n  var handleMultiValueChange = function handleMultiValueChange(newValue, fieldIndex) {\n    var pinFieldLength = RefList.length;\n    var newValueLength = newValue.length;\n\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      var splicedValue = newValue ? (0, _toConsumableArray2.default)(newValue) : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n      onChange && onChange(splicedValue.join(''));\n    }\n\n    if (_reactNative.Platform.OS !== 'ios') {\n      var temp = pinInputValue ? (0, _toConsumableArray2.default)(pinInputValue) : [];\n\n      if (newValue === '') {\n        temp = temp.filter(function (_n, i) {\n          return i !== fieldIndex;\n        });\n        if (manageFocus && fieldIndex - 1 > -1) RefList[fieldIndex - 1].current.focus();\n      } else {\n        temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n        if (manageFocus && fieldIndex + 1 < RefList.length) RefList[fieldIndex + 1].current.focus();\n      }\n\n      value === undefined && setPinInputValue(temp.join(''));\n      onChange && onChange(temp.join(''));\n    }\n  };\n\n  var indexSetter = function indexSetter(allChildren) {\n    var pinInputFiledCounter = -1;\n    return _react.default.Children.map(allChildren, function (child) {\n      pinInputFiledCounter++;\n      return _react.default.cloneElement(child, {\n        fieldIndex: pinInputFiledCounter\n      }, child.props.children);\n    });\n  };\n\n  _react.default.useEffect(function () {\n    if (value !== undefined && value != pinInputValue) setPinInputValue(value);\n  }, [value, pinInputValue, setPinInputValue]);\n\n  return _react.default.createElement(_Context.PinInputContext.Provider, {\n    value: (0, _extends2.default)({}, formControlContext, newProps, {\n      setRefList: setRefList,\n      handleChange: handleChange,\n      handleMultiValueChange: handleMultiValueChange,\n      value: pinInputValue\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, children && _react.default.createElement(_Stack.HStack, (0, _extends2.default)({\n    flexDirection: \"row\",\n    space: space\n  }, padding, {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), indexSetter(children)));\n};\n\nvar _default = _react.default.memo(_react.default.forwardRef(PinInput));\n\nexports.default = _default;","map":{"version":3,"sources":["PinInput.tsx"],"names":["PinInput","children","props","padding","remProps","themeTools","manageFocus","defaultValue","value","space","onChange","newProps","formControlContext","RefList","setRefList","pinInputValue","setPinInputValue","React","handleChange","temp","newValue","fieldIndex","handleMultiValueChange","pinFieldLength","newValueLength","splicedValue","Platform","i","JSON","parseInt","indexSetter","pinInputFiledCounter","child"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { HStack } from '../../primitives/Stack';\nimport { useThemeProps } from '../../../hooks';\nimport type { IPinInputProps } from './types';\nimport { useFormControlContext } from '../FormControl';\nimport { Platform } from 'react-native';\nimport { PinInputContext } from './Context';\nimport { themeTools } from '../../../theme';\n\nconst PinInput = ({ children, ...props }: IPinInputProps, ref?: any) => {\n  let [padding, remProps] = themeTools.extractInObject(props, [\n    'p',\n    'px',\n    'py',\n    'pt',\n    'pb',\n    'pl',\n    'pr',\n  ]);\n  const {\n    manageFocus,\n    defaultValue,\n    value,\n    space,\n    onChange,\n    ...newProps\n  } = useThemeProps('PinInput', remProps);\n  const formControlContext = useFormControlContext();\n\n  const RefList: Array<any> = [];\n  const setRefList = (ref: any, index: number) => {\n    RefList[index] = ref;\n  };\n  const [pinInputValue, setPinInputValue] = React.useState(\n    value || defaultValue\n  );\n  const handleChange = (newValue: string, fieldIndex: number) => {\n    let temp = (pinInputValue && [...pinInputValue]) || [];\n    temp[fieldIndex] = newValue;\n    value === undefined && setPinInputValue(temp.join(''));\n    onChange && onChange(temp.join(''));\n    if (newValue === '' && manageFocus && fieldIndex - 1 > -1)\n      RefList[fieldIndex - 1].current.focus();\n    else if (newValue && manageFocus && fieldIndex + 1 < RefList.length)\n      RefList[fieldIndex + 1].current.focus();\n    return temp.join('');\n  };\n  const handleMultiValueChange = (newValue: string, fieldIndex: number) => {\n    const pinFieldLength = RefList.length;\n    const newValueLength = newValue.length;\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      let splicedValue = newValue ? [...newValue] : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n      onChange && onChange(splicedValue.join(''));\n    }\n\n    if (Platform.OS !== 'ios') {\n      let temp = pinInputValue ? [...pinInputValue] : [];\n      if (newValue === '') {\n        // Handling Backward focus.\n        temp = temp.filter((_n, i) => i !== fieldIndex);\n        if (manageFocus && fieldIndex - 1 > -1)\n          RefList[fieldIndex - 1].current.focus();\n      } else {\n        temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n        if (manageFocus && fieldIndex + 1 < RefList.length)\n          RefList[fieldIndex + 1].current.focus();\n      }\n      value === undefined && setPinInputValue(temp.join(''));\n      onChange && onChange(temp.join(''));\n    }\n  };\n\n  const indexSetter = (allChildren: JSX.Element | JSX.Element[]) => {\n    let pinInputFiledCounter = -1;\n    return React.Children.map(allChildren, (child: JSX.Element) => {\n      pinInputFiledCounter++;\n      return React.cloneElement(\n        child,\n        {\n          fieldIndex: pinInputFiledCounter,\n        },\n        child.props.children\n      );\n    });\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != pinInputValue) setPinInputValue(value);\n  }, [value, pinInputValue, setPinInputValue]);\n\n  return (\n    <PinInputContext.Provider\n      value={{\n        ...formControlContext,\n        ...newProps,\n        setRefList,\n        handleChange,\n        handleMultiValueChange,\n        value: pinInputValue,\n      }}\n    >\n      {children && (\n        <HStack flexDirection=\"row\" space={space} {...padding} ref={ref}>\n          {indexSetter(children)}\n        </HStack>\n      )}\n    </PinInputContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInput));\n"]},"metadata":{},"sourceType":"script"}