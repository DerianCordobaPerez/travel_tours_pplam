{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTypeaheadReducer = useTypeaheadReducer;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar stateChangeTypes = _interopRequireWildcard(require(\"./types\"));\n\nvar _utils = require(\"./utils\");\n\nfunction useTypeaheadReducer(state, action) {\n  var type = action.type,\n      props = action.props;\n  var changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: (0, _utils.getDefaultValue)(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false\n        };\n      }\n\n      break;\n\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: (0, _utils.getDefaultValue)(props, 'isOpen'),\n        selectedItem: (0, _utils.getDefaultValue)(props, 'selectedItem'),\n        inputValue: (0, _utils.getDefaultValue)(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return (0, _extends2.default)({}, state, changes);\n}","map":{"version":3,"sources":["reducer.tsx"],"names":["type","props","action","stateChangeTypes","changes","isOpen","selectedItem","inputValue","state"],"mappings":";;;;;;;;;;;AAAA,IAAA,gBAAA,GAAA,uBAAA,CAAA,OAAA,WAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,WAAA;;AAQO,SAAA,mBAAA,CAAA,KAAA,EAAA,MAAA,EAAyD;AAAA,MACtDA,IADsD,GACtCE,MADsC,CAAA,IAAA;AAAA,MAChDD,KADgD,GACtCC,MADsC,CAAA,KAAA;AAE9D,MAAA,OAAA;;AAEA,UAAA,IAAA;AACE,SAAKC,gBAAgB,CAArB,SAAA;AACEC,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EAAE,CAAA,GAAA,MAAA,CAAA,eAAA,EAAA,KAAA,EADA,QACA,CADA;AAERC,QAAAA,YAAY,EAAEL,KAAK,CAALA,KAAAA,CAAYC,MAAM,CAFxB,KAEMD,CAFN;AAGRM,QAAAA,UAAU,EAAEN,KAAK,CAALA,YAAAA,CAAmBA,KAAK,CAALA,KAAAA,CAAYC,MAAM,CAHnDE,KAGiCH,CAAnBA;AAHJ,OAAVG;AAKA;;AACF,SAAKD,gBAAgB,CAArB,SAAA;AACE,UAAIK,KAAK,CAAT,MAAA,EAAkB;AAChBJ,QAAAA,OAAO,GAAG;AACRC,UAAAA,MAAM,EADRD;AAAU,SAAVA;AAIF;;AAAA;;AACF,SAAKD,gBAAgB,CAArB,WAAA;AACEC,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EADE,IAAA;AAERE,QAAAA,UAAU,EAAEL,MAAM,CAFpBE;AAAU,OAAVA;AAIA;;AAEF,SAAKD,gBAAgB,CAArB,iBAAA;AACA,SAAKA,gBAAgB,CAArB,kBAAA;AACEC,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EAAE,CAACG,KAAK,CADhBJ;AAAU,OAAVA;AAGA;;AACF,SAAKD,gBAAgB,CAArB,gBAAA;AACEC,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EADRD;AAAU,OAAVA;AAGA;;AACF,SAAKD,gBAAgB,CAArB,iBAAA;AACEC,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EADRD;AAAU,OAAVA;AAGA;;AAEF,SAAKD,gBAAgB,CAArB,kBAAA;AACEC,MAAAA,OAAO,GAAG;AACRE,QAAAA,YAAY,EAAEJ,MAAM,CADZ,YAAA;AAERK,QAAAA,UAAU,EAAEN,KAAK,CAALA,YAAAA,CAAmBC,MAAM,CAFvCE,YAEcH;AAFJ,OAAVG;AAIA;;AACF,SAAKD,gBAAgB,CAArB,iCAAA;AACA,SAAKA,gBAAgB,CAArB,qBAAA;AACEC,MAAAA,OAAO,GAAG;AACRG,QAAAA,UAAU,EAAEL,MAAM,CADpBE;AAAU,OAAVA;AAGA;;AACF,SAAKD,gBAAgB,CAArB,aAAA;AACEC,MAAAA,OAAO,GAAG;AACRC,QAAAA,MAAM,EAAE,CAAA,GAAA,MAAA,CAAA,eAAA,EAAA,KAAA,EADA,QACA,CADA;AAERC,QAAAA,YAAY,EAAE,CAAA,GAAA,MAAA,CAAA,eAAA,EAAA,KAAA,EAFN,cAEM,CAFN;AAGRC,QAAAA,UAAU,EAAE,CAAA,GAAA,MAAA,CAAA,eAAA,EAAA,KAAA,EAHdH,YAGc;AAHJ,OAAVA;AAKA;;AACF;AACE,YAAM,IAAA,KAAA,CA3DV,4CA2DU,CAAN;AA3DJ;;AA8DA,SAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,KAAA,EAAA,OAAA,CAAA;AAID","sourcesContent":["import * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\n\ntype IState = {\n  isOpen: boolean;\n  selectedItem: any;\n  inputValue: string;\n};\n\nexport function useTypeaheadReducer(state: IState, action: any) {\n  const { type, props } = action;\n  let changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index]),\n      };\n      break;\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false,\n        };\n      }\n      break;\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue,\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n      };\n      break;\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n      };\n      break;\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem),\n      };\n      break;\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      };\n      break;\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return {\n    ...state,\n    ...changes,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}