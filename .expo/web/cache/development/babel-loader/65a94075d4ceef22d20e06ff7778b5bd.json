{"ast":null,"code":"import { getItemCount } from \"@react-stately/collections\";\nimport { useSelectableList, useSelectableItem } from \"@react-aria/selection\";\nimport { useLabel } from \"@react-aria/label\";\nimport { useFocusWithin, isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps, useId, isMac, isWebKit, useSlotId } from \"@react-aria/utils\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\nexport var listData = new WeakMap();\n\nfunction $d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(key) {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId(state, itemKey) {\n  var data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return data.id + \"-option-\" + $d7356e622fdc32e5aea4e1e7cc2e6e6b$var$normalizeKey(itemKey);\n}\nexport function useListBox(props, state, ref) {\n  var domProps = filterDOMProps(props, {\n    labelable: true\n  });\n\n  var _useSelectableList = useSelectableList(_babelRuntimeHelpersEsmExtends({}, props, {\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  })),\n      listProps = _useSelectableList.listProps;\n\n  var _useFocusWithin = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  }),\n      focusWithinProps = _useFocusWithin.focusWithinProps;\n\n  var id = useId(props.id);\n  listData.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  var _useLabel = useLabel(_babelRuntimeHelpersEsmExtends({}, props, {\n    id: id,\n    labelElementType: 'span'\n  })),\n      labelProps = _useLabel.labelProps,\n      fieldProps = _useLabel.fieldProps;\n\n  return {\n    labelProps: labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _babelRuntimeHelpersEsmExtends({\n      role: 'listbox'\n    }, mergeProps(fieldProps, listProps)))\n  };\n}\nexport function useOption(props, state, ref) {\n  var _props$isDisabled, _props$isSelected, _props$shouldSelectOn, _props$shouldFocusOnH, _props$shouldUseVirtu, _props$isVirtualized;\n\n  var key = props.key;\n  var data = listData.get(state);\n  var isDisabled = (_props$isDisabled = props.isDisabled) != null ? _props$isDisabled : state.disabledKeys.has(key);\n  var isSelected = (_props$isSelected = props.isSelected) != null ? _props$isSelected : state.selectionManager.isSelected(key);\n  var isFocused = state.selectionManager.focusedKey === key;\n  var shouldSelectOnPressUp = (_props$shouldSelectOn = props.shouldSelectOnPressUp) != null ? _props$shouldSelectOn : data.shouldSelectOnPressUp;\n  var shouldFocusOnHover = (_props$shouldFocusOnH = props.shouldFocusOnHover) != null ? _props$shouldFocusOnH : data.shouldFocusOnHover;\n  var shouldUseVirtualFocus = (_props$shouldUseVirtu = props.shouldUseVirtualFocus) != null ? _props$shouldUseVirtu : data.shouldUseVirtualFocus;\n  var isVirtualized = (_props$isVirtualized = props.isVirtualized) != null ? _props$isVirtualized : data.isVirtualized;\n  var labelId = useSlotId();\n  var descriptionId = useSlotId();\n  var optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  var _useSelectableItem = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus\n  }),\n      itemProps = _useSelectableItem.itemProps;\n\n  var _usePress = usePress(_babelRuntimeHelpersEsmExtends({}, itemProps, {\n    isDisabled: isDisabled,\n    preventFocusOnPress: shouldUseVirtualFocus\n  })),\n      pressProps = _usePress.pressProps,\n      isPressed = _usePress.isPressed;\n\n  var _useHover = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart: function onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  }),\n      hoverProps = _useHover.hoverProps;\n\n  return {\n    optionProps: _babelRuntimeHelpersEsmExtends({}, optionProps, mergeProps(pressProps, hoverProps), {\n      id: getItemId(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed\n  };\n}\nexport function useListBoxSection(props) {\n  var heading = props.heading,\n      ariaLabel = props['aria-label'];\n  var headingId = useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}","map":{"version":3,"sources":["packages/@react-aria/listbox/src/utils.ts","packages/@react-aria/listbox/src/useListBox.ts","packages/@react-aria/listbox/src/useOption.ts","packages/@react-aria/listbox/src/useListBoxSection.ts"],"names":["listData","key","data","normalizeKey","domProps","filterDOMProps","labelable","listProps","useSelectableList","ref","selectionManager","state","collection","disabledKeys","focusWithinProps","useFocusWithin","onFocusWithin","props","onBlurWithin","onFocusWithinChange","onFocusChange","id","useId","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","fieldProps","useLabel","labelElementType","labelProps","listBoxProps","mergeProps","role","isDisabled","isSelected","isFocused","labelId","useSlotId","descriptionId","optionProps","undefined","isMac","isWebKit","getItemCount","itemProps","useSelectableItem","isPressed","usePress","preventFocusOnPress","hoverProps","useHover","onHoverStart","isFocusVisible","descriptionProps","ariaLabel","headingId","headingProps","heading","groupProps"],"mappings":";;;;;;OAuBO,IAAMA,QAAQ,GAAG,IAAjB,OAAiB,EAAjB;;AAEP,SAAA,kDAAA,CAAA,GAAA,EAAwC;AACtC,MAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B,WAAOC,GAAG,CAAHA,OAAAA,CAAAA,MAAAA,EAAP,EAAOA,CAAP;AACD;;AAED,SAAO,KAAP,GAAA;AACD;;OAEM,SAAA,SAAA,CAAA,KAAA,EAAA,OAAA,EAAiE;AACtE,MAAIC,IAAI,GAAGF,QAAQ,CAARA,GAAAA,CAAX,KAAWA,CAAX;;AAEA,MAAI,CAAJ,IAAA,EAAW;AACT,UAAM,IAAA,KAAA,CAAN,cAAM,CAAN;AACD;;AAED,SAAUE,IAAI,CAAd,EAAUA,GAAV,UAAUA,GAAkBC,kDAAY,CAAxC,OAAwC,CAAxC;AACD;OCsBM,SAAA,UAAA,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAoH;AACzH,MAAIC,QAAQ,GAAGC,cAAc,CAAA,KAAA,EAAQ;AAACC,IAAAA,SAAS,EAAE;AAAZ,GAAR,CAA7B;;AACA,2BAAkBE,iBAAiB,CAAA,8BAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEjCC,IAAAA,GAFiC,EAEjCA,GAFiC;AAGjCC,IAAAA,gBAAgB,EAAEC,KAAK,CAHU,gBAAA;AAIjCC,IAAAA,UAAU,EAAED,KAAK,CAJgB,UAAA;AAKjCE,IAAAA,YAAY,EAAEF,KAAK,CAACE;AALa,GAAA,CAAA,CAAnC;AAAA,MAAKN,SAAL,sBAAKA,SAAL;;AAQA,wBAAyBQ,cAAc,CAAC;AACtCC,IAAAA,aAAa,EAAEC,KAAK,CADkB,OAAA;AAEtCC,IAAAA,YAAY,EAAED,KAAK,CAFmB,MAAA;AAGtCE,IAAAA,mBAAmB,EAAEF,KAAK,CAACG;AAHW,GAAD,CAAvC;AAAA,MAAKN,gBAAL,mBAAKA,gBAAL;;AAOA,MAAIO,EAAE,GAAGC,KAAK,CAACL,KAAK,CAApB,EAAc,CAAd;AACA,EAAA,QAAA,CAAA,GAAA,CAAA,KAAA,EAAoB;AAClBI,IAAAA,EADkB,EAClBA,EADkB;AAElBE,IAAAA,qBAAqB,EAAEN,KAAK,CAFV,qBAAA;AAGlBO,IAAAA,qBAAqB,EAAEP,KAAK,CAHV,qBAAA;AAIlBQ,IAAAA,kBAAkB,EAAER,KAAK,CAJP,kBAAA;AAKlBS,IAAAA,aAAa,EAAET,KAAK,CAACS;AALH,GAApB;;AAQA,kBAA+BE,QAAQ,CAAA,8BAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAErCP,IAAAA,EAFqC,EAErCA,EAFqC;AAKrCQ,IAAAA,gBAAgB,EAAE;AALmB,GAAA,CAAA,CAAvC;AAAA,MAAI,UAAJ,aAAI,UAAJ;AAAA,MAAiBF,UAAjB,aAAiBA,UAAjB;;AAQA,SAAO;AACLG,IAAAA,UADK,EACLA,UADK;AAELC,IAAAA,YAAY,EAAEC,UAAU,CAAA,QAAA,EAAA,gBAAA,EAA6B,KAAK,CAAL,gBAAA,CAAA,aAAA,KAAA,UAAA,GAAsD;AACzG,8BAAwB;AADiF,KAAtD,GAA7B,EAAA,EAAA,8BAAA,CAAA;AAGtBC,MAAAA,IAAI,EAAE;AAHgB,KAAA,EAInBD,UAAU,CAAA,UAAA,EAJS,SAIT,CAJS,CAAA;AAFnB,GAAP;AASD;OChBM,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAA4G;AAAA,MAAA,iBAAA,EAAA,iBAAA,EAAA,qBAAA,EAAA,qBAAA,EAAA,qBAAA,EAAA,oBAAA;;AACjH,MACE/B,GADF,GAAA,KAAA,CACEA,GADF;AAIA,MAAIC,IAAI,GAAG,QAAA,CAAA,GAAA,CAAX,KAAW,CAAX;AAEA,MAAIgC,UAAU,GAAA,CAAA,iBAAA,GAAGjB,KAAK,CAAR,UAAA,KAAA,IAAA,GAAA,iBAAA,GAAuBN,KAAK,CAALA,YAAAA,CAAAA,GAAAA,CAArC,GAAqCA,CAArC;AACA,MAAIwB,UAAU,GAAA,CAAA,iBAAA,GAAGlB,KAAK,CAAR,UAAA,KAAA,IAAA,GAAA,iBAAA,GAAuBN,KAAK,CAALA,gBAAAA,CAAAA,UAAAA,CAArC,GAAqCA,CAArC;AACA,MAAIyB,SAAS,GAAGzB,KAAK,CAALA,gBAAAA,CAAAA,UAAAA,KAAhB,GAAA;AACA,MAAIa,qBAAqB,GAAA,CAAA,qBAAA,GAAGP,KAAK,CAAR,qBAAA,KAAA,IAAA,GAAA,qBAAA,GAAkCf,IAAI,CAA/D,qBAAA;AACA,MAAIuB,kBAAkB,GAAA,CAAA,qBAAA,GAAGR,KAAK,CAAR,kBAAA,KAAA,IAAA,GAAA,qBAAA,GAA+Bf,IAAI,CAAzD,kBAAA;AACA,MAAIqB,qBAAqB,GAAA,CAAA,qBAAA,GAAGN,KAAK,CAAR,qBAAA,KAAA,IAAA,GAAA,qBAAA,GAAkCf,IAAI,CAA/D,qBAAA;AACA,MAAIwB,aAAa,GAAA,CAAA,oBAAA,GAAGT,KAAK,CAAR,aAAA,KAAA,IAAA,GAAA,oBAAA,GAA0Bf,IAAI,CAA/C,aAAA;AAEA,MAAImC,OAAO,GAAGC,SAAd,EAAA;AACA,MAAIC,aAAa,GAAGD,SAApB,EAAA;AAEA,MAAIE,WAAW,GAAG;AAChBP,IAAAA,IAAI,EADY,QAAA;AAEhB,qBAFgB,UAAA;AAGhB,qBAAiBtB,KAAK,CAALA,gBAAAA,CAAAA,aAAAA,KAAAA,MAAAA,GAAAA,UAAAA,GAA+D8B;AAHhE,GAAlB;;AASA,MAAI,EAAEC,KAAK,MAAMC,QAAjB,EAAI,CAAJ,EAA8B;AAC5BH,IAAAA,WAAW,CAAXA,YAAW,CAAXA,GAA4BvB,KAAK,CAAjCuB,YAAiC,CAAjCA;AACAA,IAAAA,WAAW,CAAXA,iBAAW,CAAXA,GAAAA,OAAAA;AACAA,IAAAA,WAAW,CAAXA,kBAAW,CAAXA,GAAAA,aAAAA;AACD;;AAED,MAAA,aAAA,EAAmB;AACjBA,IAAAA,WAAW,CAAXA,eAAW,CAAXA,GAA+B7B,KAAK,CAALA,UAAAA,CAAAA,OAAAA,CAAAA,GAAAA,EAAAA,KAAAA,GAA/B6B,CAAAA;AACAA,IAAAA,WAAW,CAAXA,cAAW,CAAXA,GAA8BI,YAAY,CAACjC,KAAK,CAAhD6B,UAA0C,CAA1CA;AACD;;AAED,2BAAkBM,iBAAiB,CAAC;AAClCpC,IAAAA,gBAAgB,EAAEC,KAAK,CADW,gBAAA;AAElCV,IAAAA,GAFkC,EAElCA,GAFkC;AAGlCQ,IAAAA,GAHkC,EAGlCA,GAHkC;AAIlCe,IAAAA,qBAJkC,EAIlCA,qBAJkC;AAKlCE,IAAAA,aALkC,EAKlCA,aALkC;AAMlCH,IAAAA,qBAAAA,EAAAA;AANkC,GAAD,CAAnC;AAAA,MAAKsB,SAAL,sBAAKA,SAAL;;AASA,kBAA8BG,QAAQ,CAAA,8BAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAAgBd,IAAAA,UAAhB,EAAgBA,UAAhB;AAA4Be,IAAAA,mBAAmB,EAAE1B;AAAjD,GAAA,CAAA,CAAtC;AAAA,MAAI,UAAJ,aAAI,UAAJ;AAAA,MAAiBwB,SAAjB,aAAiBA,SAAjB;;AAEA,kBAAmBI,QAAQ,CAAC;AAC1BjB,IAAAA,UAAU,EAAEA,UAAU,IAAI,CADA,kBAAA;AAE1BkB,IAAAA,YAF0B,0BAEX;AACb,UAAI,CAACC,cAAL,EAAA,EAAuB;AACrB1C,QAAAA,KAAK,CAALA,gBAAAA,CAAAA,UAAAA,CAAAA,IAAAA;AACAA,QAAAA,KAAK,CAALA,gBAAAA,CAAAA,aAAAA,CAAAA,GAAAA;AACD;AACF;AAPyB,GAAD,CAA3B;AAAA,MAAKuC,UAAL,aAAKA,UAAL;;AAUA,SAAO;AACLV,IAAAA,WAAW,EAAA,8BAAA,CAAA,EAAA,EAAA,WAAA,EAENR,UAAU,CAAA,UAAA,EAFJ,UAEI,CAFJ,EAAA;AAGTX,MAAAA,EAAE,EAAE,SAAA,CAAA,KAAA,EAAA,GAAA;AAHK,KAAA,CADN;AAMLS,IAAAA,UAAU,EAAE;AACVT,MAAAA,EAAE,EAAEgB;AADM,KANP;AASLiB,IAAAA,gBAAgB,EAAE;AAChBjC,MAAAA,EAAE,EAAEkB;AADY,KATb;AAYLH,IAAAA,SAZK,EAYLA,SAZK;AAaLD,IAAAA,UAbK,EAaLA,UAbK;AAcLD,IAAAA,UAdK,EAcLA,UAdK;AAeLa,IAAAA,SAAAA,EAAAA;AAfK,GAAP;AAiBD;OChIM,SAAA,iBAAA,CAAA,KAAA,EAA+E;AACpF,MAAI,OAAJ,GAAA,KAAA,CAAI,OAAJ;AAAA,MAA4BQ,SAA5B,GAAA,KAAA,CAAc,YAAd;AACA,MAAIC,SAAS,GAAGlC,KAAhB,EAAA;AAEA,SAAO;AACLuB,IAAAA,SAAS,EAAE;AACTZ,MAAAA,IAAI,EAAE;AADG,KADN;AAILwB,IAAAA,YAAY,EAAEC,OAAO,GAAG;AAItBrC,MAAAA,EAAE,EAJoB,SAAA;AAKtB,qBAAe;AALO,KAAH,GAJhB,EAAA;AAWLsC,IAAAA,UAAU,EAAE;AACV1B,MAAAA,IAAI,EADM,OAAA;AAEV,oBAFU,SAAA;AAGV,yBAAmByB,OAAO,GAAA,SAAA,GAAejB;AAH/B;AAXP,GAAP;AAiBD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {HTMLAttributes, ReactNode, RefObject} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\ninterface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: HTMLAttributes<HTMLElement>,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {HTMLAttributes, Key, RefObject} from 'react';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\ninterface OptionAria {\n  /** Props for the option element. */\n  optionProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the main text element inside the option. */\n  labelProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: HTMLAttributes<HTMLElement>,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n  /** Whether the option is currently selected. */\n  isSelected: boolean,\n  /** Whether the option is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the option is disabled. */\n  isDisabled: boolean\n}\n\ninterface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<HTMLElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus\n  });\n\n  let {pressProps, isPressed} = usePress({...itemProps, isDisabled, preventFocusOnPress: shouldUseVirtualFocus});\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(pressProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\ninterface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\ninterface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the heading element, if any. */\n  headingProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the group element. */\n  groupProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}