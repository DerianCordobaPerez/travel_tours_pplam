{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTypeahead = useTypeahead;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _reducer = require(\"./reducer\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar stateChangeTypes = _interopRequireWildcard(require(\"./types\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _utils = require(\"./utils\");\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nfunction useTypeahead(props) {\n  var defaultValues = (0, _extends2.default)({}, _utils.dropdownDefaultStateValues);\n  defaultValues.isOpen = (0, _utils.getDefaultValue)(props, 'isOpen');\n\n  var _React$useReducer = _react.default.useReducer(_reducer.useTypeaheadReducer, defaultValues),\n      _React$useReducer2 = (0, _slicedToArray2.default)(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var dispatchWithProps = function dispatchWithProps(object) {\n    dispatch((0, _extends2.default)({}, object, {\n      props: props\n    }));\n  };\n\n  var inputValue = state.inputValue,\n      isOpen = state.isOpen;\n  var items = props.items,\n      onInputValueChange = props.onInputValueChange,\n      onSelectedItemChange = props.onSelectedItemChange,\n      selectedItem = props.selectedItem,\n      itemToString = props.itemToString;\n  var isControlled = isControlledProp(props, 'selectedItem');\n  (0, _react.useEffect)(function () {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  var onChangeText = function onChangeText(text) {\n    onInputValueChange == null ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  var handleItemSelect = function handleItemSelect(item, index) {\n    onSelectedItemChange == null ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index: index\n    });\n\n    _reactNative.Keyboard.dismiss();\n  };\n\n  var getMenuItemProps = function getMenuItemProps(item, index) {\n    return {\n      onPress: function onPress() {\n        return handleItemSelect(item, index);\n      },\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  var getMenuProps = function getMenuProps() {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \" + items.length + \" records\"\n    };\n  };\n\n  var getToggleButtonProps = function getToggleButtonProps() {\n    return {\n      onPress: function onPress() {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  var getInputProps = function getInputProps(propInputVal, propOnchangeText) {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps: getInputProps,\n    getMenuItemProps: getMenuItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    isOpen: isOpen\n  };\n}","map":{"version":3,"sources":["useTypeahead.ts"],"names":["props","defaultValues","dropdownDefaultStateValues","state","dispatch","React","useTypeaheadReducer","dispatchWithProps","inputValue","isOpen","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","isControlledProp","type","stateChangeTypes","onChangeText","handleItemSelect","index","Keyboard","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","getToggleButtonProps","getInputProps","propInputVal","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport type { AccessibilityRole } from 'react-native';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props: any, key: string) {\n  return props[key] !== undefined;\n}\n\nimport type { IUseTypeaheadProps } from './types';\n\nexport function useTypeahead(props: IUseTypeaheadProps) {\n  let defaultValues = { ...dropdownDefaultStateValues };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  const [state, dispatch] = React.useReducer(\n    useTypeaheadReducer,\n    defaultValues\n  );\n\n  const dispatchWithProps = (object: any) => {\n    dispatch({ ...object, props });\n  };\n\n  const { inputValue, isOpen } = state;\n\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString,\n  } = props;\n\n  const isControlled = isControlledProp(props, 'selectedItem');\n\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem),\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = (text: string) => {\n    onInputValueChange?.({ inputValue: text });\n    dispatchWithProps({ type: stateChangeTypes.InputChange, inputValue: text });\n  };\n\n  const handleItemSelect = (item: any, index: number) => {\n    onSelectedItemChange?.(item);\n    dispatchWithProps({ type: stateChangeTypes.ItemClick, index });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item: any, index: number) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem' as AccessibilityRole,\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu' as AccessibilityRole,\n      accessibilityHint: `Showing ${items.length} records`,\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({ type: stateChangeTypes.ToggleButtonClick });\n      },\n    };\n  };\n\n  const getInputProps = (propInputVal?: any, propOnchangeText?: any) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox' as AccessibilityRole,\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen,\n      },\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}