{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMediaQuery = useMediaQuery;\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash.isnil\"));\n\nfunction useMediaQuery(query) {\n  var dims = (0, _reactNative.useWindowDimensions)();\n  var height = dims == null ? void 0 : dims.height;\n  var width = dims == null ? void 0 : dims.width;\n  return iterateQuery(query, height, width);\n}\n\nfunction iterateQuery(query, height, width) {\n  var key;\n  var val;\n  var queryResults = [];\n\n  if (Array.isArray(query)) {\n    query.forEach(function (subQuery) {\n      key = Object.keys(subQuery)[0];\n      val = Object.values(subQuery)[0];\n      queryResults.push(calculateQuery(key, val, height, width));\n    });\n  } else {\n    key = Object.keys(query)[0];\n    val = Object.values(query)[0];\n    queryResults.push(calculateQuery(key, val, height, width));\n  }\n\n  return queryResults;\n}\n\nfunction calculateQuery(key, val, height, width) {\n  var retval;\n\n  if ((0, _lodash.default)(width) || (0, _lodash.default)(height) || (0, _lodash.default)(val)) {\n    return;\n  }\n\n  switch (key) {\n    case 'maxWidth':\n      retval = !(0, _lodash.default)(val) ? width <= val : undefined;\n      break;\n\n    case 'minWidth':\n      retval = !(0, _lodash.default)(val) ? width >= val : undefined;\n      break;\n\n    case 'maxHeight':\n      retval = !(0, _lodash.default)(val) ? height <= val : undefined;\n      break;\n\n    case 'minHeight':\n      retval = !(0, _lodash.default)(val) ? height >= val : undefined;\n      break;\n\n    case 'orientation':\n      if (!(0, _lodash.default)(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n\n      break;\n\n    default:\n      break;\n  }\n\n  return retval;\n}","map":{"version":3,"sources":["useMediaQuery.ts"],"names":["dims","height","width","iterateQuery","queryResults","Array","query","key","Object","val","calculateQuery","retval"],"mappings":"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","sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport isNil from 'lodash.isnil';\n\ntype QueryKeys =\n  | 'maxWidth'\n  | 'minWidth'\n  | 'maxHeight'\n  | 'minHeight'\n  | 'orientation';\n\ntype SubQuery = {\n  [queryKey in QueryKeys]?: number | string;\n};\ntype Query = Array<SubQuery>;\n\nexport function useMediaQuery(query: SubQuery | Query) {\n  let dims = useWindowDimensions();\n  const height = dims?.height;\n  const width = dims?.width;\n  return iterateQuery(query, height, width);\n}\n\nfunction iterateQuery(\n  query: SubQuery | Query,\n  height?: number,\n  width?: number\n) {\n  let key;\n  let val;\n  let queryResults = [];\n  if (Array.isArray(query)) {\n    query.forEach((subQuery: SubQuery) => {\n      key = Object.keys(subQuery)[0];\n      val = Object.values(subQuery)[0];\n      queryResults.push(calculateQuery(key, val, height, width));\n    });\n  } else {\n    key = Object.keys(query)[0];\n    val = Object.values(query)[0];\n    queryResults.push(calculateQuery(key, val, height, width));\n  }\n  return queryResults;\n}\n\nfunction calculateQuery(\n  key: string,\n  val?: number | string,\n  height?: number,\n  width?: number\n) {\n  let retval;\n  if (isNil(width) || isNil(height) || isNil(val)) {\n    return;\n  }\n  switch (key) {\n    case 'maxWidth':\n      retval = !isNil(val) ? width <= val : undefined;\n      break;\n    case 'minWidth':\n      retval = !isNil(val) ? width >= val : undefined;\n      break;\n    case 'maxHeight':\n      retval = !isNil(val) ? height <= val : undefined;\n      break;\n    case 'minHeight':\n      retval = !isNil(val) ? height >= val : undefined;\n      break;\n    case 'orientation':\n      if (!isNil(val)) {\n        if (width > height) {\n          retval = val === 'landscape';\n        } else {\n          retval = val === 'portrait';\n        }\n      }\n      break;\n    default:\n      break;\n  }\n  return retval;\n}\n"]},"metadata":{},"sourceType":"script"}