{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _native = _interopRequireDefault(require(\"styled-components/native\"));\n\nvar _styledSystem = require(\"styled-system\");\n\nvar _customProps = require(\"../../../utils/customProps\");\n\nvar _nbSvg = require(\"./nbSvg\");\n\nvar _questionIconPath = require(\"./Icons/questionIconPath\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Icon/SVGIcon.tsx\";\n\nvar SVG = (0, _native.default)(_nbSvg.Svg)(_styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.typography, _styledSystem.position, _customProps.customPosition, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customLayout, _customProps.customTypography);\n\nvar SVGIcon = function SVGIcon(_ref, ref) {\n  var children = _ref.children,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"children\"]);\n\n  var _usePropsResolution = (0, _hooks.usePropsResolution)('Icon', props),\n      focusable = _usePropsResolution.focusable,\n      stroke = _usePropsResolution.stroke,\n      color = _usePropsResolution.color,\n      size = _usePropsResolution.size,\n      resolvedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"focusable\", \"stroke\", \"color\", \"size\"]);\n\n  var strokeHex = (0, _hooks.useToken)('colors', stroke || '');\n  var colorHex = (0, _hooks.useToken)('colors', color || '');\n  return _react.default.createElement(SVG, (0, _extends2.default)({}, resolvedProps, {\n    size: size,\n    color: colorHex,\n    stroke: strokeHex,\n    focusable: focusable,\n    accessibilityRole: \"image\",\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }), _react.default.Children.count(children) > 0 ? _react.default.createElement(_nbSvg.G, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, _react.default.Children.map(children, function (child, i) {\n    var _child$key;\n\n    return _react.default.createElement(ChildPath, (0, _extends2.default)({\n      key: (_child$key = child == null ? void 0 : child.key) != null ? _child$key : i,\n      element: child\n    }, child == null ? void 0 : child.props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }));\n  })) : _questionIconPath.questionOutlineIconPath);\n};\n\nvar ChildPath = function ChildPath(_ref2) {\n  var element = _ref2.element,\n      fill = _ref2.fill,\n      pathStroke = _ref2.stroke;\n  var pathStrokeColor = (0, _hooks.useToken)('colors', pathStroke || '');\n  var fillColor = (0, _hooks.useToken)('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return _react.default.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor\n  });\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(SVGIcon));\n\nexports.default = _default;","map":{"version":3,"sources":["SVGIcon.tsx"],"names":["SVG","Svg","color","space","layout","flexbox","border","typography","position","customPosition","customBorder","customBackground","customOutline","customShadow","customExtra","customLayout","customTypography","SVGIcon","children","props","focusable","stroke","size","resolvedProps","strokeHex","colorHex","React","child","questionOutlineIconPath","ChildPath","element","fill","pathStroke","pathStrokeColor","fillColor"],"mappings":";;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,kBAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AASA,IAAA,YAAA,GAAA,OAAA,8BAAA;;AAUA,IAAA,MAAA,GAAA,OAAA,WAAA;;AAEA,IAAA,iBAAA,GAAA,OAAA,4BAAA;;;;;AAEA,IAAMA,GAAG,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAOC,MAAAA,CAAP,GAAA,EACVC,aAAAA,CADU,KAAA,EAEVC,aAAAA,CAFU,KAAA,EAGVC,aAAAA,CAHU,MAAA,EAIVC,aAAAA,CAJU,OAAA,EAKVC,aAAAA,CALU,MAAA,EAMVC,aAAAA,CANU,UAAA,EAOVC,aAAAA,CAPU,QAAA,EAQVC,YAAAA,CARU,cAAA,EASVC,YAAAA,CATU,YAAA,EAUVC,YAAAA,CAVU,gBAAA,EAWVC,YAAAA,CAXU,aAAA,EAYVC,YAAAA,CAZU,YAAA,EAaVC,YAAAA,CAbU,WAAA,EAcVC,YAAAA,CAdU,YAAA,EAeVC,YAAAA,CAfF,gBAAY,CAAZ;;AAkBA,IAAMC,OAAO,GAAPA,SAAAA,OAAAA,CAAU,IAAVA,EAAU,GAAVA,EAA4D;AAA/CC,MAAAA,QAA+C,GAAA,IAAA,CAA/CA,QAAAA;AAAAA,MAAaC,KAAkC,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA,UAAA,CAAA,CAA/CD;;AAA+C,MAAA,mBAAA,GAO5D,CAAA,GAAA,MAAA,CAAA,kBAAA,EAAA,MAAA,EAP4D,KAO5D,CAP4D;AAAA,MAE9DE,SAF8D,GAAA,mBAAA,CAAA,SAAA;AAAA,MAG9DC,MAH8D,GAAA,mBAAA,CAAA,MAAA;AAAA,MAI9DnB,KAJ8D,GAAA,mBAAA,CAAA,KAAA;AAAA,MAK9DoB,IAL8D,GAAA,mBAAA,CAAA,IAAA;AAAA,MAM3DC,aAN2D,GAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,EAAA,mBAAA,EAAA,CAAA,WAAA,EAAA,QAAA,EAAA,OAAA,EAAA,MAAA,CAAA,CAAA;;AAQhE,MAAMC,SAAS,GAAG,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,QAAA,EAAmBH,MAAM,IAA3C,EAAkB,CAAlB;AACA,MAAMI,QAAQ,GAAG,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,QAAA,EAAmBvB,KAAK,IAAzC,EAAiB,CAAjB;AAEA,SACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,GAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,EAAA,EAAA,aAAA,EAAA;AAYE,IAAA,IAAI,EAZN,IAAA;AAaE,IAAA,KAAK,EAbP,QAAA;AAcE,IAAA,MAAM,EAdR,SAAA;AAeE,IAAA,SAAS,EAfX,SAAA;AAgBE,IAAA,iBAAiB,EAhBnB,OAAA;AAkBE,IAAA,GAAG,EAlBL,GAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,CAAA,EAoBGwB,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAAA,KAAAA,CAAAA,QAAAA,IAAAA,CAAAA,GACC,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,CAAA,EAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,EAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,EACGA,MAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAA6B,UAAA,KAAA,EAAA,CAAA,EAAA;AAAA,QAAA,UAAA;;AAAA,WAC5B,MAAA,CAAA,OAAA,CAAA,aAAA,CAAA,SAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA;AACE,MAAA,GAAG,EAAA,CAAA,UAAA,GAAEC,KAAF,IAAA,IAAEA,GAAF,KAAA,CAAEA,GAAAA,KAAK,CAAP,GAAA,KAAA,IAAA,GAAA,UAAA,GADL,CAAA;AAEE,MAAA,OAAO,EAFT;AAAA,KAAA,EAGMA,KAHN,IAAA,IAGMA,GAHN,KAAA,CAGMA,GAAAA,KAAK,CAHX,KAAA,EAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,EAAA;AAAA,QAAA,YAAA,EAD4B;AAC5B;AAAA,KAAA,CAAA,CAD4B;AAFjCD,GAEIA,CADH,CADDA,GAWCE,iBAAAA,CAhCN,uBACE,CADF;AAXF,CAAA;;AAgDA,IAAMC,SAAS,GAATA,SAAAA,SAAAA,CAAY,KAAZA,EAA4D;AAA7CC,MAAAA,OAA6C,GAAA,KAAA,CAA7CA,OAAAA;AAAAA,MAASC,IAAoC,GAAA,KAAA,CAApCA,IAATD;AAAAA,MAAuBE,UAAsB,GAAA,KAAA,CAA9BX,MAAfS;AACnB,MAAMG,eAAe,GAAG,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,QAAA,EAAmBD,UAAU,IAArD,EAAwB,CAAxB;AACA,MAAME,SAAS,GAAG,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,QAAA,EAAmBH,IAAI,IAAzC,EAAkB,CAAlB;;AAEA,MAAI,CAAJ,OAAA,EAAc;AACZ,WAAA,IAAA;AAGF;;AAAA,SAAOL,MAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAA4B;AACjCK,IAAAA,IAAI,EAAEG,SAAS,GAAA,SAAA,GADkB,cAAA;AAEjCb,IAAAA,MAAM,EAFR;AAAmC,GAA5BK,CAAP;AARF,CAAA;;eAae,CAAA,GAAA,MAAA,CAAA,IAAA,EAAK,CAAA,GAAA,MAAA,CAAA,UAAA,EAAL,OAAK,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport styled from 'styled-components/native';\nimport {\n  border,\n  color,\n  flexbox,\n  layout,\n  space,\n  typography,\n  position,\n} from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n  customPosition,\n} from '../../../utils/customProps';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\n\nconst SVG = styled(Svg)<IIconProps>(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  position,\n  customPosition,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customLayout,\n  customTypography\n);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]},"metadata":{},"sourceType":"script"}