{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useColorModeValue = useColorModeValue;\nexports.useModeManager = useModeManager;\nexports.useAccessibleColors = useAccessibleColors;\nexports.useColorMode = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _Context = require(\"./../hybrid-overlay/Context\");\n\nvar useColorMode = function useColorMode() {\n  var _React$useContext = _react.default.useContext(_Context.HybridContext),\n      colorModeContext = _React$useContext.colorMode;\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\n\nexports.useColorMode = useColorMode;\n\nfunction useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return colorMode === 'dark' ? dark : light;\n}\n\nfunction useModeManager(initialColorMode, colorModeManager) {\n  var _useState = (0, _react.useState)(initialColorMode),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      colorMode = _useState2[0],\n      setRawMode = _useState2[1];\n\n  function setColorMode(val) {\n    return _regenerator.default.async(function setColorMode$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!colorModeManager) {\n              _context.next = 3;\n              break;\n            }\n\n            _context.next = 3;\n            return _regenerator.default.awrap(colorModeManager.set(val));\n\n          case 3:\n            setRawMode(val);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  (0, _react.useEffect)(function () {\n    if (colorModeManager) {\n      (function getMode() {\n        var value;\n        return _regenerator.default.async(function getMode$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regenerator.default.awrap(colorModeManager.get(initialColorMode));\n\n              case 2:\n                value = _context2.sent;\n\n                if (value && value !== colorMode) {\n                  setRawMode(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\n\nfunction useAccessibleColors() {\n  var _React$useContext2 = _react.default.useContext(_Context.HybridContext),\n      colorModeContext = _React$useContext2.colorMode;\n\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"sources":["hooks.tsx"],"names":["useColorMode","colorModeContext","React","HybridContext","colorMode","setRawMode","colorModeManager","value","setColorMode","toggleAccessibleColors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  colorModeManager?: StorageManager\n) {\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  async function setColorMode(val: ColorMode) {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n    setRawMode(val);\n  }\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"script"}