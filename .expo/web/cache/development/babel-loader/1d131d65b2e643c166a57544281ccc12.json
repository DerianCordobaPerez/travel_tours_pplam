{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Input = require(\"../../primitives/Input\");\n\nvar _Context = require(\"./Context\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/PinInput/PinInputField.tsx\";\n\nvar PinInputFiled = function PinInputFiled(_ref, ref) {\n  var _ref$fieldIndex = _ref.fieldIndex,\n      fieldIndex = _ref$fieldIndex === void 0 ? 0 : _ref$fieldIndex,\n      pDefaultValue = _ref.defaultValue,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"fieldIndex\", \"defaultValue\"]);\n\n  var _React$useContext = _react.default.useContext(_Context.PinInputContext),\n      handleChange = _React$useContext.handleChange,\n      cValue = _React$useContext.value,\n      setRefList = _React$useContext.setRefList,\n      cDefaultValue = _React$useContext.defaultValue,\n      handleMultiValueChange = _React$useContext.handleMultiValueChange,\n      context = (0, _objectWithoutProperties2.default)(_React$useContext, [\"handleChange\", \"value\", \"setRefList\", \"defaultValue\", \"handleMultiValueChange\"]);\n\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  var defaultValue = pDefaultValue || cDefaultValue;\n  var value = cValue && cValue[fieldIndex];\n\n  var keyPressHandler = function keyPressHandler(event) {\n    if (_reactNative.Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n\n  var textChangeHandler = function textChangeHandler(value) {\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n\n  var myRef = _react.default.useRef(null);\n\n  _react.default.useEffect(function () {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  return _react.default.createElement(_Input.Input, (0, _extends2.default)({\n    ref: (0, _utils.mergeRefs)([myRef, ref])\n  }, context, props, {\n    onKeyPress: function onKeyPress(event) {\n      return keyPressHandler(event);\n    },\n    onChangeText: function onChangeText(value) {\n      return textChangeHandler(value);\n    },\n    keyboardType: \"numeric\",\n    defaultValue: defaultValue,\n    value: value,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar _default = _react.default.memo(_react.default.forwardRef(PinInputFiled));\n\nexports.default = _default;","map":{"version":3,"sources":["PinInputField.tsx"],"names":["PinInputFiled","fieldIndex","defaultValue","pDefaultValue","props","handleChange","cValue","setRefList","cDefaultValue","handleMultiValueChange","context","React","PinInputContext","value","keyPressHandler","Platform","event","textChangeHandler","myRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  return (\n    <Input\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]},"metadata":{},"sourceType":"script"}