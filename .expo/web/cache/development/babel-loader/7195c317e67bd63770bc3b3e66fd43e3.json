{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _primitives = require(\"../../primitives\");\n\nvar _useThemeProps2 = require(\"../../../hooks/useThemeProps\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/SimpleGrid/SimpleGrid.tsx\";\n\nvar DEBUG_STYLES = false ? {\n  rows: {\n    border: '1px solid black'\n  },\n  cols: {\n    border: '1px solid red'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\n\nvar SimpleGrid = function SimpleGrid(props, ref) {\n  var _useThemeProps = (0, _useThemeProps2.useThemeProps)('SimpleGrid', props),\n      columns = _useThemeProps.columns,\n      space = _useThemeProps.space,\n      spacingX = _useThemeProps.spacingX,\n      spacingY = _useThemeProps.spacingY,\n      minChildWidth = _useThemeProps.minChildWidth,\n      children = _useThemeProps.children,\n      remainingProps = (0, _objectWithoutProperties2.default)(_useThemeProps, [\"columns\", \"space\", \"spacingX\", \"spacingY\", \"minChildWidth\", \"children\"]);\n\n  var cellSpacing = space != null ? space : 0;\n  var cellSpacingX = spacingX != null ? spacingX : cellSpacing;\n  var cellSpacingY = spacingY != null ? spacingY : cellSpacing;\n\n  var childrenArray = _react.default.Children.toArray(children);\n\n  if (columns) {\n    var rowSlices = [];\n\n    for (var i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return _react.default.createElement(_primitives.VStack, (0, _extends2.default)({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }, remainingProps, {\n      ref: ref,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }), rowSlices.map(function (row, rowIndex) {\n      return _react.default.createElement(_primitives.HStack, {\n        space: cellSpacingX,\n        key: rowIndex,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      }, row.map(function (col) {\n        return _react.default.createElement(_primitives.Box, (0, _extends2.default)({}, DEBUG_STYLES.cols, {\n          key: col.key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }\n        }), col);\n      }));\n    }));\n  } else if (minChildWidth) {\n    return _react.default.createElement(_primitives.Box, (0, _extends2.default)({\n      flexDirection: \"row\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\"\n    }, remainingProps, {\n      ref: ref,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }), childrenArray.map(function (col) {\n      return _react.default.createElement(_primitives.Box, (0, _extends2.default)({}, DEBUG_STYLES.cols, {\n        mx: cellSpacingX,\n        my: cellSpacingY,\n        key: col.key,\n        minWidth: minChildWidth,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }\n      }), col);\n    }));\n  }\n\n  return _react.default.createElement(_react.default.Fragment, null);\n};\n\nvar _default = _react.default.memo(_react.default.forwardRef(SimpleGrid));\n\nexports.default = _default;","map":{"version":3,"sources":["SimpleGrid.tsx"],"names":["DEBUG_STYLES","rows","border","cols","SimpleGrid","columns","space","spacingX","spacingY","minChildWidth","children","remainingProps","cellSpacing","cellSpacingX","cellSpacingY","childrenArray","React","rowSlices","i","row","col"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        border: '1px solid black',\n      },\n      cols: {\n        border: '1px solid red',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (props: ISimpleGridProps, ref?: any): JSX.Element => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props);\n  let cellSpacing = space ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack\n        {...DEBUG_STYLES.rows}\n        space={cellSpacingY}\n        {...remainingProps}\n        ref={ref}\n      >\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        {...remainingProps}\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"]},"metadata":{},"sourceType":"script"}