{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"screenListeners\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from \"./Group\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport Screen from \"./Screen\";\nimport { PrivateValueStore } from \"./types\";\nimport useChildListeners from \"./useChildListeners\";\nimport useComponent from \"./useComponent\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport useDescriptors from \"./useDescriptors\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useOnGetState from \"./useOnGetState\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\nPrivateValueStore;\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, options) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        acc.push([options, child.props]);\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children, child.type !== Group ? options : options != null ? [].concat(_toConsumableArray(options), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$ = config[1],\n          name = _config$.name,\n          children = _config$.children,\n          component = _config$.component,\n          getComponent = _config$.getComponent;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n\n  return configs;\n};\n\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n\n  var children = options.children,\n      screenListeners = options.screenListeners,\n      rest = _objectWithoutProperties(options, _excluded);\n\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n    initialRouteName: route.params.screen\n  } : null))),\n      router = _React$useRef.current;\n\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config[1].name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config[1].name + \"')\");\n    }\n\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config[1].name;\n  });\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr][1].initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return Object.assign(acc, _defineProperty({}, curr, screens[curr][1].getId));\n  }, {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n\n  var _React$useContext = React.useContext(NavigationStateContext),\n      currentState = _React$useContext.state,\n      getCurrentState = _React$useContext.getState,\n      setCurrentState = _React$useContext.setState,\n      setKey = _React$useContext.setKey,\n      getKey = _React$useContext.getKey,\n      getIsInitial = _React$useContext.getIsInitial;\n\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n\n  var _React$useMemo = React.useMemo(function () {\n    var _route$params4;\n\n    var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n      var _route$params, _route$params2, _route$params3;\n\n      var initialParams = screens[curr][1].initialParams;\n      var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), true];\n    } else {\n      var _route$params$state, _route$params5;\n\n      return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      initializedState = _React$useMemo2[0],\n      isFirstStateInitialization = _React$useMemo2[1];\n\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    });\n  }\n\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n\n    var routeNames = [];\n    var route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    var navigation = descriptors[route.key].navigation;\n\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name][1].listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n\n  var _useChildListeners = useChildListeners(),\n      childListeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["PrivateValueStore","getRouteConfigsFromChildren","configs","React","child","acc","options","name","JSON","String","process","config","getComponent","children","component","isValidElementType","console","navigatorKey","useRegisterNavigator","route","rest","current","router","createRouter","initialRouteName","screen","routeConfigs","screens","routeNames","routeParamList","initialParams","routeGetIdList","getId","isStateValid","state","isStateInitialized","getState","setState","getIsInitial","stateCleanedUp","cleanUpState","setCurrentState","initialRouteParamList","initialParamsFromParams","currentState","nextState","isArrayEqual","previousNestedParamsRef","previousParams","action","CommonActions","params","path","updatedState","shouldUpdate","useScheduleUpdate","setKey","setTimeout","getCurrentState","getKey","initializedStateRef","emitter","useEventEmitter","e","navigation","descriptors","listeners","map","Object","type","cb","self","listener","useFocusEvents","data","addListener","useChildListeners","addKeyedListener","useKeyedChildListeners","onAction","useOnAction","key","actionListeners","childListeners","beforeRemoveListeners","keyedListeners","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","useDescriptors","screenOptions","defaultScreenOptions","useCurrentRender","NavigationContent","useComponent","NavigationHelpersContext","value"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  options?: ScreenConfigWithParent<State, ScreenOptions, EventMap>[0]\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push([\n          options,\n          child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        ]);\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.type !== Group\n              ? options\n              : options != null\n              ? [...options, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config[1];\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs =\n    getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config[1].name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config[1].name}')`\n      );\n    }\n\n    acc[config[1].name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config[1].name);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr][1].getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr][1];\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name][1];\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}