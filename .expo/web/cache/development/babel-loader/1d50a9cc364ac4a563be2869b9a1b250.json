{"ast":null,"code":"import * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    _Dimensions$get$width = _Dimensions$get.width,\n    width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width,\n    _Dimensions$get$heigh = _Dimensions$get.height,\n    height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh;\n\nvar initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  var children = _ref.children;\n  return React.createElement(SafeAreaInsetsContext.Consumer, null, function (insets) {\n    if (insets) {\n      return children;\n    }\n\n    return React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["width","height","Dimensions","initialMetrics","initialWindowMetrics","frame","x","y","insets","top","left","right","bottom","children","SafeAreaProviderCompat"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,SAAA,oBAAA,EAAA,qBAAA,EAAA,gBAAA,QAAA,gCAAA;;AAUA,sBAAkCE,UAAU,CAAVA,GAAAA,CAAlC,QAAkCA,CAAlC;AAAA,4CAAQF,KAAR;AAAA,IAAQA,KAAR,sCAAM,CAAN;AAAA,4CAAmBC,MAAnB;AAAA,IAAmBA,MAAnB,sCAA4B,CAA5B;;AAKA,IAAME,cAAc,GAClB,QAAQ,CAAR,EAAA,KAAA,KAAA,IAAyBC,oBAAoB,IAA7C,IAAA,GACI;AACEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,CAAC,EAAH,CAAA;AAAQC,IAAAA,CAAC,EAAT,CAAA;AAAcP,IAAAA,KAAd,EAAcA,KAAd;AAAqBC,IAAAA,MAAAA,EAAAA;AAArB,GADT;AAEEO,EAAAA,MAAM,EAAE;AAAEC,IAAAA,GAAG,EAAL,CAAA;AAAUC,IAAAA,IAAI,EAAd,CAAA;AAAmBC,IAAAA,KAAK,EAAxB,CAAA;AAA6BC,IAAAA,MAAM,EAAE;AAArC;AAFV,CADJ,GADF,oBAAA;AAQA,eAAe,SAAA,sBAAA,OAAqD;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AAClE,SACE,KAAA,CAAA,aAAA,CAAC,qBAAD,CAAA,QAAA,EAAA,IAAA,EACIL,UAAAA,MAAD,EAAY;AACX,QAAA,MAAA,EAAY;AAIV,aAAA,QAAA;AACD;;AAED,WACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,MAAA,cAAc,EAAEL;AAAlC,KAAA,EADF,QACE,CADF;AAVN,GACE,CADF;AAkBD;AAEDW,sBAAsB,CAAtBA,cAAAA,GAAAA,cAAAA","sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform } from 'react-native';\nimport {\n  initialWindowMetrics,\n  SafeAreaInsetsContext,\n  SafeAreaProvider,\n} from 'react-native-safe-area-context';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n  Platform.OS === 'web' || initialWindowMetrics == null\n    ? {\n        frame: { x: 0, y: 0, width, height },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : initialWindowMetrics;\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaInsetsContext.Consumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialMetrics={initialMetrics}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaInsetsContext.Consumer>\n  );\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n"]},"metadata":{},"sourceType":"module"}