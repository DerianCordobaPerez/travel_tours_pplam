{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useKeyboardBottomInset = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useKeyboardBottomInset = function useKeyboardBottomInset() {\n  var _React$useState = React.useState(0),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      bottom = _React$useState2[0],\n      setBottom = _React$useState2[1];\n\n  var subscriptions = React.useRef([]);\n  React.useEffect(function () {\n    function onKeyboardChange(e) {\n      if (e.startCoordinates && e.endCoordinates.screenY < e.startCoordinates.screenY) setBottom(e.endCoordinates.height / 2);else setBottom(0);\n    }\n\n    if (_reactNative.Platform.OS === 'ios') {\n      subscriptions.current = [_reactNative.Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange)];\n    } else {\n      subscriptions.current = [_reactNative.Keyboard.addListener('keyboardDidHide', onKeyboardChange), _reactNative.Keyboard.addListener('keyboardDidShow', onKeyboardChange)];\n    }\n\n    return function () {\n      subscriptions.current.forEach(function (subscription) {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n  return bottom;\n};\n\nexports.useKeyboardBottomInset = useKeyboardBottomInset;","map":{"version":3,"sources":["useKeyboardBottomInset.ts"],"names":["useKeyboardBottomInset","bottom","setBottom","React","subscriptions","e","Platform","Keyboard","subscription"],"mappings":";;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAGO,IAAMA,sBAAsB,GAAtBA,SAAAA,sBAAAA,GAA+B;AAAA,MAAA,eAAA,GACdG,KAAK,CAALA,QAAAA,CADc,CACdA,CADc;AAAA,MAAA,gBAAA,GAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,eAAA,EAAA,CAAA,CAAA;AAAA,MACnCF,MADmC,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,MAC3BC,SAD2B,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAE1C,MAAME,aAAa,GAAGD,KAAK,CAALA,MAAAA,CAAtB,EAAsBA,CAAtB;AAEAA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,aAAA,gBAAA,CAAA,CAAA,EAA4C;AAC1C,UACEE,CAAC,CAADA,gBAAAA,IACAA,CAAC,CAADA,cAAAA,CAAAA,OAAAA,GAA2BA,CAAC,CAADA,gBAAAA,CAF7B,OAAA,EAIEH,SAAS,CAACG,CAAC,CAADA,cAAAA,CAAAA,MAAAA,GAJZ,CAIW,CAATH,CAJF,KAKKA,SAAS,CAATA,CAAS,CAATA;AAGP;;AAAA,QAAII,YAAAA,CAAAA,QAAAA,CAAAA,EAAAA,KAAJ,KAAA,EAA2B;AACzBF,MAAAA,aAAa,CAAbA,OAAAA,GAAwB,CACtBG,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAAA,yBAAAA,EADFH,gBACEG,CADsB,CAAxBH;AADF,KAAA,MAIO;AACLA,MAAAA,aAAa,CAAbA,OAAAA,GAAwB,CACtBG,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAAA,iBAAAA,EADsB,gBACtBA,CADsB,EAEtBA,YAAAA,CAAAA,QAAAA,CAAAA,WAAAA,CAAAA,iBAAAA,EAFFH,gBAEEG,CAFsB,CAAxBH;AAKF;;AAAA,WAAO,YAAM;AACXA,MAAAA,aAAa,CAAbA,OAAAA,CAAAA,OAAAA,CAA8B,UAAA,YAAA,EAAkB;AAC9CI,QAAAA,YAAY,CAAZA,MAAAA;AADFJ,OAAAA;AADF,KAAA;AApBFD,GAAAA,EAyBG,CAAA,SAAA,EAzBHA,aAyBG,CAzBHA;AA2BA,SAAA,MAAA;AA/BK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform, KeyboardEvent } from 'react-native';\n\nexport const useKeyboardBottomInset = () => {\n  const [bottom, setBottom] = React.useState(0);\n  const subscriptions = React.useRef<any[]>([]);\n\n  React.useEffect(() => {\n    function onKeyboardChange(e: KeyboardEvent) {\n      if (\n        e.startCoordinates &&\n        e.endCoordinates.screenY < e.startCoordinates.screenY\n      )\n        setBottom(e.endCoordinates.height / 2);\n      else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange),\n      ];\n    } else {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardDidHide', onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', onKeyboardChange),\n      ];\n    }\n    return () => {\n      subscriptions.current.forEach((subscription) => {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n\n  return bottom;\n};\n"]},"metadata":{},"sourceType":"script"}