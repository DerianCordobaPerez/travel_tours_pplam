{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _native = _interopRequireDefault(require(\"styled-components/native\"));\n\nvar _styledSystem = require(\"styled-system\");\n\nvar _customProps = require(\"../../../utils/customProps\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar _useThemeProps = require(\"../../../hooks/useThemeProps\");\n\nvar _interactions = require(\"@react-native-aria/interactions\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _useResolvedFontFamily = require(\"../../../hooks/useResolvedFontFamily\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/primitives/Input/InputBase.tsx\";\n\nvar StyledInput = (0, _native.default)(_reactNative.TextInput)(_styledSystem.flex, _styledSystem.color, _styledSystem.space, _styledSystem.layout, _styledSystem.flexbox, _styledSystem.border, _styledSystem.typography, _customProps.customBorder, _customProps.customBackground, _customProps.customOutline, _customProps.customShadow, _customProps.customExtra, _customProps.customTypography, _customProps.customLayout);\n\nvar InputBase = function InputBase(_ref2, ref) {\n  var _onKeyPress = _ref2.onKeyPress,\n      _onFocus = _ref2.onFocus,\n      _onBlur = _ref2.onBlur,\n      disableFocusHandling = _ref2.disableFocusHandling,\n      inputProps = _ref2.inputProps,\n      wrapperRef = _ref2.wrapperRef,\n      props = (0, _objectWithoutProperties2.default)(_ref2, [\"onKeyPress\", \"onFocus\", \"onBlur\", \"disableFocusHandling\", \"inputProps\", \"wrapperRef\"]);\n\n  var _React$useState = _react.default.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setIsFocused = _React$useState2[1];\n\n  var handleFocus = function handleFocus(focusState, callback) {\n    !disableFocusHandling && setIsFocused(focusState);\n    callback();\n  };\n\n  var inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n\n  var _usePropsResolution = (0, _useThemeProps.usePropsResolution)('Input', (0, _extends2.default)({}, inputThemeProps, props)),\n      isFullWidth = _usePropsResolution.isFullWidth,\n      isDisabled = _usePropsResolution.isDisabled,\n      isInvalid = _usePropsResolution.isInvalid,\n      isReadOnly = _usePropsResolution.isReadOnly,\n      ariaLabel = _usePropsResolution.ariaLabel,\n      accessibilityLabel = _usePropsResolution.accessibilityLabel,\n      placeholderTextColor = _usePropsResolution.placeholderTextColor,\n      selectionColor = _usePropsResolution.selectionColor,\n      underlineColorAndroid = _usePropsResolution.underlineColorAndroid,\n      type = _usePropsResolution.type,\n      _hover = _usePropsResolution._hover,\n      _focus = _usePropsResolution._focus,\n      _disabled = _usePropsResolution._disabled,\n      _invalid = _usePropsResolution._invalid,\n      fontFamily = _usePropsResolution.fontFamily,\n      fontWeight = _usePropsResolution.fontWeight,\n      fontStyle = _usePropsResolution.fontStyle,\n      themedProps = (0, _objectWithoutProperties2.default)(_usePropsResolution, [\"isFullWidth\", \"isDisabled\", \"isInvalid\", \"isReadOnly\", \"ariaLabel\", \"accessibilityLabel\", \"placeholderTextColor\", \"selectionColor\", \"underlineColorAndroid\", \"type\", \"_hover\", \"_focus\", \"_disabled\", \"_invalid\", \"fontFamily\", \"fontWeight\", \"fontStyle\"]);\n\n  var _ref = _react.default.useRef(null);\n\n  var _useHover = (0, _interactions.useHover)({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var resolvedFontFamily = (0, _useResolvedFontFamily.useResolvedFontFamily)({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle\n  });\n  return _react.default.createElement(StyledInput, (0, _extends2.default)({}, inputProps, resolvedFontFamily, {\n    secureTextEntry: type === 'password',\n    accessible: true,\n    accessibilityLabel: ariaLabel || accessibilityLabel,\n    editable: isDisabled || isReadOnly ? false : true,\n    w: isFullWidth ? '100%' : undefined\n  }, themedProps, isHovered && _hover, isFocused && _focus, isDisabled && _disabled, isInvalid && _invalid, {\n    placeholderTextColor: (0, _hooks.useToken)('colors', placeholderTextColor),\n    selectionColor: (0, _hooks.useToken)('colors', selectionColor),\n    underlineColorAndroid: (0, _hooks.useToken)('colors', underlineColorAndroid),\n    onKeyPress: function onKeyPress(e) {\n      e.persist();\n      _onKeyPress && _onKeyPress(e);\n    },\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    }\n  }, _reactNative.Platform.OS === 'web' ? {\n    disabled: isDisabled,\n    cursor: isDisabled ? 'not-allowed' : 'auto'\n  } : {}, {\n    ref: (0, _utils.mergeRefs)([ref, _ref, wrapperRef]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(InputBase));\n\nexports.default = _default;","map":{"version":3,"sources":["InputBase.tsx"],"names":["StyledInput","TextInput","flex","color","space","layout","flexbox","border","typography","customBorder","customBackground","customOutline","customShadow","customExtra","customTypography","customLayout","InputBase","onKeyPress","onFocus","onBlur","disableFocusHandling","inputProps","wrapperRef","props","isFocused","setIsFocused","React","handleFocus","callback","inputThemeProps","isDisabled","isInvalid","isReadOnly","isRequired","isFullWidth","ariaLabel","accessibilityLabel","placeholderTextColor","selectionColor","underlineColorAndroid","type","_hover","_focus","_disabled","_invalid","fontFamily","fontWeight","fontStyle","themedProps","_ref","isHovered","resolvedFontFamily","e","Platform","disabled","cursor"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { TextInput, Platform } from 'react-native';\nimport styled from 'styled-components/native';\nimport {\n  border,\n  flex,\n  space,\n  color,\n  flexbox,\n  layout,\n  typography,\n} from 'styled-system';\nimport {\n  customBorder,\n  customBackground,\n  customOutline,\n  customLayout,\n  customExtra,\n  customShadow,\n  customTypography,\n} from '../../../utils/customProps';\nimport type { IInputProps } from './types';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = styled(TextInput)<IInputProps>(\n  flex,\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  customBorder,\n  customBackground,\n  customOutline,\n  customShadow,\n  customExtra,\n  customTypography,\n  customLayout\n);\n\nconst InputBase = (\n  {\n    onKeyPress,\n    onFocus,\n    onBlur,\n    disableFocusHandling,\n    inputProps,\n    wrapperRef,\n    ...props\n  }: IInputProps & {\n    disableFocusHandling?: boolean;\n    inputProps: any;\n  },\n  ref: any\n) => {\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    !disableFocusHandling && setIsFocused(focusState);\n    callback();\n  };\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    isFullWidth,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    ariaLabel,\n    accessibilityLabel,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    type,\n    _hover,\n    _focus,\n    _disabled,\n    _invalid,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    ...themedProps\n  } = usePropsResolution('Input', {\n    ...inputThemeProps,\n    ...props,\n  });\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight,\n    fontStyle,\n  });\n\n  return (\n    <StyledInput\n      {...inputProps}\n      {...resolvedFontFamily}\n      secureTextEntry={type === 'password'}\n      accessible\n      accessibilityLabel={ariaLabel || accessibilityLabel}\n      editable={isDisabled || isReadOnly ? false : true}\n      w={isFullWidth ? '100%' : undefined}\n      {...themedProps}\n      {...(isHovered && _hover)}\n      {...(isFocused && _focus)}\n      {...(isDisabled && _disabled)}\n      {...(isInvalid && _invalid)}\n      placeholderTextColor={useToken('colors', placeholderTextColor)}\n      selectionColor={useToken('colors', selectionColor)}\n      underlineColorAndroid={useToken('colors', underlineColorAndroid)}\n      onKeyPress={(e: any) => {\n        e.persist();\n        onKeyPress && onKeyPress(e);\n      }}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      {...(Platform.OS === 'web'\n        ? {\n            disabled: isDisabled,\n            cursor: isDisabled ? 'not-allowed' : 'auto',\n          }\n        : {})}\n      ref={mergeRefs([ref, _ref, wrapperRef])}\n    />\n  );\n};\n\nexport default memo(forwardRef(InputBase));\n"]},"metadata":{},"sourceType":"script"}