{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.MenuOptionContext = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _MenuGroup = _interopRequireDefault(require(\"./MenuGroup\"));\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Menu/MenuOptionGroup.tsx\";\n\nvar MenuOptionContext = _react.default.createContext({\n  values: [],\n  onChange: function onChange(_val) {},\n  type: 'checkbox'\n});\n\nexports.MenuOptionContext = MenuOptionContext;\n\nvar MenuOptionGroup = function MenuOptionGroup(_ref, ref) {\n  var type = _ref.type,\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"type\", \"defaultValue\", \"value\", \"onChange\"]);\n  var internalDefaultValue = defaultValue ? Array.isArray(defaultValue) ? defaultValue : [defaultValue] : [];\n\n  var _React$useState = _react.default.useState(internalDefaultValue),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      internalValues = _React$useState2[0],\n      setValues = _React$useState2[1];\n\n  onChange = function onChange(newValue) {\n    if (type === 'checkbox') {\n      var newValues = (0, _toConsumableArray2.default)(internalValues);\n\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n    } else if (type === 'radio') {\n      setValues([newValue]);\n    }\n  };\n\n  return _react.default.createElement(MenuOptionContext.Provider, {\n    value: {\n      values: !value ? internalValues : Array.isArray(value) ? value : [value],\n      onChange: onChange,\n      type: type\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_MenuGroup.default, (0, _extends2.default)({}, props, {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  })));\n};\n\nvar _default = (0, _react.memo)((0, _react.forwardRef)(MenuOptionGroup));\n\nexports.default = _default;","map":{"version":3,"sources":["MenuOptionGroup.tsx"],"names":["MenuOptionContext","React","values","onChange","type","MenuOptionGroup","defaultValue","value","props","internalDefaultValue","Array","internalValues","setValues","newValues"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport MenuGroup from './MenuGroup';\nimport type { IMenuOptionGroupProps, IMenuOptionContextProps } from './types';\n\nexport const MenuOptionContext = React.createContext<IMenuOptionContextProps>({\n  values: [],\n  onChange: (_val) => {},\n  type: 'checkbox',\n});\n\nconst MenuOptionGroup = (\n  { type, defaultValue, value, onChange, ...props }: IMenuOptionGroupProps,\n  ref?: any\n) => {\n  let internalDefaultValue = defaultValue\n    ? Array.isArray(defaultValue)\n      ? defaultValue\n      : [defaultValue]\n    : [];\n\n  let [internalValues, setValues] = React.useState<Array<string | number>>(\n    internalDefaultValue\n  );\n  onChange = (newValue: string | number) => {\n    if (type === 'checkbox') {\n      let newValues = [...internalValues];\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n    } else if (type === 'radio') {\n      setValues([newValue]);\n    }\n  };\n  return (\n    <MenuOptionContext.Provider\n      value={{\n        values: !value\n          ? internalValues\n          : Array.isArray(value)\n          ? value\n          : [value],\n        onChange,\n        type,\n      }}\n    >\n      <MenuGroup {...props} ref={ref} />\n    </MenuOptionContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(MenuOptionGroup));\n"]},"metadata":{},"sourceType":"script"}