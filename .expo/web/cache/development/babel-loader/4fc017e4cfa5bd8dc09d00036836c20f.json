{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Input = require(\"../../primitives/Input\");\n\nvar _Context = require(\"./Context\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/NumberInput/NumberInputField.tsx\";\n\nvar NumberInputFiled = function NumberInputFiled(_ref, ref) {\n  var isDisabled = _ref.isDisabled,\n      props = (0, _objectWithoutProperties2.default)(_ref, [\"isDisabled\"]);\n\n  var _React$useContext = _react.default.useContext(_Context.NumberInputContext),\n      handleChange = _React$useContext.handleChange,\n      handleChangeWithoutCheck = _React$useContext.handleChangeWithoutCheck,\n      numberInputStepper = _React$useContext.numberInputStepper,\n      numberInputValue = _React$useContext.numberInputValue,\n      isControlled = _React$useContext.isControlled,\n      context = (0, _objectWithoutProperties2.default)(_React$useContext, [\"handleChange\", \"handleChangeWithoutCheck\", \"numberInputStepper\", \"numberInputValue\", \"isControlled\"]);\n\n  var changeHandler = function changeHandler(inputValue) {\n    var minusIndex = inputValue.indexOf('-');\n\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n\n    var value = parseInt(inputValue, 10);\n    if (isControlled) handleChange && handleChange(value);else if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n\n  var blurHandler = function blurHandler() {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  };\n\n  return _react.default.createElement(_Input.Input, (0, _extends2.default)({\n    p: 0,\n    pl: 2\n  }, context, props, {\n    onBlur: function onBlur() {\n      return blurHandler();\n    },\n    isDisabled: isDisabled || context.isDisabled,\n    onChangeText: function onChangeText(inputValue) {\n      return changeHandler(inputValue);\n    },\n    keyboardType: \"numeric\",\n    value: \"\" + numberInputValue,\n    InputRightElement: numberInputStepper,\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar _default = _react.default.memo(_react.default.forwardRef(NumberInputFiled));\n\nexports.default = _default;","map":{"version":3,"sources":["NumberInputField.tsx"],"names":["NumberInputFiled","isDisabled","props","handleChange","handleChangeWithoutCheck","numberInputStepper","numberInputValue","isControlled","context","React","NumberInputContext","changeHandler","minusIndex","inputValue","value","parseInt","blurHandler"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { INumberInputContext, INumberInputFieldProps } from './types';\nimport { NumberInputContext } from './Context';\n\nconst NumberInputFiled = (\n  { isDisabled, ...props }: INumberInputFieldProps,\n  ref: any\n) => {\n  const {\n    handleChange,\n    handleChangeWithoutCheck,\n    numberInputStepper,\n    numberInputValue,\n    isControlled,\n    ...context\n  }: INumberInputContext & {\n    handleChange?: (value: string | number) => void;\n    numberInputStepper?: any;\n  } = React.useContext(NumberInputContext);\n  const changeHandler = (inputValue: any) => {\n    let minusIndex = inputValue.indexOf('-');\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n    const value = parseInt(inputValue, 10);\n    if (isControlled) handleChange && handleChange(value);\n    else if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);\n    else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n  const blurHandler = () => {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  };\n  return (\n    <Input\n      p={0}\n      pl={2}\n      {...context}\n      {...props}\n      onBlur={() => blurHandler()}\n      isDisabled={isDisabled || context.isDisabled}\n      onChangeText={(inputValue) => changeHandler(inputValue)}\n      keyboardType=\"numeric\"\n      value={`${numberInputValue}`}\n      InputRightElement={numberInputStepper}\n      ref={ref}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(NumberInputFiled));\n"]},"metadata":{},"sourceType":"script"}