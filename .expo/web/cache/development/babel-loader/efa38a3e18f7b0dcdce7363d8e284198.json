{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transition = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _this = this,\n    _jsxFileName = \"/Users/adityajamuar/Sites/projects/nativebase/NativeBase/src/components/composites/Transitions/Transition.tsx\";\n\nvar transformStylesMap = {\n  translateY: true,\n  translateX: true,\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  rotate: true\n};\nvar defaultStyles = {\n  opacity: 1,\n  translateY: 0,\n  translateX: 0,\n  scale: 1,\n  scaleX: 1,\n  scaleY: 1,\n  rotate: '0deg'\n};\n\nvar getAnimatedStyles = function getAnimatedStyles(animateValue) {\n  return function (initial, to) {\n    var styles = {\n      transform: []\n    };\n\n    for (var key in initial) {\n      if (key === 'transition') {\n        continue;\n      }\n\n      if (key in transformStylesMap) {\n        var _styles$transform;\n\n        (_styles$transform = styles.transform) == null ? void 0 : _styles$transform.push((0, _defineProperty2.default)({}, key, animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [initial[key], to[key]]\n        })));\n      } else {\n        styles[key] = animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [initial[key], to[key]]\n        });\n      }\n    }\n\n    return styles;\n  };\n};\n\nvar defaultTransitionConfig = {\n  type: 'timing',\n  useNativeDriver: true,\n  duration: 250,\n  delay: 0\n};\nvar Transition = (0, _react.forwardRef)(function (_ref, ref) {\n  var children = _ref.children,\n      onTransitionComplete = _ref.onTransitionComplete,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      initial = _ref.initial,\n      animate = _ref.animate,\n      exit = _ref.exit,\n      style = _ref.style,\n      as = _ref.as,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"children\", \"onTransitionComplete\", \"visible\", \"initial\", \"animate\", \"exit\", \"style\", \"as\"]);\n\n  var animateValue = _react.default.useRef(new _reactNative.Animated.Value(0)).current;\n\n  var Component = _react.default.useMemo(function () {\n    if (as) {\n      return _reactNative.Animated.createAnimatedComponent(as);\n    }\n\n    return _reactNative.Animated.View;\n  }, [as]);\n\n  var _React$useState = _react.default.useState(visible ? 'entering' : 'exited'),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      animationState = _React$useState2[0],\n      setAnimationState = _React$useState2[1];\n\n  var prevVisible = _react.default.useRef(visible);\n\n  _react.default.useEffect(function startEntryTransition() {\n    var _animate;\n\n    var entryTransition = (0, _extends2.default)({}, defaultTransitionConfig, (_animate = animate) == null ? void 0 : _animate.transition);\n\n    if (visible) {\n      var _entryTransition$type;\n\n      _reactNative.Animated.sequence([_reactNative.Animated.delay(entryTransition.delay), _reactNative.Animated[(_entryTransition$type = entryTransition.type) != null ? _entryTransition$type : 'timing'](animateValue, (0, _extends2.default)({\n        toValue: 1,\n        useNativeDriver: true\n      }, entryTransition))]).start(function () {\n        setAnimationState('entered');\n      });\n    }\n  }, [visible, onTransitionComplete, animateValue, animate]);\n\n  _react.default.useEffect(function () {\n    if (prevVisible.current !== visible && !visible) {\n      setAnimationState('exiting');\n    }\n\n    prevVisible.current = visible;\n  }, [visible]);\n\n  _react.default.useEffect(function startExitTransition() {\n    var exitTransition = (0, _extends2.default)({}, defaultTransitionConfig, exit == null ? void 0 : exit.transition);\n\n    if (animationState === 'exiting') {\n      var _exitTransition$type;\n\n      _reactNative.Animated.sequence([_reactNative.Animated.delay(exitTransition.delay), _reactNative.Animated[(_exitTransition$type = exitTransition.type) != null ? _exitTransition$type : 'timing'](animateValue, (0, _extends2.default)({\n        toValue: 0,\n        useNativeDriver: true\n      }, exitTransition))]).start(function () {\n        setAnimationState('exited');\n      });\n    }\n  }, [exit, onTransitionComplete, setAnimationState, animationState, animateValue]);\n\n  initial = animationState === 'exiting' && exit ? (0, _extends2.default)({}, defaultStyles, exit) : (0, _extends2.default)({}, defaultStyles, initial);\n  animate = (0, _extends2.default)({}, defaultStyles, animate);\n\n  var styles = _react.default.useMemo(function () {\n    return [getAnimatedStyles(animateValue)(initial, animate), style];\n  }, [animateValue, initial, animate, style]);\n\n  _react.default.useEffect(function () {\n    if (animationState === 'exited') {\n      onTransitionComplete && onTransitionComplete('exited');\n    } else if (animationState === 'entered') {\n      onTransitionComplete && onTransitionComplete('entered');\n    }\n  }, [animationState, onTransitionComplete]);\n\n  return _react.default.createElement(Component, (0, _extends2.default)({\n    pointerEvents: \"box-none\",\n    needsOffscreenAlphaCompositing: true,\n    style: styles,\n    ref: ref\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }), children);\n});\nexports.Transition = Transition;","map":{"version":3,"sources":["Transition.tsx"],"names":["transformStylesMap","translateY","translateX","scale","scaleX","scaleY","rotate","defaultStyles","opacity","getAnimatedStyles","styles","transform","key","animateValue","inputRange","outputRange","initial","to","defaultTransitionConfig","type","useNativeDriver","duration","delay","Transition","children","onTransitionComplete","visible","animate","exit","style","as","rest","React","Animated","Component","animationState","setAnimationState","prevVisible","entryTransition","toValue","exitTransition"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Animated } from 'react-native';\nimport type {\n  ISupportedTransitions,\n  ITransitionConfig,\n  ITransitionProps,\n} from './types';\n\nconst transformStylesMap = {\n  translateY: true,\n  translateX: true,\n  scale: true,\n  scaleX: true,\n  scaleY: true,\n  rotate: true,\n};\n\nconst defaultStyles = {\n  opacity: 1,\n  translateY: 0,\n  translateX: 0,\n  scale: 1,\n  scaleX: 1,\n  scaleY: 1,\n  rotate: '0deg',\n};\n\nconst getAnimatedStyles = (animateValue: any) => (\n  initial: ISupportedTransitions,\n  to: ISupportedTransitions\n) => {\n  const styles: any = {\n    transform: [],\n  };\n\n  for (let key in initial) {\n    if (key === 'transition') {\n      continue;\n    }\n\n    if (key in transformStylesMap) {\n      styles.transform?.push({\n        [key]: animateValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [(initial as any)[key], (to as any)[key]],\n        }),\n      } as any);\n    } else {\n      styles[key] = animateValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [(initial as any)[key], (to as any)[key]],\n      });\n    }\n  }\n\n  return styles;\n};\n\nconst defaultTransitionConfig: ITransitionConfig = {\n  type: 'timing',\n  useNativeDriver: true,\n  duration: 250,\n  delay: 0,\n};\n\nexport const Transition = forwardRef(\n  (\n    {\n      children,\n      onTransitionComplete,\n      visible = false,\n      initial,\n      animate,\n      exit,\n      style,\n      as,\n      ...rest\n    }: ITransitionProps,\n    ref: any\n  ) => {\n    const animateValue = React.useRef(new Animated.Value(0)).current;\n\n    const Component = React.useMemo(() => {\n      if (as) {\n        return Animated.createAnimatedComponent(as);\n      }\n      return Animated.View;\n    }, [as]);\n\n    const [animationState, setAnimationState] = React.useState(\n      visible ? 'entering' : 'exited'\n    );\n\n    const prevVisible = React.useRef(visible);\n\n    React.useEffect(\n      function startEntryTransition() {\n        const entryTransition = {\n          ...defaultTransitionConfig,\n          ...animate?.transition,\n        };\n\n        if (visible) {\n          Animated.sequence([\n            // @ts-ignore - delay is present in defaultTransitionConfig\n            Animated.delay(entryTransition.delay),\n            Animated[entryTransition.type ?? 'timing'](animateValue, {\n              toValue: 1,\n              useNativeDriver: true,\n              ...entryTransition,\n            }),\n          ]).start(() => {\n            setAnimationState('entered');\n          });\n        }\n      },\n      [visible, onTransitionComplete, animateValue, animate]\n    );\n\n    React.useEffect(() => {\n      // Exit request\n      if (prevVisible.current !== visible && !visible) {\n        setAnimationState('exiting');\n      }\n      prevVisible.current = visible;\n    }, [visible]);\n\n    React.useEffect(\n      function startExitTransition() {\n        const exitTransition = {\n          ...defaultTransitionConfig,\n          ...exit?.transition,\n        };\n\n        if (animationState === 'exiting') {\n          Animated.sequence([\n            // @ts-ignore - delay is present in defaultTransitionConfig\n            Animated.delay(exitTransition.delay),\n            Animated[exitTransition.type ?? 'timing'](animateValue, {\n              toValue: 0,\n              useNativeDriver: true,\n              ...exitTransition,\n            }),\n          ]).start(() => {\n            setAnimationState('exited');\n          });\n        }\n      },\n      [\n        exit,\n        onTransitionComplete,\n        setAnimationState,\n        animationState,\n        animateValue,\n      ]\n    );\n\n    // If exit animation is present and state is exiting, we replace 'initial' with 'exit' animation\n    initial =\n      animationState === 'exiting' && exit\n        ? { ...defaultStyles, ...exit }\n        : { ...defaultStyles, ...initial };\n\n    animate = { ...defaultStyles, ...animate };\n\n    const styles = React.useMemo(() => {\n      return [\n        getAnimatedStyles(animateValue)(\n          initial as ISupportedTransitions,\n          animate as ISupportedTransitions\n        ),\n        style,\n      ];\n    }, [animateValue, initial, animate, style]);\n\n    React.useEffect(() => {\n      if (animationState === 'exited') {\n        onTransitionComplete && onTransitionComplete('exited');\n      } else if (animationState === 'entered') {\n        onTransitionComplete && onTransitionComplete('entered');\n      }\n    }, [animationState, onTransitionComplete]);\n\n    return (\n      <Component\n        pointerEvents=\"box-none\"\n        // https://github.com/facebook/react-native/issues/23090#issuecomment-710803743\n        needsOffscreenAlphaCompositing\n        style={styles}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"script"}